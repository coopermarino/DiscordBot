1662098170
3 3
13 libp3mathutil 4 LL_p 12 panda3d.core 
758
807 5 clear 0 4 1567 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 17 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

808 6 output 0 4 1567 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 18 0
91
void PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(std::ostream &out) const;

809 19 ~PointerToArrayBase 0 516 1566 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

810 11 operator == 0 4 1566 44 PointerToArrayBase< LMatrix3d >::operator == 0 1 15 64
// These are implemented in PointerToVoid, but expose them here.
109
inline bool PointerToArrayBase< LMatrix3d >::operator ==(PointerToArrayBase< LMatrix3d > const &other) const;

811 11 operator != 0 4 1566 44 PointerToArrayBase< LMatrix3d >::operator != 0 1 16 0
109
inline bool PointerToArrayBase< LMatrix3d >::operator !=(PointerToArrayBase< LMatrix3d > const &other) const;

812 19 ConstPointerToArray 0 260 1565 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 2 1 2 0
210
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);

813 5 clear 0 4 1565 39 ConstPointerToArray< LMatrix3d >::clear 0 1 3 0
58
inline void ConstPointerToArray< LMatrix3d >::clear(void);

814 4 size 0 4 1565 38 ConstPointerToArray< LMatrix3d >::size 0 1 4 0
76
inline unsigned long int ConstPointerToArray< LMatrix3d >::size(void) const;

815 11 get_element 0 4 1565 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 5 0
97
inline LMatrix3d const &ConstPointerToArray< LMatrix3d >::get_element(unsigned long int n) const;

816 11 __getitem__ 0 4 1565 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 6 0
90
LMatrix3d const &ConstPointerToArray< LMatrix3d >::__getitem__(unsigned long int n) const;

817 8 get_data 0 4 1565 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 7 0
65
PyObject *ConstPointerToArray< LMatrix3d >::get_data(void) const;

818 11 get_subdata 0 4 1565 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 8 0
108
PyObject *ConstPointerToArray< LMatrix3d >::get_subdata(unsigned long int n, unsigned long int count) const;

819 13 get_ref_count 0 4 1565 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 9 0
71
inline int ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

820 18 get_node_ref_count 0 4 1565 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 10 0
76
inline int ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

821 5 count 0 4 1565 39 ConstPointerToArray< LMatrix3d >::count 0 1 11 0
90
inline unsigned long int ConstPointerToArray< LMatrix3d >::count(LMatrix3d const &) const;

822 10 __reduce__ 0 4 1565 44 ConstPointerToArray< LMatrix3d >::__reduce__ 0 1 12 0
77
PyObject *ConstPointerToArray< LMatrix3d >::__reduce__(PyObject *self) const;

823 13 __getbuffer__ 0 4 1565 47 ConstPointerToArray< LMatrix3d >::__getbuffer__ 0 1 13 0
102
int ConstPointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

824 17 __releasebuffer__ 0 4 1565 51 ConstPointerToArray< LMatrix3d >::__releasebuffer__ 0 1 14 0
96
void ConstPointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

825 20 ~ConstPointerToArray 0 516 1565 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

826 5 clear 0 4 1571 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 35 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

827 6 output 0 4 1571 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 36 0
91
void PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(std::ostream &out) const;

828 19 ~PointerToArrayBase 0 516 1570 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

829 11 operator == 0 4 1570 44 PointerToArrayBase< LMatrix3f >::operator == 0 1 33 64
// These are implemented in PointerToVoid, but expose them here.
109
inline bool PointerToArrayBase< LMatrix3f >::operator ==(PointerToArrayBase< LMatrix3f > const &other) const;

830 11 operator != 0 4 1570 44 PointerToArrayBase< LMatrix3f >::operator != 0 1 34 0
109
inline bool PointerToArrayBase< LMatrix3f >::operator !=(PointerToArrayBase< LMatrix3f > const &other) const;

831 19 ConstPointerToArray 0 260 1569 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 2 19 20 0
210
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);

832 5 clear 0 4 1569 39 ConstPointerToArray< LMatrix3f >::clear 0 1 21 0
58
inline void ConstPointerToArray< LMatrix3f >::clear(void);

833 4 size 0 4 1569 38 ConstPointerToArray< LMatrix3f >::size 0 1 22 0
76
inline unsigned long int ConstPointerToArray< LMatrix3f >::size(void) const;

834 11 get_element 0 4 1569 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 23 0
97
inline LMatrix3f const &ConstPointerToArray< LMatrix3f >::get_element(unsigned long int n) const;

835 11 __getitem__ 0 4 1569 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 24 0
90
LMatrix3f const &ConstPointerToArray< LMatrix3f >::__getitem__(unsigned long int n) const;

836 8 get_data 0 4 1569 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 25 0
65
PyObject *ConstPointerToArray< LMatrix3f >::get_data(void) const;

837 11 get_subdata 0 4 1569 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 26 0
108
PyObject *ConstPointerToArray< LMatrix3f >::get_subdata(unsigned long int n, unsigned long int count) const;

838 13 get_ref_count 0 4 1569 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 27 0
71
inline int ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

839 18 get_node_ref_count 0 4 1569 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 28 0
76
inline int ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

840 5 count 0 4 1569 39 ConstPointerToArray< LMatrix3f >::count 0 1 29 0
90
inline unsigned long int ConstPointerToArray< LMatrix3f >::count(LMatrix3f const &) const;

841 10 __reduce__ 0 4 1569 44 ConstPointerToArray< LMatrix3f >::__reduce__ 0 1 30 0
77
PyObject *ConstPointerToArray< LMatrix3f >::__reduce__(PyObject *self) const;

842 13 __getbuffer__ 0 4 1569 47 ConstPointerToArray< LMatrix3f >::__getbuffer__ 0 1 31 0
102
int ConstPointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

843 17 __releasebuffer__ 0 4 1569 51 ConstPointerToArray< LMatrix3f >::__releasebuffer__ 0 1 32 0
96
void ConstPointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

844 20 ~ConstPointerToArray 0 516 1569 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

845 5 clear 0 4 1574 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 53 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

846 6 output 0 4 1574 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 54 0
92
void PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(std::ostream &out) const;

847 19 ~PointerToArrayBase 0 516 1573 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

848 11 operator == 0 4 1573 45 PointerToArrayBase< LVecBase2d >::operator == 0 1 51 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase2d >::operator ==(PointerToArrayBase< LVecBase2d > const &other) const;

849 11 operator != 0 4 1573 45 PointerToArrayBase< LVecBase2d >::operator != 0 1 52 0
111
inline bool PointerToArrayBase< LVecBase2d >::operator !=(PointerToArrayBase< LVecBase2d > const &other) const;

850 19 ConstPointerToArray 0 260 1572 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 2 37 38 0
214
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);

851 5 clear 0 4 1572 40 ConstPointerToArray< LVecBase2d >::clear 0 1 39 0
59
inline void ConstPointerToArray< LVecBase2d >::clear(void);

852 4 size 0 4 1572 39 ConstPointerToArray< LVecBase2d >::size 0 1 40 0
77
inline unsigned long int ConstPointerToArray< LVecBase2d >::size(void) const;

853 11 get_element 0 4 1572 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 41 0
99
inline LVecBase2d const &ConstPointerToArray< LVecBase2d >::get_element(unsigned long int n) const;

854 11 __getitem__ 0 4 1572 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 42 0
92
LVecBase2d const &ConstPointerToArray< LVecBase2d >::__getitem__(unsigned long int n) const;

855 8 get_data 0 4 1572 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 43 0
66
PyObject *ConstPointerToArray< LVecBase2d >::get_data(void) const;

856 11 get_subdata 0 4 1572 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 44 0
109
PyObject *ConstPointerToArray< LVecBase2d >::get_subdata(unsigned long int n, unsigned long int count) const;

857 13 get_ref_count 0 4 1572 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 45 0
72
inline int ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

858 18 get_node_ref_count 0 4 1572 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 46 0
77
inline int ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

859 5 count 0 4 1572 40 ConstPointerToArray< LVecBase2d >::count 0 1 47 0
92
inline unsigned long int ConstPointerToArray< LVecBase2d >::count(LVecBase2d const &) const;

860 10 __reduce__ 0 4 1572 45 ConstPointerToArray< LVecBase2d >::__reduce__ 0 1 48 0
78
PyObject *ConstPointerToArray< LVecBase2d >::__reduce__(PyObject *self) const;

861 13 __getbuffer__ 0 4 1572 48 ConstPointerToArray< LVecBase2d >::__getbuffer__ 0 1 49 0
103
int ConstPointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

862 17 __releasebuffer__ 0 4 1572 52 ConstPointerToArray< LVecBase2d >::__releasebuffer__ 0 1 50 0
97
void ConstPointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

863 20 ~ConstPointerToArray 0 516 1572 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

864 5 clear 0 4 1577 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 71 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

865 6 output 0 4 1577 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 72 0
92
void PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(std::ostream &out) const;

866 19 ~PointerToArrayBase 0 516 1576 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

867 11 operator == 0 4 1576 45 PointerToArrayBase< LVecBase2f >::operator == 0 1 69 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase2f >::operator ==(PointerToArrayBase< LVecBase2f > const &other) const;

868 11 operator != 0 4 1576 45 PointerToArrayBase< LVecBase2f >::operator != 0 1 70 0
111
inline bool PointerToArrayBase< LVecBase2f >::operator !=(PointerToArrayBase< LVecBase2f > const &other) const;

869 19 ConstPointerToArray 0 260 1575 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 2 55 56 0
214
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);

870 5 clear 0 4 1575 40 ConstPointerToArray< LVecBase2f >::clear 0 1 57 0
59
inline void ConstPointerToArray< LVecBase2f >::clear(void);

871 4 size 0 4 1575 39 ConstPointerToArray< LVecBase2f >::size 0 1 58 0
77
inline unsigned long int ConstPointerToArray< LVecBase2f >::size(void) const;

872 11 get_element 0 4 1575 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 59 0
99
inline LVecBase2f const &ConstPointerToArray< LVecBase2f >::get_element(unsigned long int n) const;

873 11 __getitem__ 0 4 1575 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 60 0
92
LVecBase2f const &ConstPointerToArray< LVecBase2f >::__getitem__(unsigned long int n) const;

874 8 get_data 0 4 1575 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 61 0
66
PyObject *ConstPointerToArray< LVecBase2f >::get_data(void) const;

875 11 get_subdata 0 4 1575 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 62 0
109
PyObject *ConstPointerToArray< LVecBase2f >::get_subdata(unsigned long int n, unsigned long int count) const;

876 13 get_ref_count 0 4 1575 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 63 0
72
inline int ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

877 18 get_node_ref_count 0 4 1575 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 64 0
77
inline int ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

878 5 count 0 4 1575 40 ConstPointerToArray< LVecBase2f >::count 0 1 65 0
92
inline unsigned long int ConstPointerToArray< LVecBase2f >::count(LVecBase2f const &) const;

879 10 __reduce__ 0 4 1575 45 ConstPointerToArray< LVecBase2f >::__reduce__ 0 1 66 0
78
PyObject *ConstPointerToArray< LVecBase2f >::__reduce__(PyObject *self) const;

880 13 __getbuffer__ 0 4 1575 48 ConstPointerToArray< LVecBase2f >::__getbuffer__ 0 1 67 0
103
int ConstPointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

881 17 __releasebuffer__ 0 4 1575 52 ConstPointerToArray< LVecBase2f >::__releasebuffer__ 0 1 68 0
97
void ConstPointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

882 20 ~ConstPointerToArray 0 516 1575 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

883 5 clear 0 4 1580 60 PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear 0 1 89 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear(void);

884 6 output 0 4 1580 61 PointerToBase< ReferenceCountedVector< LVecBase2i > >::output 0 1 90 0
92
void PointerToBase< ReferenceCountedVector< LVecBase2i > >::output(std::ostream &out) const;

885 19 ~PointerToArrayBase 0 516 1579 53 PointerToArrayBase< LVecBase2i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2i >::~PointerToArrayBase(void);

886 11 operator == 0 4 1579 45 PointerToArrayBase< LVecBase2i >::operator == 0 1 87 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase2i >::operator ==(PointerToArrayBase< LVecBase2i > const &other) const;

887 11 operator != 0 4 1579 45 PointerToArrayBase< LVecBase2i >::operator != 0 1 88 0
111
inline bool PointerToArrayBase< LVecBase2i >::operator !=(PointerToArrayBase< LVecBase2i > const &other) const;

888 19 ConstPointerToArray 0 260 1578 54 ConstPointerToArray< LVecBase2i >::ConstPointerToArray 0 2 73 74 0
214
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PointerToArray< LVecBase2i > const &copy);
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(ConstPointerToArray< LVecBase2i > const &copy);

889 5 clear 0 4 1578 40 ConstPointerToArray< LVecBase2i >::clear 0 1 75 0
59
inline void ConstPointerToArray< LVecBase2i >::clear(void);

890 4 size 0 4 1578 39 ConstPointerToArray< LVecBase2i >::size 0 1 76 0
77
inline unsigned long int ConstPointerToArray< LVecBase2i >::size(void) const;

891 11 get_element 0 4 1578 46 ConstPointerToArray< LVecBase2i >::get_element 0 1 77 0
99
inline LVecBase2i const &ConstPointerToArray< LVecBase2i >::get_element(unsigned long int n) const;

892 11 __getitem__ 0 4 1578 46 ConstPointerToArray< LVecBase2i >::__getitem__ 0 1 78 0
92
LVecBase2i const &ConstPointerToArray< LVecBase2i >::__getitem__(unsigned long int n) const;

893 8 get_data 0 4 1578 43 ConstPointerToArray< LVecBase2i >::get_data 0 1 79 0
66
PyObject *ConstPointerToArray< LVecBase2i >::get_data(void) const;

894 11 get_subdata 0 4 1578 46 ConstPointerToArray< LVecBase2i >::get_subdata 0 1 80 0
109
PyObject *ConstPointerToArray< LVecBase2i >::get_subdata(unsigned long int n, unsigned long int count) const;

895 13 get_ref_count 0 4 1578 48 ConstPointerToArray< LVecBase2i >::get_ref_count 0 1 81 0
72
inline int ConstPointerToArray< LVecBase2i >::get_ref_count(void) const;

896 18 get_node_ref_count 0 4 1578 53 ConstPointerToArray< LVecBase2i >::get_node_ref_count 0 1 82 0
77
inline int ConstPointerToArray< LVecBase2i >::get_node_ref_count(void) const;

897 5 count 0 4 1578 40 ConstPointerToArray< LVecBase2i >::count 0 1 83 0
92
inline unsigned long int ConstPointerToArray< LVecBase2i >::count(LVecBase2i const &) const;

898 10 __reduce__ 0 4 1578 45 ConstPointerToArray< LVecBase2i >::__reduce__ 0 1 84 0
78
PyObject *ConstPointerToArray< LVecBase2i >::__reduce__(PyObject *self) const;

899 13 __getbuffer__ 0 4 1578 48 ConstPointerToArray< LVecBase2i >::__getbuffer__ 0 1 85 0
103
int ConstPointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

900 17 __releasebuffer__ 0 4 1578 52 ConstPointerToArray< LVecBase2i >::__releasebuffer__ 0 1 86 0
97
void ConstPointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

901 20 ~ConstPointerToArray 0 516 1578 55 ConstPointerToArray< LVecBase2i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2i >::~ConstPointerToArray(void);

902 5 clear 0 4 1583 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 107 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

903 6 output 0 4 1583 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 108 0
92
void PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(std::ostream &out) const;

904 19 ~PointerToArrayBase 0 516 1582 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

905 11 operator == 0 4 1582 45 PointerToArrayBase< LVecBase3d >::operator == 0 1 105 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase3d >::operator ==(PointerToArrayBase< LVecBase3d > const &other) const;

906 11 operator != 0 4 1582 45 PointerToArrayBase< LVecBase3d >::operator != 0 1 106 0
111
inline bool PointerToArrayBase< LVecBase3d >::operator !=(PointerToArrayBase< LVecBase3d > const &other) const;

907 19 ConstPointerToArray 0 260 1581 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 2 91 92 0
214
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);

908 5 clear 0 4 1581 40 ConstPointerToArray< LVecBase3d >::clear 0 1 93 0
59
inline void ConstPointerToArray< LVecBase3d >::clear(void);

909 4 size 0 4 1581 39 ConstPointerToArray< LVecBase3d >::size 0 1 94 0
77
inline unsigned long int ConstPointerToArray< LVecBase3d >::size(void) const;

910 11 get_element 0 4 1581 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 95 0
99
inline LVecBase3d const &ConstPointerToArray< LVecBase3d >::get_element(unsigned long int n) const;

911 11 __getitem__ 0 4 1581 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 96 0
92
LVecBase3d const &ConstPointerToArray< LVecBase3d >::__getitem__(unsigned long int n) const;

912 8 get_data 0 4 1581 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 97 0
66
PyObject *ConstPointerToArray< LVecBase3d >::get_data(void) const;

913 11 get_subdata 0 4 1581 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 98 0
109
PyObject *ConstPointerToArray< LVecBase3d >::get_subdata(unsigned long int n, unsigned long int count) const;

914 13 get_ref_count 0 4 1581 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 99 0
72
inline int ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

915 18 get_node_ref_count 0 4 1581 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 100 0
77
inline int ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

916 5 count 0 4 1581 40 ConstPointerToArray< LVecBase3d >::count 0 1 101 0
92
inline unsigned long int ConstPointerToArray< LVecBase3d >::count(LVecBase3d const &) const;

917 10 __reduce__ 0 4 1581 45 ConstPointerToArray< LVecBase3d >::__reduce__ 0 1 102 0
78
PyObject *ConstPointerToArray< LVecBase3d >::__reduce__(PyObject *self) const;

918 13 __getbuffer__ 0 4 1581 48 ConstPointerToArray< LVecBase3d >::__getbuffer__ 0 1 103 0
103
int ConstPointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

919 17 __releasebuffer__ 0 4 1581 52 ConstPointerToArray< LVecBase3d >::__releasebuffer__ 0 1 104 0
97
void ConstPointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

920 20 ~ConstPointerToArray 0 516 1581 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

921 5 clear 0 4 1586 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 125 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

922 6 output 0 4 1586 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 126 0
92
void PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(std::ostream &out) const;

923 19 ~PointerToArrayBase 0 516 1585 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

924 11 operator == 0 4 1585 45 PointerToArrayBase< LVecBase3f >::operator == 0 1 123 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase3f >::operator ==(PointerToArrayBase< LVecBase3f > const &other) const;

925 11 operator != 0 4 1585 45 PointerToArrayBase< LVecBase3f >::operator != 0 1 124 0
111
inline bool PointerToArrayBase< LVecBase3f >::operator !=(PointerToArrayBase< LVecBase3f > const &other) const;

926 19 ConstPointerToArray 0 260 1584 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 2 109 110 0
214
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);

927 5 clear 0 4 1584 40 ConstPointerToArray< LVecBase3f >::clear 0 1 111 0
59
inline void ConstPointerToArray< LVecBase3f >::clear(void);

928 4 size 0 4 1584 39 ConstPointerToArray< LVecBase3f >::size 0 1 112 0
77
inline unsigned long int ConstPointerToArray< LVecBase3f >::size(void) const;

929 11 get_element 0 4 1584 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 113 0
99
inline LVecBase3f const &ConstPointerToArray< LVecBase3f >::get_element(unsigned long int n) const;

930 11 __getitem__ 0 4 1584 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 114 0
92
LVecBase3f const &ConstPointerToArray< LVecBase3f >::__getitem__(unsigned long int n) const;

931 8 get_data 0 4 1584 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 115 0
66
PyObject *ConstPointerToArray< LVecBase3f >::get_data(void) const;

932 11 get_subdata 0 4 1584 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 116 0
109
PyObject *ConstPointerToArray< LVecBase3f >::get_subdata(unsigned long int n, unsigned long int count) const;

933 13 get_ref_count 0 4 1584 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 117 0
72
inline int ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

934 18 get_node_ref_count 0 4 1584 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 118 0
77
inline int ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

935 5 count 0 4 1584 40 ConstPointerToArray< LVecBase3f >::count 0 1 119 0
92
inline unsigned long int ConstPointerToArray< LVecBase3f >::count(LVecBase3f const &) const;

936 10 __reduce__ 0 4 1584 45 ConstPointerToArray< LVecBase3f >::__reduce__ 0 1 120 0
78
PyObject *ConstPointerToArray< LVecBase3f >::__reduce__(PyObject *self) const;

937 13 __getbuffer__ 0 4 1584 48 ConstPointerToArray< LVecBase3f >::__getbuffer__ 0 1 121 0
103
int ConstPointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

938 17 __releasebuffer__ 0 4 1584 52 ConstPointerToArray< LVecBase3f >::__releasebuffer__ 0 1 122 0
97
void ConstPointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

939 20 ~ConstPointerToArray 0 516 1584 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

940 5 clear 0 4 1589 60 PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear 0 1 143 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear(void);

941 6 output 0 4 1589 61 PointerToBase< ReferenceCountedVector< LVecBase3i > >::output 0 1 144 0
92
void PointerToBase< ReferenceCountedVector< LVecBase3i > >::output(std::ostream &out) const;

942 19 ~PointerToArrayBase 0 516 1588 53 PointerToArrayBase< LVecBase3i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3i >::~PointerToArrayBase(void);

943 11 operator == 0 4 1588 45 PointerToArrayBase< LVecBase3i >::operator == 0 1 141 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase3i >::operator ==(PointerToArrayBase< LVecBase3i > const &other) const;

944 11 operator != 0 4 1588 45 PointerToArrayBase< LVecBase3i >::operator != 0 1 142 0
111
inline bool PointerToArrayBase< LVecBase3i >::operator !=(PointerToArrayBase< LVecBase3i > const &other) const;

945 19 ConstPointerToArray 0 260 1587 54 ConstPointerToArray< LVecBase3i >::ConstPointerToArray 0 2 127 128 0
214
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PointerToArray< LVecBase3i > const &copy);
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(ConstPointerToArray< LVecBase3i > const &copy);

946 5 clear 0 4 1587 40 ConstPointerToArray< LVecBase3i >::clear 0 1 129 0
59
inline void ConstPointerToArray< LVecBase3i >::clear(void);

947 4 size 0 4 1587 39 ConstPointerToArray< LVecBase3i >::size 0 1 130 0
77
inline unsigned long int ConstPointerToArray< LVecBase3i >::size(void) const;

948 11 get_element 0 4 1587 46 ConstPointerToArray< LVecBase3i >::get_element 0 1 131 0
99
inline LVecBase3i const &ConstPointerToArray< LVecBase3i >::get_element(unsigned long int n) const;

949 11 __getitem__ 0 4 1587 46 ConstPointerToArray< LVecBase3i >::__getitem__ 0 1 132 0
92
LVecBase3i const &ConstPointerToArray< LVecBase3i >::__getitem__(unsigned long int n) const;

950 8 get_data 0 4 1587 43 ConstPointerToArray< LVecBase3i >::get_data 0 1 133 0
66
PyObject *ConstPointerToArray< LVecBase3i >::get_data(void) const;

951 11 get_subdata 0 4 1587 46 ConstPointerToArray< LVecBase3i >::get_subdata 0 1 134 0
109
PyObject *ConstPointerToArray< LVecBase3i >::get_subdata(unsigned long int n, unsigned long int count) const;

952 13 get_ref_count 0 4 1587 48 ConstPointerToArray< LVecBase3i >::get_ref_count 0 1 135 0
72
inline int ConstPointerToArray< LVecBase3i >::get_ref_count(void) const;

953 18 get_node_ref_count 0 4 1587 53 ConstPointerToArray< LVecBase3i >::get_node_ref_count 0 1 136 0
77
inline int ConstPointerToArray< LVecBase3i >::get_node_ref_count(void) const;

954 5 count 0 4 1587 40 ConstPointerToArray< LVecBase3i >::count 0 1 137 0
92
inline unsigned long int ConstPointerToArray< LVecBase3i >::count(LVecBase3i const &) const;

955 10 __reduce__ 0 4 1587 45 ConstPointerToArray< LVecBase3i >::__reduce__ 0 1 138 0
78
PyObject *ConstPointerToArray< LVecBase3i >::__reduce__(PyObject *self) const;

956 13 __getbuffer__ 0 4 1587 48 ConstPointerToArray< LVecBase3i >::__getbuffer__ 0 1 139 0
103
int ConstPointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

957 17 __releasebuffer__ 0 4 1587 52 ConstPointerToArray< LVecBase3i >::__releasebuffer__ 0 1 140 0
97
void ConstPointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

958 20 ~ConstPointerToArray 0 516 1587 55 ConstPointerToArray< LVecBase3i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3i >::~ConstPointerToArray(void);

959 5 clear 0 4 1592 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 161 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

960 6 output 0 4 1592 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 162 0
100
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(std::ostream &out) const;

961 19 ~PointerToArrayBase 0 516 1591 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

962 11 operator == 0 4 1591 53 PointerToArrayBase< UnalignedLMatrix4d >::operator == 0 1 159 64
// These are implemented in PointerToVoid, but expose them here.
127
inline bool PointerToArrayBase< UnalignedLMatrix4d >::operator ==(PointerToArrayBase< UnalignedLMatrix4d > const &other) const;

963 11 operator != 0 4 1591 53 PointerToArrayBase< UnalignedLMatrix4d >::operator != 0 1 160 0
127
inline bool PointerToArrayBase< UnalignedLMatrix4d >::operator !=(PointerToArrayBase< UnalignedLMatrix4d > const &other) const;

964 19 ConstPointerToArray 0 260 1590 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 2 145 146 0
246
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);

965 5 clear 0 4 1590 48 ConstPointerToArray< UnalignedLMatrix4d >::clear 0 1 147 0
67
inline void ConstPointerToArray< UnalignedLMatrix4d >::clear(void);

966 4 size 0 4 1590 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 148 0
85
inline unsigned long int ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

967 11 get_element 0 4 1590 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 149 0
115
inline UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned long int n) const;

968 11 __getitem__ 0 4 1590 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 150 0
108
UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long int n) const;

969 8 get_data 0 4 1590 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 151 0
74
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

970 11 get_subdata 0 4 1590 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 152 0
117
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long int n, unsigned long int count) const;

971 13 get_ref_count 0 4 1590 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 153 0
80
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

972 18 get_node_ref_count 0 4 1590 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 154 0
85
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

973 5 count 0 4 1590 48 ConstPointerToArray< UnalignedLMatrix4d >::count 0 1 155 0
108
inline unsigned long int ConstPointerToArray< UnalignedLMatrix4d >::count(UnalignedLMatrix4d const &) const;

974 10 __reduce__ 0 4 1590 53 ConstPointerToArray< UnalignedLMatrix4d >::__reduce__ 0 1 156 0
86
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::__reduce__(PyObject *self) const;

975 13 __getbuffer__ 0 4 1590 56 ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 157 0
111
int ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

976 17 __releasebuffer__ 0 4 1590 60 ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 158 0
105
void ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

977 20 ~ConstPointerToArray 0 516 1590 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

978 5 clear 0 4 1595 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 179 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

979 6 output 0 4 1595 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 180 0
100
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(std::ostream &out) const;

980 19 ~PointerToArrayBase 0 516 1594 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

981 11 operator == 0 4 1594 53 PointerToArrayBase< UnalignedLMatrix4f >::operator == 0 1 177 64
// These are implemented in PointerToVoid, but expose them here.
127
inline bool PointerToArrayBase< UnalignedLMatrix4f >::operator ==(PointerToArrayBase< UnalignedLMatrix4f > const &other) const;

982 11 operator != 0 4 1594 53 PointerToArrayBase< UnalignedLMatrix4f >::operator != 0 1 178 0
127
inline bool PointerToArrayBase< UnalignedLMatrix4f >::operator !=(PointerToArrayBase< UnalignedLMatrix4f > const &other) const;

983 19 ConstPointerToArray 0 260 1593 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 2 163 164 0
246
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);

984 5 clear 0 4 1593 48 ConstPointerToArray< UnalignedLMatrix4f >::clear 0 1 165 0
67
inline void ConstPointerToArray< UnalignedLMatrix4f >::clear(void);

985 4 size 0 4 1593 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 166 0
85
inline unsigned long int ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

986 11 get_element 0 4 1593 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 167 0
115
inline UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned long int n) const;

987 11 __getitem__ 0 4 1593 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 168 0
108
UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long int n) const;

988 8 get_data 0 4 1593 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 169 0
74
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

989 11 get_subdata 0 4 1593 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 170 0
117
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long int n, unsigned long int count) const;

990 13 get_ref_count 0 4 1593 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 171 0
80
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

991 18 get_node_ref_count 0 4 1593 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 172 0
85
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

992 5 count 0 4 1593 48 ConstPointerToArray< UnalignedLMatrix4f >::count 0 1 173 0
108
inline unsigned long int ConstPointerToArray< UnalignedLMatrix4f >::count(UnalignedLMatrix4f const &) const;

993 10 __reduce__ 0 4 1593 53 ConstPointerToArray< UnalignedLMatrix4f >::__reduce__ 0 1 174 0
86
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::__reduce__(PyObject *self) const;

994 13 __getbuffer__ 0 4 1593 56 ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 175 0
111
int ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

995 17 __releasebuffer__ 0 4 1593 60 ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 176 0
105
void ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

996 20 ~ConstPointerToArray 0 516 1593 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

997 5 clear 0 4 1598 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 197 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

998 6 output 0 4 1598 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 198 0
101
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(std::ostream &out) const;

999 19 ~PointerToArrayBase 0 516 1597 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

1000 11 operator == 0 4 1597 54 PointerToArrayBase< UnalignedLVecBase4d >::operator == 0 1 195 64
// These are implemented in PointerToVoid, but expose them here.
129
inline bool PointerToArrayBase< UnalignedLVecBase4d >::operator ==(PointerToArrayBase< UnalignedLVecBase4d > const &other) const;

1001 11 operator != 0 4 1597 54 PointerToArrayBase< UnalignedLVecBase4d >::operator != 0 1 196 0
129
inline bool PointerToArrayBase< UnalignedLVecBase4d >::operator !=(PointerToArrayBase< UnalignedLVecBase4d > const &other) const;

1002 19 ConstPointerToArray 0 260 1596 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 2 181 182 0
250
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);

1003 5 clear 0 4 1596 49 ConstPointerToArray< UnalignedLVecBase4d >::clear 0 1 183 0
68
inline void ConstPointerToArray< UnalignedLVecBase4d >::clear(void);

1004 4 size 0 4 1596 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 184 0
86
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

1005 11 get_element 0 4 1596 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 185 0
117
inline UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned long int n) const;

1006 11 __getitem__ 0 4 1596 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 186 0
110
UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long int n) const;

1007 8 get_data 0 4 1596 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 187 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1008 11 get_subdata 0 4 1596 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 188 0
118
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long int n, unsigned long int count) const;

1009 13 get_ref_count 0 4 1596 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 189 0
81
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1010 18 get_node_ref_count 0 4 1596 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 190 0
86
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1011 5 count 0 4 1596 49 ConstPointerToArray< UnalignedLVecBase4d >::count 0 1 191 0
110
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4d >::count(UnalignedLVecBase4d const &) const;

1012 10 __reduce__ 0 4 1596 54 ConstPointerToArray< UnalignedLVecBase4d >::__reduce__ 0 1 192 0
87
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::__reduce__(PyObject *self) const;

1013 13 __getbuffer__ 0 4 1596 57 ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 193 0
112
int ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1014 17 __releasebuffer__ 0 4 1596 61 ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 194 0
106
void ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1015 20 ~ConstPointerToArray 0 516 1596 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

1016 5 clear 0 4 1601 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 215 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

1017 6 output 0 4 1601 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 216 0
101
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(std::ostream &out) const;

1018 19 ~PointerToArrayBase 0 516 1600 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

1019 11 operator == 0 4 1600 54 PointerToArrayBase< UnalignedLVecBase4f >::operator == 0 1 213 64
// These are implemented in PointerToVoid, but expose them here.
129
inline bool PointerToArrayBase< UnalignedLVecBase4f >::operator ==(PointerToArrayBase< UnalignedLVecBase4f > const &other) const;

1020 11 operator != 0 4 1600 54 PointerToArrayBase< UnalignedLVecBase4f >::operator != 0 1 214 0
129
inline bool PointerToArrayBase< UnalignedLVecBase4f >::operator !=(PointerToArrayBase< UnalignedLVecBase4f > const &other) const;

1021 19 ConstPointerToArray 0 260 1599 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 2 199 200 0
250
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);

1022 5 clear 0 4 1599 49 ConstPointerToArray< UnalignedLVecBase4f >::clear 0 1 201 0
68
inline void ConstPointerToArray< UnalignedLVecBase4f >::clear(void);

1023 4 size 0 4 1599 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 202 0
86
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

1024 11 get_element 0 4 1599 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 203 0
117
inline UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned long int n) const;

1025 11 __getitem__ 0 4 1599 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 204 0
110
UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long int n) const;

1026 8 get_data 0 4 1599 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 205 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1027 11 get_subdata 0 4 1599 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 206 0
118
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long int n, unsigned long int count) const;

1028 13 get_ref_count 0 4 1599 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 207 0
81
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1029 18 get_node_ref_count 0 4 1599 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 208 0
86
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1030 5 count 0 4 1599 49 ConstPointerToArray< UnalignedLVecBase4f >::count 0 1 209 0
110
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4f >::count(UnalignedLVecBase4f const &) const;

1031 10 __reduce__ 0 4 1599 54 ConstPointerToArray< UnalignedLVecBase4f >::__reduce__ 0 1 210 0
87
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::__reduce__(PyObject *self) const;

1032 13 __getbuffer__ 0 4 1599 57 ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 211 0
112
int ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1033 17 __releasebuffer__ 0 4 1599 61 ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 212 0
106
void ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1034 20 ~ConstPointerToArray 0 516 1599 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

1035 5 clear 0 4 1604 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear 0 1 233 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear(void);

1036 6 output 0 4 1604 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output 0 1 234 0
101
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output(std::ostream &out) const;

1037 19 ~PointerToArrayBase 0 516 1603 62 PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase(void);

1038 11 operator == 0 4 1603 54 PointerToArrayBase< UnalignedLVecBase4i >::operator == 0 1 231 64
// These are implemented in PointerToVoid, but expose them here.
129
inline bool PointerToArrayBase< UnalignedLVecBase4i >::operator ==(PointerToArrayBase< UnalignedLVecBase4i > const &other) const;

1039 11 operator != 0 4 1603 54 PointerToArrayBase< UnalignedLVecBase4i >::operator != 0 1 232 0
129
inline bool PointerToArrayBase< UnalignedLVecBase4i >::operator !=(PointerToArrayBase< UnalignedLVecBase4i > const &other) const;

1040 19 ConstPointerToArray 0 260 1602 63 ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray 0 2 217 218 0
250
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4i > const &copy);

1041 5 clear 0 4 1602 49 ConstPointerToArray< UnalignedLVecBase4i >::clear 0 1 219 0
68
inline void ConstPointerToArray< UnalignedLVecBase4i >::clear(void);

1042 4 size 0 4 1602 48 ConstPointerToArray< UnalignedLVecBase4i >::size 0 1 220 0
86
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4i >::size(void) const;

1043 11 get_element 0 4 1602 55 ConstPointerToArray< UnalignedLVecBase4i >::get_element 0 1 221 0
117
inline UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::get_element(unsigned long int n) const;

1044 11 __getitem__ 0 4 1602 55 ConstPointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 222 0
110
UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long int n) const;

1045 8 get_data 0 4 1602 52 ConstPointerToArray< UnalignedLVecBase4i >::get_data 0 1 223 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1046 11 get_subdata 0 4 1602 55 ConstPointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 224 0
118
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long int n, unsigned long int count) const;

1047 13 get_ref_count 0 4 1602 57 ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 225 0
81
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1048 18 get_node_ref_count 0 4 1602 62 ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 226 0
86
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1049 5 count 0 4 1602 49 ConstPointerToArray< UnalignedLVecBase4i >::count 0 1 227 0
110
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4i >::count(UnalignedLVecBase4i const &) const;

1050 10 __reduce__ 0 4 1602 54 ConstPointerToArray< UnalignedLVecBase4i >::__reduce__ 0 1 228 0
87
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::__reduce__(PyObject *self) const;

1051 13 __getbuffer__ 0 4 1602 57 ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 229 0
112
int ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1052 17 __releasebuffer__ 0 4 1602 61 ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 230 0
106
void ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1053 20 ~ConstPointerToArray 0 516 1602 64 ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray(void);

1054 14 PointerToArray 0 260 1605 43 PointerToArray< LMatrix3d >::PointerToArray 0 3 235 236 237 0
294
inline PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LMatrix3d const *)(0))));
inline PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
PointerToArray< LMatrix3d >::PointerToArray(PyObject *self, PyObject *source);

1055 11 empty_array 0 4 1605 40 PointerToArray< LMatrix3d >::empty_array 0 1 238 0
175
static inline PointerToArray< LMatrix3d > PointerToArray< LMatrix3d >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((LMatrix3d const *)(0))));

1056 5 clear 0 4 1605 34 PointerToArray< LMatrix3d >::clear 0 1 239 0
53
inline void PointerToArray< LMatrix3d >::clear(void);

1057 4 size 0 4 1605 33 PointerToArray< LMatrix3d >::size 0 1 240 0
71
inline unsigned long int PointerToArray< LMatrix3d >::size(void) const;

1058 9 push_back 0 4 1605 38 PointerToArray< LMatrix3d >::push_back 0 1 241 0
71
inline void PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

1059 8 pop_back 0 4 1605 37 PointerToArray< LMatrix3d >::pop_back 0 1 242 0
56
inline void PointerToArray< LMatrix3d >::pop_back(void);

1060 11 get_element 0 4 1605 40 PointerToArray< LMatrix3d >::get_element 0 1 243 0
92
inline LMatrix3d const &PointerToArray< LMatrix3d >::get_element(unsigned long int n) const;

1061 11 set_element 0 4 1605 40 PointerToArray< LMatrix3d >::set_element 0 1 244 0
98
inline void PointerToArray< LMatrix3d >::set_element(unsigned long int n, LMatrix3d const &value);

1062 11 __getitem__ 0 4 1605 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 245 0
85
LMatrix3d const &PointerToArray< LMatrix3d >::__getitem__(unsigned long int n) const;

1063 11 __setitem__ 0 4 1605 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 246 0
91
void PointerToArray< LMatrix3d >::__setitem__(unsigned long int n, LMatrix3d const &value);

1064 8 get_data 0 4 1605 37 PointerToArray< LMatrix3d >::get_data 0 1 247 0
60
PyObject *PointerToArray< LMatrix3d >::get_data(void) const;

1065 8 set_data 0 4 1605 37 PointerToArray< LMatrix3d >::set_data 0 1 248 0
59
void PointerToArray< LMatrix3d >::set_data(PyObject *data);

1066 11 get_subdata 0 4 1605 40 PointerToArray< LMatrix3d >::get_subdata 0 1 249 0
103
PyObject *PointerToArray< LMatrix3d >::get_subdata(unsigned long int n, unsigned long int count) const;

1067 11 set_subdata 0 4 1605 40 PointerToArray< LMatrix3d >::set_subdata 0 1 250 0
138
inline void PointerToArray< LMatrix3d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1068 13 get_ref_count 0 4 1605 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 251 0
66
inline int PointerToArray< LMatrix3d >::get_ref_count(void) const;

1069 18 get_node_ref_count 0 4 1605 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 252 0
71
inline int PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

1070 5 count 0 4 1605 34 PointerToArray< LMatrix3d >::count 0 1 253 0
85
inline unsigned long int PointerToArray< LMatrix3d >::count(LMatrix3d const &) const;

1071 10 __reduce__ 0 4 1605 39 PointerToArray< LMatrix3d >::__reduce__ 0 1 254 0
72
PyObject *PointerToArray< LMatrix3d >::__reduce__(PyObject *self) const;

1072 13 __getbuffer__ 0 4 1605 42 PointerToArray< LMatrix3d >::__getbuffer__ 0 1 255 0
91
int PointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1073 17 __releasebuffer__ 0 4 1605 46 PointerToArray< LMatrix3d >::__releasebuffer__ 0 1 256 0
91
void PointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1074 15 ~PointerToArray 0 516 1605 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3d >::~PointerToArray(void);

1075 14 PointerToArray 0 260 1606 43 PointerToArray< LMatrix3f >::PointerToArray 0 3 257 258 259 0
294
inline PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LMatrix3f const *)(0))));
inline PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *source);

1076 11 empty_array 0 4 1606 40 PointerToArray< LMatrix3f >::empty_array 0 1 260 0
175
static inline PointerToArray< LMatrix3f > PointerToArray< LMatrix3f >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((LMatrix3f const *)(0))));

1077 5 clear 0 4 1606 34 PointerToArray< LMatrix3f >::clear 0 1 261 0
53
inline void PointerToArray< LMatrix3f >::clear(void);

1078 4 size 0 4 1606 33 PointerToArray< LMatrix3f >::size 0 1 262 0
71
inline unsigned long int PointerToArray< LMatrix3f >::size(void) const;

1079 9 push_back 0 4 1606 38 PointerToArray< LMatrix3f >::push_back 0 1 263 0
71
inline void PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

1080 8 pop_back 0 4 1606 37 PointerToArray< LMatrix3f >::pop_back 0 1 264 0
56
inline void PointerToArray< LMatrix3f >::pop_back(void);

1081 11 get_element 0 4 1606 40 PointerToArray< LMatrix3f >::get_element 0 1 265 0
92
inline LMatrix3f const &PointerToArray< LMatrix3f >::get_element(unsigned long int n) const;

1082 11 set_element 0 4 1606 40 PointerToArray< LMatrix3f >::set_element 0 1 266 0
98
inline void PointerToArray< LMatrix3f >::set_element(unsigned long int n, LMatrix3f const &value);

1083 11 __getitem__ 0 4 1606 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 267 0
85
LMatrix3f const &PointerToArray< LMatrix3f >::__getitem__(unsigned long int n) const;

1084 11 __setitem__ 0 4 1606 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 268 0
91
void PointerToArray< LMatrix3f >::__setitem__(unsigned long int n, LMatrix3f const &value);

1085 8 get_data 0 4 1606 37 PointerToArray< LMatrix3f >::get_data 0 1 269 0
60
PyObject *PointerToArray< LMatrix3f >::get_data(void) const;

1086 8 set_data 0 4 1606 37 PointerToArray< LMatrix3f >::set_data 0 1 270 0
59
void PointerToArray< LMatrix3f >::set_data(PyObject *data);

1087 11 get_subdata 0 4 1606 40 PointerToArray< LMatrix3f >::get_subdata 0 1 271 0
103
PyObject *PointerToArray< LMatrix3f >::get_subdata(unsigned long int n, unsigned long int count) const;

1088 11 set_subdata 0 4 1606 40 PointerToArray< LMatrix3f >::set_subdata 0 1 272 0
138
inline void PointerToArray< LMatrix3f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1089 13 get_ref_count 0 4 1606 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 273 0
66
inline int PointerToArray< LMatrix3f >::get_ref_count(void) const;

1090 18 get_node_ref_count 0 4 1606 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 274 0
71
inline int PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

1091 5 count 0 4 1606 34 PointerToArray< LMatrix3f >::count 0 1 275 0
85
inline unsigned long int PointerToArray< LMatrix3f >::count(LMatrix3f const &) const;

1092 10 __reduce__ 0 4 1606 39 PointerToArray< LMatrix3f >::__reduce__ 0 1 276 0
72
PyObject *PointerToArray< LMatrix3f >::__reduce__(PyObject *self) const;

1093 13 __getbuffer__ 0 4 1606 42 PointerToArray< LMatrix3f >::__getbuffer__ 0 1 277 0
91
int PointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1094 17 __releasebuffer__ 0 4 1606 46 PointerToArray< LMatrix3f >::__releasebuffer__ 0 1 278 0
91
void PointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1095 15 ~PointerToArray 0 516 1606 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3f >::~PointerToArray(void);

1096 14 PointerToArray 0 260 1607 44 PointerToArray< LVecBase2d >::PointerToArray 0 3 279 280 281 0
299
inline PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2d const *)(0))));
inline PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
PointerToArray< LVecBase2d >::PointerToArray(PyObject *self, PyObject *source);

1097 11 empty_array 0 4 1607 41 PointerToArray< LVecBase2d >::empty_array 0 1 282 0
178
static inline PointerToArray< LVecBase2d > PointerToArray< LVecBase2d >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2d const *)(0))));

1098 5 clear 0 4 1607 35 PointerToArray< LVecBase2d >::clear 0 1 283 0
54
inline void PointerToArray< LVecBase2d >::clear(void);

1099 4 size 0 4 1607 34 PointerToArray< LVecBase2d >::size 0 1 284 0
72
inline unsigned long int PointerToArray< LVecBase2d >::size(void) const;

1100 9 push_back 0 4 1607 39 PointerToArray< LVecBase2d >::push_back 0 1 285 0
73
inline void PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

1101 8 pop_back 0 4 1607 38 PointerToArray< LVecBase2d >::pop_back 0 1 286 0
57
inline void PointerToArray< LVecBase2d >::pop_back(void);

1102 11 get_element 0 4 1607 41 PointerToArray< LVecBase2d >::get_element 0 1 287 0
94
inline LVecBase2d const &PointerToArray< LVecBase2d >::get_element(unsigned long int n) const;

1103 11 set_element 0 4 1607 41 PointerToArray< LVecBase2d >::set_element 0 1 288 0
100
inline void PointerToArray< LVecBase2d >::set_element(unsigned long int n, LVecBase2d const &value);

1104 11 __getitem__ 0 4 1607 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 289 0
87
LVecBase2d const &PointerToArray< LVecBase2d >::__getitem__(unsigned long int n) const;

1105 11 __setitem__ 0 4 1607 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 290 0
93
void PointerToArray< LVecBase2d >::__setitem__(unsigned long int n, LVecBase2d const &value);

1106 8 get_data 0 4 1607 38 PointerToArray< LVecBase2d >::get_data 0 1 291 0
61
PyObject *PointerToArray< LVecBase2d >::get_data(void) const;

1107 8 set_data 0 4 1607 38 PointerToArray< LVecBase2d >::set_data 0 1 292 0
60
void PointerToArray< LVecBase2d >::set_data(PyObject *data);

1108 11 get_subdata 0 4 1607 41 PointerToArray< LVecBase2d >::get_subdata 0 1 293 0
104
PyObject *PointerToArray< LVecBase2d >::get_subdata(unsigned long int n, unsigned long int count) const;

1109 11 set_subdata 0 4 1607 41 PointerToArray< LVecBase2d >::set_subdata 0 1 294 0
139
inline void PointerToArray< LVecBase2d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1110 13 get_ref_count 0 4 1607 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 295 0
67
inline int PointerToArray< LVecBase2d >::get_ref_count(void) const;

1111 18 get_node_ref_count 0 4 1607 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 296 0
72
inline int PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

1112 5 count 0 4 1607 35 PointerToArray< LVecBase2d >::count 0 1 297 0
87
inline unsigned long int PointerToArray< LVecBase2d >::count(LVecBase2d const &) const;

1113 10 __reduce__ 0 4 1607 40 PointerToArray< LVecBase2d >::__reduce__ 0 1 298 0
73
PyObject *PointerToArray< LVecBase2d >::__reduce__(PyObject *self) const;

1114 13 __getbuffer__ 0 4 1607 43 PointerToArray< LVecBase2d >::__getbuffer__ 0 1 299 0
92
int PointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1115 17 __releasebuffer__ 0 4 1607 47 PointerToArray< LVecBase2d >::__releasebuffer__ 0 1 300 0
92
void PointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1116 15 ~PointerToArray 0 516 1607 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2d >::~PointerToArray(void);

1117 14 PointerToArray 0 260 1608 44 PointerToArray< LVecBase2f >::PointerToArray 0 3 301 302 303 0
299
inline PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2f const *)(0))));
inline PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *source);

1118 11 empty_array 0 4 1608 41 PointerToArray< LVecBase2f >::empty_array 0 1 304 0
178
static inline PointerToArray< LVecBase2f > PointerToArray< LVecBase2f >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2f const *)(0))));

1119 5 clear 0 4 1608 35 PointerToArray< LVecBase2f >::clear 0 1 305 0
54
inline void PointerToArray< LVecBase2f >::clear(void);

1120 4 size 0 4 1608 34 PointerToArray< LVecBase2f >::size 0 1 306 0
72
inline unsigned long int PointerToArray< LVecBase2f >::size(void) const;

1121 9 push_back 0 4 1608 39 PointerToArray< LVecBase2f >::push_back 0 1 307 0
73
inline void PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

1122 8 pop_back 0 4 1608 38 PointerToArray< LVecBase2f >::pop_back 0 1 308 0
57
inline void PointerToArray< LVecBase2f >::pop_back(void);

1123 11 get_element 0 4 1608 41 PointerToArray< LVecBase2f >::get_element 0 1 309 0
94
inline LVecBase2f const &PointerToArray< LVecBase2f >::get_element(unsigned long int n) const;

1124 11 set_element 0 4 1608 41 PointerToArray< LVecBase2f >::set_element 0 1 310 0
100
inline void PointerToArray< LVecBase2f >::set_element(unsigned long int n, LVecBase2f const &value);

1125 11 __getitem__ 0 4 1608 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 311 0
87
LVecBase2f const &PointerToArray< LVecBase2f >::__getitem__(unsigned long int n) const;

1126 11 __setitem__ 0 4 1608 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 312 0
93
void PointerToArray< LVecBase2f >::__setitem__(unsigned long int n, LVecBase2f const &value);

1127 8 get_data 0 4 1608 38 PointerToArray< LVecBase2f >::get_data 0 1 313 0
61
PyObject *PointerToArray< LVecBase2f >::get_data(void) const;

1128 8 set_data 0 4 1608 38 PointerToArray< LVecBase2f >::set_data 0 1 314 0
60
void PointerToArray< LVecBase2f >::set_data(PyObject *data);

1129 11 get_subdata 0 4 1608 41 PointerToArray< LVecBase2f >::get_subdata 0 1 315 0
104
PyObject *PointerToArray< LVecBase2f >::get_subdata(unsigned long int n, unsigned long int count) const;

1130 11 set_subdata 0 4 1608 41 PointerToArray< LVecBase2f >::set_subdata 0 1 316 0
139
inline void PointerToArray< LVecBase2f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1131 13 get_ref_count 0 4 1608 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 317 0
67
inline int PointerToArray< LVecBase2f >::get_ref_count(void) const;

1132 18 get_node_ref_count 0 4 1608 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 318 0
72
inline int PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

1133 5 count 0 4 1608 35 PointerToArray< LVecBase2f >::count 0 1 319 0
87
inline unsigned long int PointerToArray< LVecBase2f >::count(LVecBase2f const &) const;

1134 10 __reduce__ 0 4 1608 40 PointerToArray< LVecBase2f >::__reduce__ 0 1 320 0
73
PyObject *PointerToArray< LVecBase2f >::__reduce__(PyObject *self) const;

1135 13 __getbuffer__ 0 4 1608 43 PointerToArray< LVecBase2f >::__getbuffer__ 0 1 321 0
92
int PointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1136 17 __releasebuffer__ 0 4 1608 47 PointerToArray< LVecBase2f >::__releasebuffer__ 0 1 322 0
92
void PointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1137 15 ~PointerToArray 0 516 1608 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2f >::~PointerToArray(void);

1138 14 PointerToArray 0 260 1609 44 PointerToArray< LVecBase2i >::PointerToArray 0 3 323 324 325 0
299
inline PointerToArray< LVecBase2i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2i const *)(0))));
inline PointerToArray< LVecBase2i >::PointerToArray(PointerToArray< LVecBase2i > const &copy);
PointerToArray< LVecBase2i >::PointerToArray(PyObject *self, PyObject *source);

1139 11 empty_array 0 4 1609 41 PointerToArray< LVecBase2i >::empty_array 0 1 326 0
178
static inline PointerToArray< LVecBase2i > PointerToArray< LVecBase2i >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2i const *)(0))));

1140 5 clear 0 4 1609 35 PointerToArray< LVecBase2i >::clear 0 1 327 0
54
inline void PointerToArray< LVecBase2i >::clear(void);

1141 4 size 0 4 1609 34 PointerToArray< LVecBase2i >::size 0 1 328 0
72
inline unsigned long int PointerToArray< LVecBase2i >::size(void) const;

1142 9 push_back 0 4 1609 39 PointerToArray< LVecBase2i >::push_back 0 1 329 0
73
inline void PointerToArray< LVecBase2i >::push_back(LVecBase2i const &x);

1143 8 pop_back 0 4 1609 38 PointerToArray< LVecBase2i >::pop_back 0 1 330 0
57
inline void PointerToArray< LVecBase2i >::pop_back(void);

1144 11 get_element 0 4 1609 41 PointerToArray< LVecBase2i >::get_element 0 1 331 0
94
inline LVecBase2i const &PointerToArray< LVecBase2i >::get_element(unsigned long int n) const;

1145 11 set_element 0 4 1609 41 PointerToArray< LVecBase2i >::set_element 0 1 332 0
100
inline void PointerToArray< LVecBase2i >::set_element(unsigned long int n, LVecBase2i const &value);

1146 11 __getitem__ 0 4 1609 41 PointerToArray< LVecBase2i >::__getitem__ 0 1 333 0
87
LVecBase2i const &PointerToArray< LVecBase2i >::__getitem__(unsigned long int n) const;

1147 11 __setitem__ 0 4 1609 41 PointerToArray< LVecBase2i >::__setitem__ 0 1 334 0
93
void PointerToArray< LVecBase2i >::__setitem__(unsigned long int n, LVecBase2i const &value);

1148 8 get_data 0 4 1609 38 PointerToArray< LVecBase2i >::get_data 0 1 335 0
61
PyObject *PointerToArray< LVecBase2i >::get_data(void) const;

1149 8 set_data 0 4 1609 38 PointerToArray< LVecBase2i >::set_data 0 1 336 0
60
void PointerToArray< LVecBase2i >::set_data(PyObject *data);

1150 11 get_subdata 0 4 1609 41 PointerToArray< LVecBase2i >::get_subdata 0 1 337 0
104
PyObject *PointerToArray< LVecBase2i >::get_subdata(unsigned long int n, unsigned long int count) const;

1151 11 set_subdata 0 4 1609 41 PointerToArray< LVecBase2i >::set_subdata 0 1 338 0
139
inline void PointerToArray< LVecBase2i >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1152 13 get_ref_count 0 4 1609 43 PointerToArray< LVecBase2i >::get_ref_count 0 1 339 0
67
inline int PointerToArray< LVecBase2i >::get_ref_count(void) const;

1153 18 get_node_ref_count 0 4 1609 48 PointerToArray< LVecBase2i >::get_node_ref_count 0 1 340 0
72
inline int PointerToArray< LVecBase2i >::get_node_ref_count(void) const;

1154 5 count 0 4 1609 35 PointerToArray< LVecBase2i >::count 0 1 341 0
87
inline unsigned long int PointerToArray< LVecBase2i >::count(LVecBase2i const &) const;

1155 10 __reduce__ 0 4 1609 40 PointerToArray< LVecBase2i >::__reduce__ 0 1 342 0
73
PyObject *PointerToArray< LVecBase2i >::__reduce__(PyObject *self) const;

1156 13 __getbuffer__ 0 4 1609 43 PointerToArray< LVecBase2i >::__getbuffer__ 0 1 343 0
92
int PointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1157 17 __releasebuffer__ 0 4 1609 47 PointerToArray< LVecBase2i >::__releasebuffer__ 0 1 344 0
92
void PointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1158 15 ~PointerToArray 0 516 1609 45 PointerToArray< LVecBase2i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2i >::~PointerToArray(void);

1159 14 PointerToArray 0 260 1610 44 PointerToArray< LVecBase3d >::PointerToArray 0 3 345 346 347 0
299
inline PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3d const *)(0))));
inline PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
PointerToArray< LVecBase3d >::PointerToArray(PyObject *self, PyObject *source);

1160 11 empty_array 0 4 1610 41 PointerToArray< LVecBase3d >::empty_array 0 1 348 0
178
static inline PointerToArray< LVecBase3d > PointerToArray< LVecBase3d >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3d const *)(0))));

1161 5 clear 0 4 1610 35 PointerToArray< LVecBase3d >::clear 0 1 349 0
54
inline void PointerToArray< LVecBase3d >::clear(void);

1162 4 size 0 4 1610 34 PointerToArray< LVecBase3d >::size 0 1 350 0
72
inline unsigned long int PointerToArray< LVecBase3d >::size(void) const;

1163 9 push_back 0 4 1610 39 PointerToArray< LVecBase3d >::push_back 0 1 351 0
73
inline void PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

1164 8 pop_back 0 4 1610 38 PointerToArray< LVecBase3d >::pop_back 0 1 352 0
57
inline void PointerToArray< LVecBase3d >::pop_back(void);

1165 11 get_element 0 4 1610 41 PointerToArray< LVecBase3d >::get_element 0 1 353 0
94
inline LVecBase3d const &PointerToArray< LVecBase3d >::get_element(unsigned long int n) const;

1166 11 set_element 0 4 1610 41 PointerToArray< LVecBase3d >::set_element 0 1 354 0
100
inline void PointerToArray< LVecBase3d >::set_element(unsigned long int n, LVecBase3d const &value);

1167 11 __getitem__ 0 4 1610 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 355 0
87
LVecBase3d const &PointerToArray< LVecBase3d >::__getitem__(unsigned long int n) const;

1168 11 __setitem__ 0 4 1610 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 356 0
93
void PointerToArray< LVecBase3d >::__setitem__(unsigned long int n, LVecBase3d const &value);

1169 8 get_data 0 4 1610 38 PointerToArray< LVecBase3d >::get_data 0 1 357 0
61
PyObject *PointerToArray< LVecBase3d >::get_data(void) const;

1170 8 set_data 0 4 1610 38 PointerToArray< LVecBase3d >::set_data 0 1 358 0
60
void PointerToArray< LVecBase3d >::set_data(PyObject *data);

1171 11 get_subdata 0 4 1610 41 PointerToArray< LVecBase3d >::get_subdata 0 1 359 0
104
PyObject *PointerToArray< LVecBase3d >::get_subdata(unsigned long int n, unsigned long int count) const;

1172 11 set_subdata 0 4 1610 41 PointerToArray< LVecBase3d >::set_subdata 0 1 360 0
139
inline void PointerToArray< LVecBase3d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1173 13 get_ref_count 0 4 1610 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 361 0
67
inline int PointerToArray< LVecBase3d >::get_ref_count(void) const;

1174 18 get_node_ref_count 0 4 1610 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 362 0
72
inline int PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

1175 5 count 0 4 1610 35 PointerToArray< LVecBase3d >::count 0 1 363 0
87
inline unsigned long int PointerToArray< LVecBase3d >::count(LVecBase3d const &) const;

1176 10 __reduce__ 0 4 1610 40 PointerToArray< LVecBase3d >::__reduce__ 0 1 364 0
73
PyObject *PointerToArray< LVecBase3d >::__reduce__(PyObject *self) const;

1177 13 __getbuffer__ 0 4 1610 43 PointerToArray< LVecBase3d >::__getbuffer__ 0 1 365 0
92
int PointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1178 17 __releasebuffer__ 0 4 1610 47 PointerToArray< LVecBase3d >::__releasebuffer__ 0 1 366 0
92
void PointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1179 15 ~PointerToArray 0 516 1610 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3d >::~PointerToArray(void);

1180 14 PointerToArray 0 260 1611 44 PointerToArray< LVecBase3f >::PointerToArray 0 3 367 368 369 0
299
inline PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3f const *)(0))));
inline PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *source);

1181 11 empty_array 0 4 1611 41 PointerToArray< LVecBase3f >::empty_array 0 1 370 0
178
static inline PointerToArray< LVecBase3f > PointerToArray< LVecBase3f >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3f const *)(0))));

1182 5 clear 0 4 1611 35 PointerToArray< LVecBase3f >::clear 0 1 371 0
54
inline void PointerToArray< LVecBase3f >::clear(void);

1183 4 size 0 4 1611 34 PointerToArray< LVecBase3f >::size 0 1 372 0
72
inline unsigned long int PointerToArray< LVecBase3f >::size(void) const;

1184 9 push_back 0 4 1611 39 PointerToArray< LVecBase3f >::push_back 0 1 373 0
73
inline void PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

1185 8 pop_back 0 4 1611 38 PointerToArray< LVecBase3f >::pop_back 0 1 374 0
57
inline void PointerToArray< LVecBase3f >::pop_back(void);

1186 11 get_element 0 4 1611 41 PointerToArray< LVecBase3f >::get_element 0 1 375 0
94
inline LVecBase3f const &PointerToArray< LVecBase3f >::get_element(unsigned long int n) const;

1187 11 set_element 0 4 1611 41 PointerToArray< LVecBase3f >::set_element 0 1 376 0
100
inline void PointerToArray< LVecBase3f >::set_element(unsigned long int n, LVecBase3f const &value);

1188 11 __getitem__ 0 4 1611 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 377 0
87
LVecBase3f const &PointerToArray< LVecBase3f >::__getitem__(unsigned long int n) const;

1189 11 __setitem__ 0 4 1611 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 378 0
93
void PointerToArray< LVecBase3f >::__setitem__(unsigned long int n, LVecBase3f const &value);

1190 8 get_data 0 4 1611 38 PointerToArray< LVecBase3f >::get_data 0 1 379 0
61
PyObject *PointerToArray< LVecBase3f >::get_data(void) const;

1191 8 set_data 0 4 1611 38 PointerToArray< LVecBase3f >::set_data 0 1 380 0
60
void PointerToArray< LVecBase3f >::set_data(PyObject *data);

1192 11 get_subdata 0 4 1611 41 PointerToArray< LVecBase3f >::get_subdata 0 1 381 0
104
PyObject *PointerToArray< LVecBase3f >::get_subdata(unsigned long int n, unsigned long int count) const;

1193 11 set_subdata 0 4 1611 41 PointerToArray< LVecBase3f >::set_subdata 0 1 382 0
139
inline void PointerToArray< LVecBase3f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1194 13 get_ref_count 0 4 1611 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 383 0
67
inline int PointerToArray< LVecBase3f >::get_ref_count(void) const;

1195 18 get_node_ref_count 0 4 1611 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 384 0
72
inline int PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

1196 5 count 0 4 1611 35 PointerToArray< LVecBase3f >::count 0 1 385 0
87
inline unsigned long int PointerToArray< LVecBase3f >::count(LVecBase3f const &) const;

1197 10 __reduce__ 0 4 1611 40 PointerToArray< LVecBase3f >::__reduce__ 0 1 386 0
73
PyObject *PointerToArray< LVecBase3f >::__reduce__(PyObject *self) const;

1198 13 __getbuffer__ 0 4 1611 43 PointerToArray< LVecBase3f >::__getbuffer__ 0 1 387 0
92
int PointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1199 17 __releasebuffer__ 0 4 1611 47 PointerToArray< LVecBase3f >::__releasebuffer__ 0 1 388 0
92
void PointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1200 15 ~PointerToArray 0 516 1611 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3f >::~PointerToArray(void);

1201 14 PointerToArray 0 260 1612 44 PointerToArray< LVecBase3i >::PointerToArray 0 3 389 390 391 0
299
inline PointerToArray< LVecBase3i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3i const *)(0))));
inline PointerToArray< LVecBase3i >::PointerToArray(PointerToArray< LVecBase3i > const &copy);
PointerToArray< LVecBase3i >::PointerToArray(PyObject *self, PyObject *source);

1202 11 empty_array 0 4 1612 41 PointerToArray< LVecBase3i >::empty_array 0 1 392 0
178
static inline PointerToArray< LVecBase3i > PointerToArray< LVecBase3i >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3i const *)(0))));

1203 5 clear 0 4 1612 35 PointerToArray< LVecBase3i >::clear 0 1 393 0
54
inline void PointerToArray< LVecBase3i >::clear(void);

1204 4 size 0 4 1612 34 PointerToArray< LVecBase3i >::size 0 1 394 0
72
inline unsigned long int PointerToArray< LVecBase3i >::size(void) const;

1205 9 push_back 0 4 1612 39 PointerToArray< LVecBase3i >::push_back 0 1 395 0
73
inline void PointerToArray< LVecBase3i >::push_back(LVecBase3i const &x);

1206 8 pop_back 0 4 1612 38 PointerToArray< LVecBase3i >::pop_back 0 1 396 0
57
inline void PointerToArray< LVecBase3i >::pop_back(void);

1207 11 get_element 0 4 1612 41 PointerToArray< LVecBase3i >::get_element 0 1 397 0
94
inline LVecBase3i const &PointerToArray< LVecBase3i >::get_element(unsigned long int n) const;

1208 11 set_element 0 4 1612 41 PointerToArray< LVecBase3i >::set_element 0 1 398 0
100
inline void PointerToArray< LVecBase3i >::set_element(unsigned long int n, LVecBase3i const &value);

1209 11 __getitem__ 0 4 1612 41 PointerToArray< LVecBase3i >::__getitem__ 0 1 399 0
87
LVecBase3i const &PointerToArray< LVecBase3i >::__getitem__(unsigned long int n) const;

1210 11 __setitem__ 0 4 1612 41 PointerToArray< LVecBase3i >::__setitem__ 0 1 400 0
93
void PointerToArray< LVecBase3i >::__setitem__(unsigned long int n, LVecBase3i const &value);

1211 8 get_data 0 4 1612 38 PointerToArray< LVecBase3i >::get_data 0 1 401 0
61
PyObject *PointerToArray< LVecBase3i >::get_data(void) const;

1212 8 set_data 0 4 1612 38 PointerToArray< LVecBase3i >::set_data 0 1 402 0
60
void PointerToArray< LVecBase3i >::set_data(PyObject *data);

1213 11 get_subdata 0 4 1612 41 PointerToArray< LVecBase3i >::get_subdata 0 1 403 0
104
PyObject *PointerToArray< LVecBase3i >::get_subdata(unsigned long int n, unsigned long int count) const;

1214 11 set_subdata 0 4 1612 41 PointerToArray< LVecBase3i >::set_subdata 0 1 404 0
139
inline void PointerToArray< LVecBase3i >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1215 13 get_ref_count 0 4 1612 43 PointerToArray< LVecBase3i >::get_ref_count 0 1 405 0
67
inline int PointerToArray< LVecBase3i >::get_ref_count(void) const;

1216 18 get_node_ref_count 0 4 1612 48 PointerToArray< LVecBase3i >::get_node_ref_count 0 1 406 0
72
inline int PointerToArray< LVecBase3i >::get_node_ref_count(void) const;

1217 5 count 0 4 1612 35 PointerToArray< LVecBase3i >::count 0 1 407 0
87
inline unsigned long int PointerToArray< LVecBase3i >::count(LVecBase3i const &) const;

1218 10 __reduce__ 0 4 1612 40 PointerToArray< LVecBase3i >::__reduce__ 0 1 408 0
73
PyObject *PointerToArray< LVecBase3i >::__reduce__(PyObject *self) const;

1219 13 __getbuffer__ 0 4 1612 43 PointerToArray< LVecBase3i >::__getbuffer__ 0 1 409 0
92
int PointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1220 17 __releasebuffer__ 0 4 1612 47 PointerToArray< LVecBase3i >::__releasebuffer__ 0 1 410 0
92
void PointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1221 15 ~PointerToArray 0 516 1612 45 PointerToArray< LVecBase3i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3i >::~PointerToArray(void);

1222 14 PointerToArray 0 260 1613 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 3 411 412 413 0
339
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4d const *)(0))));
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
PointerToArray< UnalignedLMatrix4d >::PointerToArray(PyObject *self, PyObject *source);

1223 11 empty_array 0 4 1613 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 1 414 0
202
static inline PointerToArray< UnalignedLMatrix4d > PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4d const *)(0))));

1224 5 clear 0 4 1613 43 PointerToArray< UnalignedLMatrix4d >::clear 0 1 415 0
62
inline void PointerToArray< UnalignedLMatrix4d >::clear(void);

1225 4 size 0 4 1613 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 416 0
80
inline unsigned long int PointerToArray< UnalignedLMatrix4d >::size(void) const;

1226 9 push_back 0 4 1613 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 417 0
89
inline void PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

1227 8 pop_back 0 4 1613 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 418 0
65
inline void PointerToArray< UnalignedLMatrix4d >::pop_back(void);

1228 11 get_element 0 4 1613 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 419 0
110
inline UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::get_element(unsigned long int n) const;

1229 11 set_element 0 4 1613 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 420 0
116
inline void PointerToArray< UnalignedLMatrix4d >::set_element(unsigned long int n, UnalignedLMatrix4d const &value);

1230 11 __getitem__ 0 4 1613 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 421 0
103
UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long int n) const;

1231 11 __setitem__ 0 4 1613 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 422 0
109
void PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned long int n, UnalignedLMatrix4d const &value);

1232 8 get_data 0 4 1613 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 423 0
69
PyObject *PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

1233 8 set_data 0 4 1613 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 424 0
68
void PointerToArray< UnalignedLMatrix4d >::set_data(PyObject *data);

1234 11 get_subdata 0 4 1613 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 425 0
112
PyObject *PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long int n, unsigned long int count) const;

1235 11 set_subdata 0 4 1613 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 426 0
147
inline void PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1236 13 get_ref_count 0 4 1613 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 427 0
75
inline int PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

1237 18 get_node_ref_count 0 4 1613 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 428 0
80
inline int PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

1238 5 count 0 4 1613 43 PointerToArray< UnalignedLMatrix4d >::count 0 1 429 0
103
inline unsigned long int PointerToArray< UnalignedLMatrix4d >::count(UnalignedLMatrix4d const &) const;

1239 10 __reduce__ 0 4 1613 48 PointerToArray< UnalignedLMatrix4d >::__reduce__ 0 1 430 0
81
PyObject *PointerToArray< UnalignedLMatrix4d >::__reduce__(PyObject *self) const;

1240 13 __getbuffer__ 0 4 1613 51 PointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 431 0
100
int PointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1241 17 __releasebuffer__ 0 4 1613 55 PointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 432 0
100
void PointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1242 15 ~PointerToArray 0 516 1613 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

1243 14 PointerToArray 0 260 1614 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 3 433 434 435 0
339
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4f const *)(0))));
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
PointerToArray< UnalignedLMatrix4f >::PointerToArray(PyObject *self, PyObject *source);

1244 11 empty_array 0 4 1614 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 1 436 0
202
static inline PointerToArray< UnalignedLMatrix4f > PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4f const *)(0))));

1245 5 clear 0 4 1614 43 PointerToArray< UnalignedLMatrix4f >::clear 0 1 437 0
62
inline void PointerToArray< UnalignedLMatrix4f >::clear(void);

1246 4 size 0 4 1614 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 438 0
80
inline unsigned long int PointerToArray< UnalignedLMatrix4f >::size(void) const;

1247 9 push_back 0 4 1614 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 439 0
89
inline void PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

1248 8 pop_back 0 4 1614 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 440 0
65
inline void PointerToArray< UnalignedLMatrix4f >::pop_back(void);

1249 11 get_element 0 4 1614 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 441 0
110
inline UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::get_element(unsigned long int n) const;

1250 11 set_element 0 4 1614 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 442 0
116
inline void PointerToArray< UnalignedLMatrix4f >::set_element(unsigned long int n, UnalignedLMatrix4f const &value);

1251 11 __getitem__ 0 4 1614 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 443 0
103
UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long int n) const;

1252 11 __setitem__ 0 4 1614 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 444 0
109
void PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned long int n, UnalignedLMatrix4f const &value);

1253 8 get_data 0 4 1614 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 445 0
69
PyObject *PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

1254 8 set_data 0 4 1614 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 446 0
68
void PointerToArray< UnalignedLMatrix4f >::set_data(PyObject *data);

1255 11 get_subdata 0 4 1614 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 447 0
112
PyObject *PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long int n, unsigned long int count) const;

1256 11 set_subdata 0 4 1614 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 448 0
147
inline void PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1257 13 get_ref_count 0 4 1614 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 449 0
75
inline int PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

1258 18 get_node_ref_count 0 4 1614 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 450 0
80
inline int PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

1259 5 count 0 4 1614 43 PointerToArray< UnalignedLMatrix4f >::count 0 1 451 0
103
inline unsigned long int PointerToArray< UnalignedLMatrix4f >::count(UnalignedLMatrix4f const &) const;

1260 10 __reduce__ 0 4 1614 48 PointerToArray< UnalignedLMatrix4f >::__reduce__ 0 1 452 0
81
PyObject *PointerToArray< UnalignedLMatrix4f >::__reduce__(PyObject *self) const;

1261 13 __getbuffer__ 0 4 1614 51 PointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 453 0
100
int PointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1262 17 __releasebuffer__ 0 4 1614 55 PointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 454 0
100
void PointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1263 15 ~PointerToArray 0 516 1614 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

1264 14 PointerToArray 0 260 1615 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 3 455 456 457 0
344
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4d const *)(0))));
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
PointerToArray< UnalignedLVecBase4d >::PointerToArray(PyObject *self, PyObject *source);

1265 11 empty_array 0 4 1615 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 1 458 0
205
static inline PointerToArray< UnalignedLVecBase4d > PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4d const *)(0))));

1266 5 clear 0 4 1615 44 PointerToArray< UnalignedLVecBase4d >::clear 0 1 459 0
63
inline void PointerToArray< UnalignedLVecBase4d >::clear(void);

1267 4 size 0 4 1615 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 460 0
81
inline unsigned long int PointerToArray< UnalignedLVecBase4d >::size(void) const;

1268 9 push_back 0 4 1615 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 461 0
91
inline void PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

1269 8 pop_back 0 4 1615 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 462 0
66
inline void PointerToArray< UnalignedLVecBase4d >::pop_back(void);

1270 11 get_element 0 4 1615 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 463 0
112
inline UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::get_element(unsigned long int n) const;

1271 11 set_element 0 4 1615 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 464 0
118
inline void PointerToArray< UnalignedLVecBase4d >::set_element(unsigned long int n, UnalignedLVecBase4d const &value);

1272 11 __getitem__ 0 4 1615 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 465 0
105
UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long int n) const;

1273 11 __setitem__ 0 4 1615 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 466 0
111
void PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned long int n, UnalignedLVecBase4d const &value);

1274 8 get_data 0 4 1615 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 467 0
70
PyObject *PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1275 8 set_data 0 4 1615 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 468 0
69
void PointerToArray< UnalignedLVecBase4d >::set_data(PyObject *data);

1276 11 get_subdata 0 4 1615 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 469 0
113
PyObject *PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long int n, unsigned long int count) const;

1277 11 set_subdata 0 4 1615 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 470 0
148
inline void PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1278 13 get_ref_count 0 4 1615 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 471 0
76
inline int PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1279 18 get_node_ref_count 0 4 1615 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 472 0
81
inline int PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1280 5 count 0 4 1615 44 PointerToArray< UnalignedLVecBase4d >::count 0 1 473 0
105
inline unsigned long int PointerToArray< UnalignedLVecBase4d >::count(UnalignedLVecBase4d const &) const;

1281 10 __reduce__ 0 4 1615 49 PointerToArray< UnalignedLVecBase4d >::__reduce__ 0 1 474 0
82
PyObject *PointerToArray< UnalignedLVecBase4d >::__reduce__(PyObject *self) const;

1282 13 __getbuffer__ 0 4 1615 52 PointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 475 0
101
int PointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1283 17 __releasebuffer__ 0 4 1615 56 PointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 476 0
101
void PointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1284 15 ~PointerToArray 0 516 1615 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

1285 14 PointerToArray 0 260 1616 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 3 477 478 479 0
344
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4f const *)(0))));
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
PointerToArray< UnalignedLVecBase4f >::PointerToArray(PyObject *self, PyObject *source);

1286 11 empty_array 0 4 1616 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 1 480 0
205
static inline PointerToArray< UnalignedLVecBase4f > PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4f const *)(0))));

1287 5 clear 0 4 1616 44 PointerToArray< UnalignedLVecBase4f >::clear 0 1 481 0
63
inline void PointerToArray< UnalignedLVecBase4f >::clear(void);

1288 4 size 0 4 1616 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 482 0
81
inline unsigned long int PointerToArray< UnalignedLVecBase4f >::size(void) const;

1289 9 push_back 0 4 1616 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 483 0
91
inline void PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

1290 8 pop_back 0 4 1616 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 484 0
66
inline void PointerToArray< UnalignedLVecBase4f >::pop_back(void);

1291 11 get_element 0 4 1616 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 485 0
112
inline UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::get_element(unsigned long int n) const;

1292 11 set_element 0 4 1616 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 486 0
118
inline void PointerToArray< UnalignedLVecBase4f >::set_element(unsigned long int n, UnalignedLVecBase4f const &value);

1293 11 __getitem__ 0 4 1616 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 487 0
105
UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long int n) const;

1294 11 __setitem__ 0 4 1616 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 488 0
111
void PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned long int n, UnalignedLVecBase4f const &value);

1295 8 get_data 0 4 1616 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 489 0
70
PyObject *PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1296 8 set_data 0 4 1616 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 490 0
69
void PointerToArray< UnalignedLVecBase4f >::set_data(PyObject *data);

1297 11 get_subdata 0 4 1616 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 491 0
113
PyObject *PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long int n, unsigned long int count) const;

1298 11 set_subdata 0 4 1616 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 492 0
148
inline void PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1299 13 get_ref_count 0 4 1616 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 493 0
76
inline int PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1300 18 get_node_ref_count 0 4 1616 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 494 0
81
inline int PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1301 5 count 0 4 1616 44 PointerToArray< UnalignedLVecBase4f >::count 0 1 495 0
105
inline unsigned long int PointerToArray< UnalignedLVecBase4f >::count(UnalignedLVecBase4f const &) const;

1302 10 __reduce__ 0 4 1616 49 PointerToArray< UnalignedLVecBase4f >::__reduce__ 0 1 496 0
82
PyObject *PointerToArray< UnalignedLVecBase4f >::__reduce__(PyObject *self) const;

1303 13 __getbuffer__ 0 4 1616 52 PointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 497 0
101
int PointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1304 17 __releasebuffer__ 0 4 1616 56 PointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 498 0
101
void PointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1305 15 ~PointerToArray 0 516 1616 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

1306 14 PointerToArray 0 260 1617 53 PointerToArray< UnalignedLVecBase4i >::PointerToArray 0 3 499 500 501 0
344
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4i const *)(0))));
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
PointerToArray< UnalignedLVecBase4i >::PointerToArray(PyObject *self, PyObject *source);

1307 11 empty_array 0 4 1617 50 PointerToArray< UnalignedLVecBase4i >::empty_array 0 1 502 0
205
static inline PointerToArray< UnalignedLVecBase4i > PointerToArray< UnalignedLVecBase4i >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4i const *)(0))));

1308 5 clear 0 4 1617 44 PointerToArray< UnalignedLVecBase4i >::clear 0 1 503 0
63
inline void PointerToArray< UnalignedLVecBase4i >::clear(void);

1309 4 size 0 4 1617 43 PointerToArray< UnalignedLVecBase4i >::size 0 1 504 0
81
inline unsigned long int PointerToArray< UnalignedLVecBase4i >::size(void) const;

1310 9 push_back 0 4 1617 48 PointerToArray< UnalignedLVecBase4i >::push_back 0 1 505 0
91
inline void PointerToArray< UnalignedLVecBase4i >::push_back(UnalignedLVecBase4i const &x);

1311 8 pop_back 0 4 1617 47 PointerToArray< UnalignedLVecBase4i >::pop_back 0 1 506 0
66
inline void PointerToArray< UnalignedLVecBase4i >::pop_back(void);

1312 11 get_element 0 4 1617 50 PointerToArray< UnalignedLVecBase4i >::get_element 0 1 507 0
112
inline UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::get_element(unsigned long int n) const;

1313 11 set_element 0 4 1617 50 PointerToArray< UnalignedLVecBase4i >::set_element 0 1 508 0
118
inline void PointerToArray< UnalignedLVecBase4i >::set_element(unsigned long int n, UnalignedLVecBase4i const &value);

1314 11 __getitem__ 0 4 1617 50 PointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 509 0
105
UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long int n) const;

1315 11 __setitem__ 0 4 1617 50 PointerToArray< UnalignedLVecBase4i >::__setitem__ 0 1 510 0
111
void PointerToArray< UnalignedLVecBase4i >::__setitem__(unsigned long int n, UnalignedLVecBase4i const &value);

1316 8 get_data 0 4 1617 47 PointerToArray< UnalignedLVecBase4i >::get_data 0 1 511 0
70
PyObject *PointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1317 8 set_data 0 4 1617 47 PointerToArray< UnalignedLVecBase4i >::set_data 0 1 512 0
69
void PointerToArray< UnalignedLVecBase4i >::set_data(PyObject *data);

1318 11 get_subdata 0 4 1617 50 PointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 513 0
113
PyObject *PointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long int n, unsigned long int count) const;

1319 11 set_subdata 0 4 1617 50 PointerToArray< UnalignedLVecBase4i >::set_subdata 0 1 514 0
148
inline void PointerToArray< UnalignedLVecBase4i >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1320 13 get_ref_count 0 4 1617 52 PointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 515 0
76
inline int PointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1321 18 get_node_ref_count 0 4 1617 57 PointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 516 0
81
inline int PointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1322 5 count 0 4 1617 44 PointerToArray< UnalignedLVecBase4i >::count 0 1 517 0
105
inline unsigned long int PointerToArray< UnalignedLVecBase4i >::count(UnalignedLVecBase4i const &) const;

1323 10 __reduce__ 0 4 1617 49 PointerToArray< UnalignedLVecBase4i >::__reduce__ 0 1 518 0
82
PyObject *PointerToArray< UnalignedLVecBase4i >::__reduce__(PyObject *self) const;

1324 13 __getbuffer__ 0 4 1617 52 PointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 519 0
101
int PointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1325 17 __releasebuffer__ 0 4 1617 56 PointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 520 0
101
void PointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1326 15 ~PointerToArray 0 516 1617 54 PointerToArray< UnalignedLVecBase4i >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4i >::~PointerToArray(void);

1327 9 make_copy 0 6 1618 25 BoundingVolume::make_copy 0 1 521 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

1328 8 is_empty 0 4 1618 24 BoundingVolume::is_empty 0 1 522 253
/**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */
49
inline bool BoundingVolume::is_empty(void) const;

1329 11 is_infinite 0 4 1618 27 BoundingVolume::is_infinite 0 1 523 536
/**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */
52
inline bool BoundingVolume::is_infinite(void) const;

1330 12 set_infinite 0 4 1618 28 BoundingVolume::set_infinite 0 1 524 135
/**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */
47
inline void BoundingVolume::set_infinite(void);

1331 9 extend_by 0 4 1618 25 BoundingVolume::extend_by 0 1 525 72
/**
 * Increases the size of the volume to include the given volume.
 */
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

1332 8 contains 0 4 1618 24 BoundingVolume::contains 0 1 526 128
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

1333 6 output 0 6 1618 22 BoundingVolume::output 0 1 527 0
65
virtual void BoundingVolume::output(std::ostream &out) const = 0;

1334 5 write 0 6 1618 21 BoundingVolume::write 0 1 528 10
/**
 *
 */
82
virtual void BoundingVolume::write(std::ostream &out, int indent_level = 0) const;

1335 14 get_class_type 0 4 1618 30 BoundingVolume::get_class_type 0 1 529 0
55
static TypeHandle BoundingVolume::get_class_type(void);

1336 15 ~BoundingVolume 0 516 1618 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

1337 9 extend_by 0 4 1622 34 GeometricBoundingVolume::extend_by 0 2 530 531 145
/**
 * Increases the size of the volume to include the given volume.
 */

/**
 * Increases the size of the volume to include the given point.
 */
153
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3 const &point);

1338 8 contains 0 4 1622 33 GeometricBoundingVolume::contains 0 3 532 533 534 393
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */
249
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &a, LPoint3 const &b) const;

1339 17 get_approx_center 0 6 1622 42 GeometricBoundingVolume::get_approx_center 0 1 535 0
75
virtual LPoint3 GeometricBoundingVolume::get_approx_center(void) const = 0;

1340 5 xform 0 6 1622 30 GeometricBoundingVolume::xform 0 1 536 0
69
virtual void GeometricBoundingVolume::xform(LMatrix4 const &mat) = 0;

1341 14 get_class_type 0 4 1622 39 GeometricBoundingVolume::get_class_type 0 1 537 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

1342 24 ~GeometricBoundingVolume 0 516 1622 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

1343 7 get_min 0 6 1623 29 FiniteBoundingVolume::get_min 0 1 538 0
62
virtual LPoint3 FiniteBoundingVolume::get_min(void) const = 0;

1344 7 get_max 0 6 1623 29 FiniteBoundingVolume::get_max 0 1 539 0
62
virtual LPoint3 FiniteBoundingVolume::get_max(void) const = 0;

1345 10 get_volume 0 6 1623 32 FiniteBoundingVolume::get_volume 0 1 540 10
/**
 *
 */
65
virtual PN_stdfloat FiniteBoundingVolume::get_volume(void) const;

1346 14 get_class_type 0 4 1623 36 FiniteBoundingVolume::get_class_type 0 1 541 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

1347 21 ~FiniteBoundingVolume 0 516 1623 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

1348 10 LParabolaf 0 260 1628 22 LParabolaf::LParabolaf 0 3 542 543 544 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

1349 10 operator = 0 4 1628 22 LParabolaf::operator = 0 1 545 0
59
inline void LParabolaf::operator =(LParabolaf const &copy);

1350 11 ~LParabolaf 0 516 1628 23 LParabolaf::~LParabolaf 0 0 10
/**
 *
 */
37
inline LParabolaf::~LParabolaf(void);

1351 5 xform 0 4 1628 17 LParabolaf::xform 0 1 546 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolaf::xform(LMatrix4f const &mat);

1352 5 get_a 0 4 1628 17 LParabolaf::get_a 0 1 547 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

1353 5 get_b 0 4 1628 17 LParabolaf::get_b 0 1 548 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

1354 5 get_c 0 4 1628 17 LParabolaf::get_c 0 1 549 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

1355 10 calc_point 0 4 1628 22 LParabolaf::calc_point 0 1 550 56
/**
 * Computes the point on the parabola at time t.
 */
54
inline LPoint3f LParabolaf::calc_point(float t) const;

1356 6 output 0 4 1628 18 LParabolaf::output 0 1 551 10
/**
 *
 */
49
void LParabolaf::output(std::ostream &out) const;

1357 5 write 0 4 1628 17 LParabolaf::write 0 1 552 10
/**
 *
 */
70
void LParabolaf::write(std::ostream &out, int indent_level = 0) const;

1358 20 write_datagram_fixed 0 4 1628 32 LParabolaf::write_datagram_fixed 0 1 553 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

1359 19 read_datagram_fixed 0 4 1628 31 LParabolaf::read_datagram_fixed 0 1 554 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

1360 14 write_datagram 0 4 1628 26 LParabolaf::write_datagram 0 1 555 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolaf::write_datagram(Datagram &destination) const;

1361 13 read_datagram 0 4 1628 25 LParabolaf::read_datagram 0 1 556 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolaf::read_datagram(DatagramIterator &source);

1362 10 LParabolad 0 260 1629 22 LParabolad::LParabolad 0 3 557 558 559 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

1363 10 operator = 0 4 1629 22 LParabolad::operator = 0 1 560 0
59
inline void LParabolad::operator =(LParabolad const &copy);

1364 11 ~LParabolad 0 516 1629 23 LParabolad::~LParabolad 0 0 10
/**
 *
 */
37
inline LParabolad::~LParabolad(void);

1365 5 xform 0 4 1629 17 LParabolad::xform 0 1 561 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolad::xform(LMatrix4d const &mat);

1366 5 get_a 0 4 1629 17 LParabolad::get_a 0 1 562 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3d const &LParabolad::get_a(void) const;

1367 5 get_b 0 4 1629 17 LParabolad::get_b 0 1 563 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3d const &LParabolad::get_b(void) const;

1368 5 get_c 0 4 1629 17 LParabolad::get_c 0 1 564 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3d const &LParabolad::get_c(void) const;

1369 10 calc_point 0 4 1629 22 LParabolad::calc_point 0 1 565 56
/**
 * Computes the point on the parabola at time t.
 */
55
inline LPoint3d LParabolad::calc_point(double t) const;

1370 6 output 0 4 1629 18 LParabolad::output 0 1 566 10
/**
 *
 */
49
void LParabolad::output(std::ostream &out) const;

1371 5 write 0 4 1629 17 LParabolad::write 0 1 567 10
/**
 *
 */
70
void LParabolad::write(std::ostream &out, int indent_level = 0) const;

1372 20 write_datagram_fixed 0 4 1629 32 LParabolad::write_datagram_fixed 0 1 568 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

1373 19 read_datagram_fixed 0 4 1629 31 LParabolad::read_datagram_fixed 0 1 569 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

1374 14 write_datagram 0 4 1629 26 LParabolad::write_datagram 0 1 570 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolad::write_datagram(Datagram &destination) const;

1375 13 read_datagram 0 4 1629 25 LParabolad::read_datagram 0 1 571 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolad::read_datagram(DatagramIterator &source);

1376 7 LPlanef 0 260 1631 16 LPlanef::LPlanef 0 6 572 573 574 575 576 577 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
347
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);
inline LPlanef::LPlanef(LPlanef const &) = default;

1377 10 operator * 0 4 1631 19 LPlanef::operator * 0 2 578 579 0
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

1378 11 operator *= 0 4 1631 20 LPlanef::operator *= 0 1 580 0
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

1379 5 xform 0 4 1631 14 LPlanef::xform 0 1 581 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlanef::xform(LMatrix4f const &mat);

1380 10 operator - 0 68 1631 19 LPlanef::operator - 0 1 582 0
47
inline LPlanef LPlanef::operator -(void) const;

1381 18 get_reflection_mat 0 4 1631 27 LPlanef::get_reflection_mat 0 1 583 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

1382 10 get_normal 0 4 1631 19 LPlanef::get_normal 0 1 584 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3f LPlanef::get_normal(void) const;

1383 9 get_point 0 4 1631 18 LPlanef::get_point 0 1 585 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3f LPlanef::get_point(void) const;

1384 13 dist_to_plane 0 4 1631 22 LPlanef::dist_to_plane 0 1 586 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

1385 9 normalize 0 4 1631 18 LPlanef::normalize 0 1 587 139
/**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */
37
inline bool LPlanef::normalize(void);

1386 10 normalized 0 4 1631 19 LPlanef::normalized 0 1 588 155
/**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */
47
inline LPlanef LPlanef::normalized(void) const;

1387 7 project 0 4 1631 16 LPlanef::project 0 1 589 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

1388 4 flip 0 4 1631 13 LPlanef::flip 0 1 590 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlanef::flip(void);

1389 15 intersects_line 0 4 1631 24 LPlanef::intersects_line 0 1 591 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

1390 16 intersects_plane 0 4 1631 25 LPlanef::intersects_plane 0 1 592 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

1391 19 intersects_parabola 0 4 1631 28 LPlanef::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

1392 6 output 0 4 1631 15 LPlanef::output 0 1 593 10
/**
 *
 */
46
void LPlanef::output(std::ostream &out) const;

1393 5 write 0 4 1631 14 LPlanef::write 0 1 594 10
/**
 *
 */
67
void LPlanef::write(std::ostream &out, int indent_level = 0) const;

1394 8 __repr__ 0 4 1631 17 LPlanef::__repr__ 0 1 595 58
/**
 * Returns a string representation of this LPlane.
 */
42
std::string LPlanef::__repr__(void) const;

1395 8 ~LPlanef 0 516 1631 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

1396 7 LPlaned 0 260 1633 16 LPlaned::LPlaned 0 6 596 597 598 599 600 601 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
351
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);
inline LPlaned::LPlaned(LPlaned const &) = default;

1397 10 operator * 0 4 1633 19 LPlaned::operator * 0 2 602 603 0
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

1398 11 operator *= 0 4 1633 20 LPlaned::operator *= 0 1 604 0
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

1399 5 xform 0 4 1633 14 LPlaned::xform 0 1 605 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlaned::xform(LMatrix4d const &mat);

1400 10 operator - 0 68 1633 19 LPlaned::operator - 0 1 606 0
47
inline LPlaned LPlaned::operator -(void) const;

1401 18 get_reflection_mat 0 4 1633 27 LPlaned::get_reflection_mat 0 1 607 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

1402 10 get_normal 0 4 1633 19 LPlaned::get_normal 0 1 608 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3d LPlaned::get_normal(void) const;

1403 9 get_point 0 4 1633 18 LPlaned::get_point 0 1 609 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3d LPlaned::get_point(void) const;

1404 13 dist_to_plane 0 4 1633 22 LPlaned::dist_to_plane 0 1 610 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

1405 9 normalize 0 4 1633 18 LPlaned::normalize 0 1 611 139
/**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */
37
inline bool LPlaned::normalize(void);

1406 10 normalized 0 4 1633 19 LPlaned::normalized 0 1 612 155
/**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */
47
inline LPlaned LPlaned::normalized(void) const;

1407 7 project 0 4 1633 16 LPlaned::project 0 1 613 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

1408 4 flip 0 4 1633 13 LPlaned::flip 0 1 614 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlaned::flip(void);

1409 15 intersects_line 0 4 1633 24 LPlaned::intersects_line 0 1 615 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

1410 16 intersects_plane 0 4 1633 25 LPlaned::intersects_plane 0 1 616 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

1411 19 intersects_parabola 0 4 1633 28 LPlaned::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

1412 6 output 0 4 1633 15 LPlaned::output 0 1 617 10
/**
 *
 */
46
void LPlaned::output(std::ostream &out) const;

1413 5 write 0 4 1633 14 LPlaned::write 0 1 618 10
/**
 *
 */
67
void LPlaned::write(std::ostream &out, int indent_level = 0) const;

1414 8 __repr__ 0 4 1633 17 LPlaned::__repr__ 0 1 619 58
/**
 * Returns a string representation of this LPlane.
 */
42
std::string LPlaned::__repr__(void) const;

1415 8 ~LPlaned 0 516 1633 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

1416 11 BoundingBox 0 260 1639 24 BoundingBox::BoundingBox 0 2 620 621 88
/**
 * Constructs an empty box object.
 */

/**
 * Constructs a specific box object.
 */
120
inline BoundingBox::BoundingBox(void);
inline explicit BoundingBox::BoundingBox(LPoint3 const &min, LPoint3 const &max);

1417 12 operator new 0 4 1639 25 BoundingBox::operator new 0 1 622 0
126
inline void *BoundingBox::operator new(std::size_t size);
inline void *BoundingBox::operator new(std::size_t size, void *ptr);

1418 15 operator delete 0 4 1639 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

1419 12 validate_ptr 0 4 1639 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

1420 14 get_num_points 0 4 1639 27 BoundingBox::get_num_points 0 1 623 68
/**
 * Returns 8: the number of vertices of a rectangular solid.
 */
51
inline int BoundingBox::get_num_points(void) const;

1421 9 get_point 0 4 1639 22 BoundingBox::get_point 0 1 624 59
/**
 * Returns the nth vertex of the rectangular solid.
 */
51
inline LPoint3 BoundingBox::get_point(int n) const;

1422 14 get_num_planes 0 4 1639 27 BoundingBox::get_num_planes 0 1 625 65
/**
 * Returns 6: the number of faces of a rectangular solid.
 */
51
inline int BoundingBox::get_num_planes(void) const;

1423 9 get_plane 0 4 1639 22 BoundingBox::get_plane 0 1 626 57
/**
 * Returns the nth face of the rectangular solid.
 */
50
inline LPlane BoundingBox::get_plane(int n) const;

1424 11 set_min_max 0 4 1639 24 BoundingBox::set_min_max 0 1 627 63
/**
 * Sets the min and max point of the rectangular solid.
 */
77
inline void BoundingBox::set_min_max(LPoint3 const &min, LPoint3 const &max);

1425 14 get_class_type 0 4 1639 27 BoundingBox::get_class_type 0 1 628 0
52
static TypeHandle BoundingBox::get_class_type(void);

1426 12 ~BoundingBox 0 516 1639 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

1427 9 LFrustumf 0 260 1640 20 LFrustumf::LFrustumf 0 2 629 630 10
/**
 *
 */
92
inline LFrustumf::LFrustumf(void);
inline LFrustumf::LFrustumf(LFrustumf const &) = default;

1428 13 make_ortho_2D 0 4 1640 24 LFrustumf::make_ortho_2D 0 2 631 632 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

1429 10 make_ortho 0 4 1640 21 LFrustumf::make_ortho 0 2 633 634 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

1430 21 make_perspective_hfov 0 4 1640 32 LFrustumf::make_perspective_hfov 0 1 635 79
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees)
 */
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

1431 21 make_perspective_vfov 0 4 1640 32 LFrustumf::make_perspective_vfov 0 1 636 10
/**
 *
 */
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

1432 16 make_perspective 0 4 1640 27 LFrustumf::make_perspective 0 1 637 10
/**
 *
 */
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

1433 22 get_perspective_params 0 4 1640 33 LFrustumf::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

1434 10 ~LFrustumf 0 516 1640 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

1435 9 LFrustumd 0 260 1641 20 LFrustumd::LFrustumd 0 2 638 639 10
/**
 *
 */
92
inline LFrustumd::LFrustumd(void);
inline LFrustumd::LFrustumd(LFrustumd const &) = default;

1436 13 make_ortho_2D 0 4 1641 24 LFrustumd::make_ortho_2D 0 2 640 641 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

1437 10 make_ortho 0 4 1641 21 LFrustumd::make_ortho 0 2 642 643 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

1438 21 make_perspective_hfov 0 4 1641 32 LFrustumd::make_perspective_hfov 0 1 644 79
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees)
 */
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

1439 21 make_perspective_vfov 0 4 1641 32 LFrustumd::make_perspective_vfov 0 1 645 10
/**
 *
 */
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

1440 16 make_perspective 0 4 1641 27 LFrustumd::make_perspective 0 1 646 10
/**
 *
 */
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1441 22 get_perspective_params 0 4 1641 33 LFrustumd::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1442 10 ~LFrustumd 0 516 1641 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1443 18 BoundingHexahedron 0 260 1646 38 BoundingHexahedron::BoundingHexahedron 0 2 647 648 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
315
BoundingHexahedron::BoundingHexahedron(LFrustum const &frustum, bool is_ortho, CoordinateSystem cs = ::CS_default);
BoundingHexahedron::BoundingHexahedron(LPoint3 const &fll, LPoint3 const &flr, LPoint3 const &fur, LPoint3 const &ful, LPoint3 const &nll, LPoint3 const &nlr, LPoint3 const &nur, LPoint3 const &nul);

1444 14 get_num_points 0 4 1646 34 BoundingHexahedron::get_num_points 0 1 649 61
/**
 * Returns 8: the number of vertices of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_points(void) const;

1445 9 get_point 0 4 1646 29 BoundingHexahedron::get_point 0 1 650 52
/**
 * Returns the nth vertex of the hexahedron.
 */
58
inline LPoint3 BoundingHexahedron::get_point(int n) const;

1446 14 get_num_planes 0 4 1646 34 BoundingHexahedron::get_num_planes 0 1 651 58
/**
 * Returns 6: the number of faces of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_planes(void) const;

1447 9 get_plane 0 4 1646 29 BoundingHexahedron::get_plane 0 1 652 50
/**
 * Returns the nth face of the hexahedron.
 */
57
inline LPlane BoundingHexahedron::get_plane(int n) const;

1448 14 get_class_type 0 4 1646 34 BoundingHexahedron::get_class_type 0 1 653 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1449 19 ~BoundingHexahedron 0 516 1646 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1450 12 BoundingLine 0 260 1647 26 BoundingLine::BoundingLine 0 1 654 22
/**
 *
 */

/**
 *
 */
79
inline explicit BoundingLine::BoundingLine(LPoint3 const &a, LPoint3 const &b);

1451 12 operator new 0 4 1647 26 BoundingLine::operator new 0 1 655 0
128
inline void *BoundingLine::operator new(std::size_t size);
inline void *BoundingLine::operator new(std::size_t size, void *ptr);

1452 15 operator delete 0 4 1647 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

1453 12 validate_ptr 0 4 1647 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1454 11 get_point_a 0 4 1647 25 BoundingLine::get_point_a 0 1 656 57
/**
 * Returns the first point that defines the line.
 */
60
inline LPoint3 const &BoundingLine::get_point_a(void) const;

1455 11 get_point_b 0 4 1647 25 BoundingLine::get_point_b 0 1 657 58
/**
 * Returns the second point that defines the line.
 */
53
inline LPoint3 BoundingLine::get_point_b(void) const;

1456 14 get_class_type 0 4 1647 28 BoundingLine::get_class_type 0 1 658 0
53
static TypeHandle BoundingLine::get_class_type(void);

1457 13 ~BoundingLine 0 516 1647 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1458 13 BoundingPlane 0 260 1648 28 BoundingPlane::BoundingPlane 0 2 659 660 77
/**
 * Constructs an empty "plane" that has no intersections.
 */

/**
 *
 */
100
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlane const &plane);

1459 12 operator new 0 4 1648 27 BoundingPlane::operator new 0 1 661 0
130
inline void *BoundingPlane::operator new(std::size_t size);
inline void *BoundingPlane::operator new(std::size_t size, void *ptr);

1460 15 operator delete 0 4 1648 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

1461 12 validate_ptr 0 4 1648 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1462 9 get_plane 0 4 1648 24 BoundingPlane::get_plane 0 1 662 10
/**
 *
 */
58
inline LPlane const &BoundingPlane::get_plane(void) const;

1463 14 get_class_type 0 4 1648 29 BoundingPlane::get_class_type 0 1 663 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1464 14 ~BoundingPlane 0 516 1648 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1465 14 BoundingSphere 0 260 1650 30 BoundingSphere::BoundingSphere 0 2 664 665 80
/**
 * Constructs an empty sphere.
 */

/**
 * Constructs a specific sphere.
 */
135
inline BoundingSphere::BoundingSphere(void);
inline explicit BoundingSphere::BoundingSphere(LPoint3 const &center, PN_stdfloat radius);

1466 12 operator new 0 4 1650 28 BoundingSphere::operator new 0 1 666 0
132
inline void *BoundingSphere::operator new(std::size_t size);
inline void *BoundingSphere::operator new(std::size_t size, void *ptr);

1467 15 operator delete 0 4 1650 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

1468 12 validate_ptr 0 4 1650 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1469 10 get_center 0 4 1650 26 BoundingSphere::get_center 0 1 667 10
/**
 *
 */
54
inline LPoint3 BoundingSphere::get_center(void) const;

1470 10 get_radius 0 4 1650 26 BoundingSphere::get_radius 0 1 668 10
/**
 *
 */
58
inline PN_stdfloat BoundingSphere::get_radius(void) const;

1471 10 set_center 0 4 1650 26 BoundingSphere::set_center 0 1 669 47
/**
 * Sets the center point of the sphere.
 */
62
inline void BoundingSphere::set_center(LPoint3 const &center);

1472 10 set_radius 0 4 1650 26 BoundingSphere::set_radius 0 1 670 41
/**
 * Sets the radius of the sphere.
 */
59
inline void BoundingSphere::set_radius(PN_stdfloat radius);

1473 14 get_class_type 0 4 1650 30 BoundingSphere::get_class_type 0 1 671 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1474 15 ~BoundingSphere 0 516 1650 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1475 26 IntersectionBoundingVolume 0 260 1651 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 672 56
/**
 * Constructs an empty intersection.
 */

/**
 *
 */
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1476 12 operator new 0 4 1651 40 IntersectionBoundingVolume::operator new 0 1 673 0
156
inline void *IntersectionBoundingVolume::operator new(std::size_t size);
inline void *IntersectionBoundingVolume::operator new(std::size_t size, void *ptr);

1477 15 operator delete 0 4 1651 43 IntersectionBoundingVolume::operator delete 0 0 0
140
inline void IntersectionBoundingVolume::operator delete(void *ptr);
inline void IntersectionBoundingVolume::operator delete(void *, void *);

1478 12 validate_ptr 0 4 1651 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1479 18 get_num_components 0 4 1651 46 IntersectionBoundingVolume::get_num_components 0 1 674 64
/**
 * Returns the number of components in the intersection.
 */
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1480 13 get_component 0 4 1651 41 IntersectionBoundingVolume::get_component 0 1 675 57
/**
 * Returns the nth component in the intersection.
 */
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1481 16 clear_components 0 4 1651 44 IntersectionBoundingVolume::clear_components 0 1 676 50
/**
 * Removes all components from the volume.
 */
56
void IntersectionBoundingVolume::clear_components(void);

1482 13 add_component 0 4 1651 41 IntersectionBoundingVolume::add_component 0 1 677 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1483 14 get_class_type 0 4 1651 42 IntersectionBoundingVolume::get_class_type 0 1 678 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1484 27 ~IntersectionBoundingVolume 0 516 1651 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1485 8 heads_up 0 1 0 8 heads_up 0 12 779 780 781 782 783 784 785 786 787 788 789 790 0
1297
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1486 7 look_at 0 1 0 7 look_at 0 12 791 792 793 794 795 796 797 798 799 800 801 802 0
1285
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1487 8 Mersenne 0 260 1654 18 Mersenne::Mersenne 0 2 679 680 35
/* initializes mt[N] with a seed */
107
explicit Mersenne::Mersenne(unsigned long int seed);
inline Mersenne::Mersenne(Mersenne const &) = default;

1488 10 get_uint31 0 4 1654 20 Mersenne::get_uint31 0 1 681 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1489 9 ~Mersenne 0 516 1654 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1490 18 OmniBoundingVolume 0 260 1656 38 OmniBoundingVolume::OmniBoundingVolume 0 1 682 10
/**
 *
 */
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1491 14 get_class_type 0 4 1656 34 OmniBoundingVolume::get_class_type 0 1 683 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1492 19 ~OmniBoundingVolume 0 516 1656 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1493 19 UnionBoundingVolume 0 260 1657 40 UnionBoundingVolume::UnionBoundingVolume 0 1 684 49
/**
 * Constructs an empty union.
 */

/**
 *
 */
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1494 12 operator new 0 4 1657 33 UnionBoundingVolume::operator new 0 1 685 0
142
inline void *UnionBoundingVolume::operator new(std::size_t size);
inline void *UnionBoundingVolume::operator new(std::size_t size, void *ptr);

1495 15 operator delete 0 4 1657 36 UnionBoundingVolume::operator delete 0 0 0
126
inline void UnionBoundingVolume::operator delete(void *ptr);
inline void UnionBoundingVolume::operator delete(void *, void *);

1496 12 validate_ptr 0 4 1657 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1497 18 get_num_components 0 4 1657 39 UnionBoundingVolume::get_num_components 0 1 686 57
/**
 * Returns the number of components in the union.
 */
63
inline int UnionBoundingVolume::get_num_components(void) const;

1498 13 get_component 0 4 1657 34 UnionBoundingVolume::get_component 0 1 687 50
/**
 * Returns the nth component in the union.
 */
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1499 16 clear_components 0 4 1657 37 UnionBoundingVolume::clear_components 0 1 688 50
/**
 * Removes all components from the volume.
 */
49
void UnionBoundingVolume::clear_components(void);

1500 13 add_component 0 4 1657 34 UnionBoundingVolume::add_component 0 1 689 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1501 19 filter_intersection 0 4 1657 40 UnionBoundingVolume::filter_intersection 0 1 690 104
/**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1502 14 get_class_type 0 4 1657 35 UnionBoundingVolume::get_class_type 0 1 691 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1503 20 ~UnionBoundingVolume 0 516 1657 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1504 10 Randomizer 0 260 1658 22 Randomizer::Randomizer 0 2 692 693 120
/**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 *
 */
122
inline explicit Randomizer::Randomizer(unsigned long int seed = 0);
inline Randomizer::Randomizer(Randomizer const &copy);

1505 10 operator = 0 4 1658 22 Randomizer::operator = 0 1 694 0
59
inline void Randomizer::operator =(Randomizer const &copy);

1506 10 random_int 0 4 1658 22 Randomizer::random_int 0 1 695 60
/**
 * Returns a random integer in the range [0, range).
 */
45
inline int Randomizer::random_int(int range);

1507 11 random_real 0 4 1658 23 Randomizer::random_real 0 1 696 59
/**
 * Returns a random double in the range [0, range).
 */
52
inline double Randomizer::random_real(double range);

1508 16 random_real_unit 0 4 1658 28 Randomizer::random_real_unit 0 1 697 60
/**
 * Returns a random double in the range [-0.5, 0.5).
 */
49
inline double Randomizer::random_real_unit(void);

1509 13 get_next_seed 0 4 1658 25 Randomizer::get_next_seed 0 1 698 77
/**
 * Returns a random seed value for the next global Randomizer object.
 */
64
static inline unsigned long int Randomizer::get_next_seed(void);

1510 8 get_seed 0 4 1658 20 Randomizer::get_seed 0 1 699 126
/**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */
52
inline unsigned long int Randomizer::get_seed(void);

1511 11 ~Randomizer 0 516 1658 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1512 8 get_seed 0 4 1659 21 PerlinNoise::get_seed 0 1 700 127
/**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */
53
inline unsigned long int PerlinNoise::get_seed(void);

1513 12 ~PerlinNoise 0 516 1659 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1514 12 PerlinNoise2 0 260 1660 26 PerlinNoise2::PerlinNoise2 0 3 701 702 703 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
217
inline PerlinNoise2::PerlinNoise2(void);
inline explicit PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1515 10 operator = 0 4 1660 24 PerlinNoise2::operator = 0 1 704 0
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1516 9 set_scale 0 4 1660 23 PerlinNoise2::set_scale 0 4 705 706 707 708 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1517 5 noise 0 4 1660 19 PerlinNoise2::noise 0 3 709 710 711 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1518 11 operator () 0 4 1660 25 PerlinNoise2::operator () 0 3 712 713 714 0
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1519 13 ~PerlinNoise2 0 516 1660 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1520 12 PerlinNoise3 0 260 1661 26 PerlinNoise3::PerlinNoise3 0 3 715 716 717 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
228
inline PerlinNoise3::PerlinNoise3(void);
inline explicit PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1521 10 operator = 0 4 1661 24 PerlinNoise3::operator = 0 1 718 0
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1522 9 set_scale 0 4 1661 23 PerlinNoise3::set_scale 0 4 719 720 721 722 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1523 5 noise 0 4 1661 19 PerlinNoise3::noise 0 3 723 724 725 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1524 11 operator () 0 4 1661 25 PerlinNoise3::operator () 0 3 726 727 728 0
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1525 13 ~PerlinNoise3 0 516 1661 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1526 9 rotate_to 0 1 0 9 rotate_to 0 4 803 804 805 806 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1527 19 StackedPerlinNoise2 0 260 1718 40 StackedPerlinNoise2::StackedPerlinNoise2 0 3 729 730 731 555
/**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */
323
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
explicit StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = 2, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1528 10 operator = 0 4 1718 31 StackedPerlinNoise2::operator = 0 1 732 0
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1529 9 add_level 0 4 1718 30 StackedPerlinNoise2::add_level 0 1 733 95
/**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = 1.0);

1530 5 clear 0 4 1718 26 StackedPerlinNoise2::clear 0 1 734 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise2::clear(void);

1531 5 noise 0 4 1718 26 StackedPerlinNoise2::noise 0 3 735 736 737 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1532 11 operator () 0 4 1718 32 StackedPerlinNoise2::operator () 0 3 738 739 740 0
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1533 20 ~StackedPerlinNoise2 0 516 1718 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1534 19 StackedPerlinNoise3 0 260 1719 40 StackedPerlinNoise3::StackedPerlinNoise3 0 3 741 742 743 555
/**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */
334
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
explicit StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = 3, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1535 10 operator = 0 4 1719 31 StackedPerlinNoise3::operator = 0 1 744 0
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1536 9 add_level 0 4 1719 30 StackedPerlinNoise3::add_level 0 1 745 95
/**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = 1.0);

1537 5 clear 0 4 1719 26 StackedPerlinNoise3::clear 0 1 746 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise3::clear(void);

1538 5 noise 0 4 1719 26 StackedPerlinNoise3::noise 0 3 747 748 749 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1539 11 operator () 0 4 1719 32 StackedPerlinNoise3::operator () 0 3 750 751 752 0
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1540 20 ~StackedPerlinNoise3 0 516 1719 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1541 12 Triangulator 0 260 1720 26 Triangulator::Triangulator 0 2 753 754 10
/**
 *
 */
100
Triangulator::Triangulator(void);
inline Triangulator::Triangulator(Triangulator const &) = default;

1542 5 clear 0 4 1720 19 Triangulator::clear 0 1 755 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
31
void Triangulator::clear(void);

1543 10 add_vertex 0 4 1720 24 Triangulator::add_vertex 0 2 756 757 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1544 16 get_num_vertices 0 4 1720 30 Triangulator::get_num_vertices 0 1 758 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
54
inline int Triangulator::get_num_vertices(void) const;

1545 10 get_vertex 0 4 1720 24 Triangulator::get_vertex 0 1 759 34
/**
 * Returns the nth vertex.
 */
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1546 13 clear_polygon 0 4 1720 27 Triangulator::clear_polygon 0 1 760 112
/**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */
39
void Triangulator::clear_polygon(void);

1547 18 add_polygon_vertex 0 4 1720 32 Triangulator::add_polygon_vertex 0 1 761 334
/**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */
49
void Triangulator::add_polygon_vertex(int index);

1548 15 is_left_winding 0 4 1720 29 Triangulator::is_left_winding 0 1 762 145
/**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */
54
inline bool Triangulator::is_left_winding(void) const;

1549 10 begin_hole 0 4 1720 24 Triangulator::begin_hole 0 1 763 78
/**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */
36
void Triangulator::begin_hole(void);

1550 15 add_hole_vertex 0 4 1720 29 Triangulator::add_hole_vertex 0 1 764 277
/**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */
46
void Triangulator::add_hole_vertex(int index);

1551 11 triangulate 0 4 1720 25 Triangulator::triangulate 0 1 765 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
37
void Triangulator::triangulate(void);

1552 17 get_num_triangles 0 4 1720 31 Triangulator::get_num_triangles 0 1 766 94
/**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */
48
int Triangulator::get_num_triangles(void) const;

1553 15 get_triangle_v0 0 4 1720 29 Triangulator::get_triangle_v0 0 1 767 194
/**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v0(int n) const;

1554 15 get_triangle_v1 0 4 1720 29 Triangulator::get_triangle_v1 0 1 768 194
/**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v1(int n) const;

1555 15 get_triangle_v2 0 4 1720 29 Triangulator::get_triangle_v2 0 1 769 194
/**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v2(int n) const;

1556 13 ~Triangulator 0 516 1720 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

1557 13 Triangulator3 0 260 1723 28 Triangulator3::Triangulator3 0 2 770 771 10
/**
 *
 */
105
Triangulator3::Triangulator3(void);
inline Triangulator3::Triangulator3(Triangulator3 const &) = default;

1558 5 clear 0 4 1723 20 Triangulator3::clear 0 1 772 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
32
void Triangulator3::clear(void);

1559 10 add_vertex 0 4 1723 25 Triangulator3::add_vertex 0 2 773 774 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
121
int Triangulator3::add_vertex(LPoint3d const &point);
inline int Triangulator3::add_vertex(double x, double y, double z);

1560 16 get_num_vertices 0 4 1723 31 Triangulator3::get_num_vertices 0 1 775 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
55
inline int Triangulator3::get_num_vertices(void) const;

1561 10 get_vertex 0 4 1723 25 Triangulator3::get_vertex 0 1 776 34
/**
 * Returns the nth vertex.
 */
62
inline LPoint3d const &Triangulator3::get_vertex(int n) const;

1562 11 triangulate 0 4 1723 26 Triangulator3::triangulate 0 1 777 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
38
void Triangulator3::triangulate(void);

1563 9 get_plane 0 4 1723 24 Triangulator3::get_plane 0 1 778 100
/**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */
59
inline LPlaned const &Triangulator3::get_plane(void) const;

1564 14 ~Triangulator3 0 516 1723 29 Triangulator3::~Triangulator3 0 0 0
36
Triangulator3::~Triangulator3(void);

806
1 0 0 7 10 1729 825 0 0 1 4 copy 1 1727  
2 0 0 7 10 1729 825 0 0 1 4 copy 1 1730  
3 0 0 4 11 1732 0 0 0 1 4 this 3 1729  
4 0 0 6 12 1733 0 0 0 1 4 this 3 1727  
5 0 0 6 13 1734 0 0 0 2 4 this 3 1727  1 n 1 1733  
6 0 0 6 14 1734 0 0 0 2 4 this 3 1727  1 n 1 1733  
7 0 0 6 15 1737 0 0 0 1 4 this 3 1727  
8 0 0 6 16 1737 0 0 0 3 4 this 3 1727  1 n 1 1733  5 count 1 1733  
9 0 0 6 17 1740 0 0 0 1 4 this 3 1727  
10 0 0 6 18 1740 0 0 0 1 4 this 3 1727  
11 0 0 6 19 1733 0 0 0 2 4 this 3 1727  6 param0 0 1734  
12 0 0 6 20 1737 0 0 0 1 4 this 3 1727  
13 0 0 6 21 1740 0 0 0 3 4 this 3 1727  4 view 1 1741  5 flags 1 1740  
14 0 0 4 22 1732 0 0 0 2 4 this 3 1727  4 view 1 1741  
15 0 0 6 8 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1744  5 other 1 1744  
16 0 0 6 9 1746 0 0 0 2 4 this 3 1744  5 other 1 1744  
17 0 0 4 5 1732 0 0 0 1 4 this 3 1747  
18 0 0 4 6 1732 0 0 0 2 4 this 3 1748  3 out 1 1750  
19 0 0 7 32 1754 844 0 0 1 4 copy 1 1752  
20 0 0 7 32 1754 844 0 0 1 4 copy 1 1755  
21 0 0 4 33 1732 0 0 0 1 4 this 3 1754  
22 0 0 6 34 1733 0 0 0 1 4 this 3 1752  
23 0 0 6 35 1757 0 0 0 2 4 this 3 1752  1 n 1 1733  
24 0 0 6 36 1757 0 0 0 2 4 this 3 1752  1 n 1 1733  
25 0 0 6 37 1737 0 0 0 1 4 this 3 1752  
26 0 0 6 38 1737 0 0 0 3 4 this 3 1752  1 n 1 1733  5 count 1 1733  
27 0 0 6 39 1740 0 0 0 1 4 this 3 1752  
28 0 0 6 40 1740 0 0 0 1 4 this 3 1752  
29 0 0 6 41 1733 0 0 0 2 4 this 3 1752  6 param0 0 1757  
30 0 0 6 42 1737 0 0 0 1 4 this 3 1752  
31 0 0 6 43 1740 0 0 0 3 4 this 3 1752  4 view 1 1741  5 flags 1 1740  
32 0 0 4 44 1732 0 0 0 2 4 this 3 1752  4 view 1 1741  
33 0 0 6 30 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1760  5 other 1 1760  
34 0 0 6 31 1746 0 0 0 2 4 this 3 1760  5 other 1 1760  
35 0 0 4 27 1732 0 0 0 1 4 this 3 1762  
36 0 0 4 28 1732 0 0 0 2 4 this 3 1763  3 out 1 1750  
37 0 0 7 54 1767 863 0 0 1 4 copy 1 1765  
38 0 0 7 54 1767 863 0 0 1 4 copy 1 1768  
39 0 0 4 55 1732 0 0 0 1 4 this 3 1767  
40 0 0 6 56 1733 0 0 0 1 4 this 3 1765  
41 0 0 6 57 1770 0 0 0 2 4 this 3 1765  1 n 1 1733  
42 0 0 6 58 1770 0 0 0 2 4 this 3 1765  1 n 1 1733  
43 0 0 6 59 1737 0 0 0 1 4 this 3 1765  
44 0 0 6 60 1737 0 0 0 3 4 this 3 1765  1 n 1 1733  5 count 1 1733  
45 0 0 6 61 1740 0 0 0 1 4 this 3 1765  
46 0 0 6 62 1740 0 0 0 1 4 this 3 1765  
47 0 0 6 63 1733 0 0 0 2 4 this 3 1765  6 param0 0 1770  
48 0 0 6 64 1737 0 0 0 1 4 this 3 1765  
49 0 0 6 65 1740 0 0 0 3 4 this 3 1765  4 view 1 1741  5 flags 1 1740  
50 0 0 4 66 1732 0 0 0 2 4 this 3 1765  4 view 1 1741  
51 0 0 6 52 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1773  5 other 1 1773  
52 0 0 6 53 1746 0 0 0 2 4 this 3 1773  5 other 1 1773  
53 0 0 4 49 1732 0 0 0 1 4 this 3 1775  
54 0 0 4 50 1732 0 0 0 2 4 this 3 1776  3 out 1 1750  
55 0 0 7 76 1780 882 0 0 1 4 copy 1 1778  
56 0 0 7 76 1780 882 0 0 1 4 copy 1 1781  
57 0 0 4 77 1732 0 0 0 1 4 this 3 1780  
58 0 0 6 78 1733 0 0 0 1 4 this 3 1778  
59 0 0 6 79 1783 0 0 0 2 4 this 3 1778  1 n 1 1733  
60 0 0 6 80 1783 0 0 0 2 4 this 3 1778  1 n 1 1733  
61 0 0 6 81 1737 0 0 0 1 4 this 3 1778  
62 0 0 6 82 1737 0 0 0 3 4 this 3 1778  1 n 1 1733  5 count 1 1733  
63 0 0 6 83 1740 0 0 0 1 4 this 3 1778  
64 0 0 6 84 1740 0 0 0 1 4 this 3 1778  
65 0 0 6 85 1733 0 0 0 2 4 this 3 1778  6 param0 0 1783  
66 0 0 6 86 1737 0 0 0 1 4 this 3 1778  
67 0 0 6 87 1740 0 0 0 3 4 this 3 1778  4 view 1 1741  5 flags 1 1740  
68 0 0 4 88 1732 0 0 0 2 4 this 3 1778  4 view 1 1741  
69 0 0 6 74 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1786  5 other 1 1786  
70 0 0 6 75 1746 0 0 0 2 4 this 3 1786  5 other 1 1786  
71 0 0 4 71 1732 0 0 0 1 4 this 3 1788  
72 0 0 4 72 1732 0 0 0 2 4 this 3 1789  3 out 1 1750  
73 0 0 7 98 1793 901 0 0 1 4 copy 1 1791  
74 0 0 7 98 1793 901 0 0 1 4 copy 1 1794  
75 0 0 4 99 1732 0 0 0 1 4 this 3 1793  
76 0 0 6 100 1733 0 0 0 1 4 this 3 1791  
77 0 0 6 101 1796 0 0 0 2 4 this 3 1791  1 n 1 1733  
78 0 0 6 102 1796 0 0 0 2 4 this 3 1791  1 n 1 1733  
79 0 0 6 103 1737 0 0 0 1 4 this 3 1791  
80 0 0 6 104 1737 0 0 0 3 4 this 3 1791  1 n 1 1733  5 count 1 1733  
81 0 0 6 105 1740 0 0 0 1 4 this 3 1791  
82 0 0 6 106 1740 0 0 0 1 4 this 3 1791  
83 0 0 6 107 1733 0 0 0 2 4 this 3 1791  6 param0 0 1796  
84 0 0 6 108 1737 0 0 0 1 4 this 3 1791  
85 0 0 6 109 1740 0 0 0 3 4 this 3 1791  4 view 1 1741  5 flags 1 1740  
86 0 0 4 110 1732 0 0 0 2 4 this 3 1791  4 view 1 1741  
87 0 0 6 96 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1799  5 other 1 1799  
88 0 0 6 97 1746 0 0 0 2 4 this 3 1799  5 other 1 1799  
89 0 0 4 93 1732 0 0 0 1 4 this 3 1801  
90 0 0 4 94 1732 0 0 0 2 4 this 3 1802  3 out 1 1750  
91 0 0 7 120 1806 920 0 0 1 4 copy 1 1804  
92 0 0 7 120 1806 920 0 0 1 4 copy 1 1807  
93 0 0 4 121 1732 0 0 0 1 4 this 3 1806  
94 0 0 6 122 1733 0 0 0 1 4 this 3 1804  
95 0 0 6 123 1809 0 0 0 2 4 this 3 1804  1 n 1 1733  
96 0 0 6 124 1809 0 0 0 2 4 this 3 1804  1 n 1 1733  
97 0 0 6 125 1737 0 0 0 1 4 this 3 1804  
98 0 0 6 126 1737 0 0 0 3 4 this 3 1804  1 n 1 1733  5 count 1 1733  
99 0 0 6 127 1740 0 0 0 1 4 this 3 1804  
100 0 0 6 128 1740 0 0 0 1 4 this 3 1804  
101 0 0 6 129 1733 0 0 0 2 4 this 3 1804  6 param0 0 1809  
102 0 0 6 130 1737 0 0 0 1 4 this 3 1804  
103 0 0 6 131 1740 0 0 0 3 4 this 3 1804  4 view 1 1741  5 flags 1 1740  
104 0 0 4 132 1732 0 0 0 2 4 this 3 1804  4 view 1 1741  
105 0 0 6 118 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1812  5 other 1 1812  
106 0 0 6 119 1746 0 0 0 2 4 this 3 1812  5 other 1 1812  
107 0 0 4 115 1732 0 0 0 1 4 this 3 1814  
108 0 0 4 116 1732 0 0 0 2 4 this 3 1815  3 out 1 1750  
109 0 0 7 142 1819 939 0 0 1 4 copy 1 1817  
110 0 0 7 142 1819 939 0 0 1 4 copy 1 1820  
111 0 0 4 143 1732 0 0 0 1 4 this 3 1819  
112 0 0 6 144 1733 0 0 0 1 4 this 3 1817  
113 0 0 6 145 1822 0 0 0 2 4 this 3 1817  1 n 1 1733  
114 0 0 6 146 1822 0 0 0 2 4 this 3 1817  1 n 1 1733  
115 0 0 6 147 1737 0 0 0 1 4 this 3 1817  
116 0 0 6 148 1737 0 0 0 3 4 this 3 1817  1 n 1 1733  5 count 1 1733  
117 0 0 6 149 1740 0 0 0 1 4 this 3 1817  
118 0 0 6 150 1740 0 0 0 1 4 this 3 1817  
119 0 0 6 151 1733 0 0 0 2 4 this 3 1817  6 param0 0 1822  
120 0 0 6 152 1737 0 0 0 1 4 this 3 1817  
121 0 0 6 153 1740 0 0 0 3 4 this 3 1817  4 view 1 1741  5 flags 1 1740  
122 0 0 4 154 1732 0 0 0 2 4 this 3 1817  4 view 1 1741  
123 0 0 6 140 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1825  5 other 1 1825  
124 0 0 6 141 1746 0 0 0 2 4 this 3 1825  5 other 1 1825  
125 0 0 4 137 1732 0 0 0 1 4 this 3 1827  
126 0 0 4 138 1732 0 0 0 2 4 this 3 1828  3 out 1 1750  
127 0 0 7 164 1832 958 0 0 1 4 copy 1 1830  
128 0 0 7 164 1832 958 0 0 1 4 copy 1 1833  
129 0 0 4 165 1732 0 0 0 1 4 this 3 1832  
130 0 0 6 166 1733 0 0 0 1 4 this 3 1830  
131 0 0 6 167 1835 0 0 0 2 4 this 3 1830  1 n 1 1733  
132 0 0 6 168 1835 0 0 0 2 4 this 3 1830  1 n 1 1733  
133 0 0 6 169 1737 0 0 0 1 4 this 3 1830  
134 0 0 6 170 1737 0 0 0 3 4 this 3 1830  1 n 1 1733  5 count 1 1733  
135 0 0 6 171 1740 0 0 0 1 4 this 3 1830  
136 0 0 6 172 1740 0 0 0 1 4 this 3 1830  
137 0 0 6 173 1733 0 0 0 2 4 this 3 1830  6 param0 0 1835  
138 0 0 6 174 1737 0 0 0 1 4 this 3 1830  
139 0 0 6 175 1740 0 0 0 3 4 this 3 1830  4 view 1 1741  5 flags 1 1740  
140 0 0 4 176 1732 0 0 0 2 4 this 3 1830  4 view 1 1741  
141 0 0 6 162 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1838  5 other 1 1838  
142 0 0 6 163 1746 0 0 0 2 4 this 3 1838  5 other 1 1838  
143 0 0 4 159 1732 0 0 0 1 4 this 3 1840  
144 0 0 4 160 1732 0 0 0 2 4 this 3 1841  3 out 1 1750  
145 0 0 7 186 1845 977 0 0 1 4 copy 1 1843  
146 0 0 7 186 1845 977 0 0 1 4 copy 1 1846  
147 0 0 4 187 1732 0 0 0 1 4 this 3 1845  
148 0 0 6 188 1733 0 0 0 1 4 this 3 1843  
149 0 0 6 189 1848 0 0 0 2 4 this 3 1843  1 n 1 1733  
150 0 0 6 190 1848 0 0 0 2 4 this 3 1843  1 n 1 1733  
151 0 0 6 191 1737 0 0 0 1 4 this 3 1843  
152 0 0 6 192 1737 0 0 0 3 4 this 3 1843  1 n 1 1733  5 count 1 1733  
153 0 0 6 193 1740 0 0 0 1 4 this 3 1843  
154 0 0 6 194 1740 0 0 0 1 4 this 3 1843  
155 0 0 6 195 1733 0 0 0 2 4 this 3 1843  6 param0 0 1848  
156 0 0 6 196 1737 0 0 0 1 4 this 3 1843  
157 0 0 6 197 1740 0 0 0 3 4 this 3 1843  4 view 1 1741  5 flags 1 1740  
158 0 0 4 198 1732 0 0 0 2 4 this 3 1843  4 view 1 1741  
159 0 0 6 184 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1851  5 other 1 1851  
160 0 0 6 185 1746 0 0 0 2 4 this 3 1851  5 other 1 1851  
161 0 0 4 181 1732 0 0 0 1 4 this 3 1853  
162 0 0 4 182 1732 0 0 0 2 4 this 3 1854  3 out 1 1750  
163 0 0 7 208 1858 996 0 0 1 4 copy 1 1856  
164 0 0 7 208 1858 996 0 0 1 4 copy 1 1859  
165 0 0 4 209 1732 0 0 0 1 4 this 3 1858  
166 0 0 6 210 1733 0 0 0 1 4 this 3 1856  
167 0 0 6 211 1861 0 0 0 2 4 this 3 1856  1 n 1 1733  
168 0 0 6 212 1861 0 0 0 2 4 this 3 1856  1 n 1 1733  
169 0 0 6 213 1737 0 0 0 1 4 this 3 1856  
170 0 0 6 214 1737 0 0 0 3 4 this 3 1856  1 n 1 1733  5 count 1 1733  
171 0 0 6 215 1740 0 0 0 1 4 this 3 1856  
172 0 0 6 216 1740 0 0 0 1 4 this 3 1856  
173 0 0 6 217 1733 0 0 0 2 4 this 3 1856  6 param0 0 1861  
174 0 0 6 218 1737 0 0 0 1 4 this 3 1856  
175 0 0 6 219 1740 0 0 0 3 4 this 3 1856  4 view 1 1741  5 flags 1 1740  
176 0 0 4 220 1732 0 0 0 2 4 this 3 1856  4 view 1 1741  
177 0 0 6 206 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1864  5 other 1 1864  
178 0 0 6 207 1746 0 0 0 2 4 this 3 1864  5 other 1 1864  
179 0 0 4 203 1732 0 0 0 1 4 this 3 1866  
180 0 0 4 204 1732 0 0 0 2 4 this 3 1867  3 out 1 1750  
181 0 0 7 230 1871 1015 0 0 1 4 copy 1 1869  
182 0 0 7 230 1871 1015 0 0 1 4 copy 1 1872  
183 0 0 4 231 1732 0 0 0 1 4 this 3 1871  
184 0 0 6 232 1733 0 0 0 1 4 this 3 1869  
185 0 0 6 233 1874 0 0 0 2 4 this 3 1869  1 n 1 1733  
186 0 0 6 234 1874 0 0 0 2 4 this 3 1869  1 n 1 1733  
187 0 0 6 235 1737 0 0 0 1 4 this 3 1869  
188 0 0 6 236 1737 0 0 0 3 4 this 3 1869  1 n 1 1733  5 count 1 1733  
189 0 0 6 237 1740 0 0 0 1 4 this 3 1869  
190 0 0 6 238 1740 0 0 0 1 4 this 3 1869  
191 0 0 6 239 1733 0 0 0 2 4 this 3 1869  6 param0 0 1874  
192 0 0 6 240 1737 0 0 0 1 4 this 3 1869  
193 0 0 6 241 1740 0 0 0 3 4 this 3 1869  4 view 1 1741  5 flags 1 1740  
194 0 0 4 242 1732 0 0 0 2 4 this 3 1869  4 view 1 1741  
195 0 0 6 228 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1877  5 other 1 1877  
196 0 0 6 229 1746 0 0 0 2 4 this 3 1877  5 other 1 1877  
197 0 0 4 225 1732 0 0 0 1 4 this 3 1879  
198 0 0 4 226 1732 0 0 0 2 4 this 3 1880  3 out 1 1750  
199 0 0 7 252 1884 1034 0 0 1 4 copy 1 1882  
200 0 0 7 252 1884 1034 0 0 1 4 copy 1 1885  
201 0 0 4 253 1732 0 0 0 1 4 this 3 1884  
202 0 0 6 254 1733 0 0 0 1 4 this 3 1882  
203 0 0 6 255 1887 0 0 0 2 4 this 3 1882  1 n 1 1733  
204 0 0 6 256 1887 0 0 0 2 4 this 3 1882  1 n 1 1733  
205 0 0 6 257 1737 0 0 0 1 4 this 3 1882  
206 0 0 6 258 1737 0 0 0 3 4 this 3 1882  1 n 1 1733  5 count 1 1733  
207 0 0 6 259 1740 0 0 0 1 4 this 3 1882  
208 0 0 6 260 1740 0 0 0 1 4 this 3 1882  
209 0 0 6 261 1733 0 0 0 2 4 this 3 1882  6 param0 0 1887  
210 0 0 6 262 1737 0 0 0 1 4 this 3 1882  
211 0 0 6 263 1740 0 0 0 3 4 this 3 1882  4 view 1 1741  5 flags 1 1740  
212 0 0 4 264 1732 0 0 0 2 4 this 3 1882  4 view 1 1741  
213 0 0 6 250 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1890  5 other 1 1890  
214 0 0 6 251 1746 0 0 0 2 4 this 3 1890  5 other 1 1890  
215 0 0 4 247 1732 0 0 0 1 4 this 3 1892  
216 0 0 4 248 1732 0 0 0 2 4 this 3 1893  3 out 1 1750  
217 0 0 7 274 1897 1053 0 0 1 4 copy 1 1895  
218 0 0 7 274 1897 1053 0 0 1 4 copy 1 1898  
219 0 0 4 275 1732 0 0 0 1 4 this 3 1897  
220 0 0 6 276 1733 0 0 0 1 4 this 3 1895  
221 0 0 6 277 1900 0 0 0 2 4 this 3 1895  1 n 1 1733  
222 0 0 6 278 1900 0 0 0 2 4 this 3 1895  1 n 1 1733  
223 0 0 6 279 1737 0 0 0 1 4 this 3 1895  
224 0 0 6 280 1737 0 0 0 3 4 this 3 1895  1 n 1 1733  5 count 1 1733  
225 0 0 6 281 1740 0 0 0 1 4 this 3 1895  
226 0 0 6 282 1740 0 0 0 1 4 this 3 1895  
227 0 0 6 283 1733 0 0 0 2 4 this 3 1895  6 param0 0 1900  
228 0 0 6 284 1737 0 0 0 1 4 this 3 1895  
229 0 0 6 285 1740 0 0 0 3 4 this 3 1895  4 view 1 1741  5 flags 1 1740  
230 0 0 4 286 1732 0 0 0 2 4 this 3 1895  4 view 1 1741  
231 0 0 6 272 1746 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1903  5 other 1 1903  
232 0 0 6 273 1746 0 0 0 2 4 this 3 1903  5 other 1 1903  
233 0 0 4 269 1732 0 0 0 1 4 this 3 1905  
234 0 0 4 270 1732 0 0 0 2 4 this 3 1906  3 out 1 1750  
235 0 0 7 289 1908 1074 0 0 1 4 copy 1 1730  
236 0 0 7 289 1908 1074 0 0 1 6 source 1 1737  
237 0 0 7 289 1908 1074 0 0 1 11 type_handle 5 1909  
238 0 0 7 290 1908 1074 0 0 2 1 n 1 1733  11 type_handle 5 1909  
239 0 0 4 291 1732 0 0 0 1 4 this 3 1908  
240 0 0 6 292 1733 0 0 0 1 4 this 3 1730  
241 0 0 4 293 1732 0 0 0 2 4 this 3 1908  1 x 1 1734  
242 0 0 4 294 1732 0 0 0 1 4 this 3 1908  
243 0 0 6 295 1734 0 0 0 2 4 this 3 1730  1 n 1 1733  
244 0 0 4 296 1732 0 0 0 3 4 this 3 1908  1 n 1 1733  5 value 1 1734  
245 0 0 6 297 1734 0 0 0 2 4 this 3 1730  1 n 1 1733  
246 0 0 4 298 1732 0 0 0 3 4 this 3 1908  1 n 1 1733  5 value 1 1734  
247 0 0 6 299 1737 0 0 0 1 4 this 3 1730  
248 0 0 4 300 1732 0 0 0 2 4 this 3 1908  4 data 1 1737  
249 0 0 6 301 1737 0 0 0 3 4 this 3 1730  1 n 1 1733  5 count 1 1733  
250 0 0 4 302 1732 0 0 0 4 4 this 3 1908  1 n 1 1733  5 count 1 1733  4 data 1 1911  
251 0 0 6 303 1740 0 0 0 1 4 this 3 1730  
252 0 0 6 304 1740 0 0 0 1 4 this 3 1730  
253 0 0 6 305 1733 0 0 0 2 4 this 3 1730  6 param0 0 1734  
254 0 0 6 306 1737 0 0 0 1 4 this 3 1730  
255 0 0 6 307 1740 0 0 0 3 4 this 3 1908  4 view 1 1741  5 flags 1 1740  
256 0 0 4 308 1732 0 0 0 2 4 this 3 1730  4 view 1 1741  
257 0 0 7 311 1912 1095 0 0 1 4 copy 1 1755  
258 0 0 7 311 1912 1095 0 0 1 6 source 1 1737  
259 0 0 7 311 1912 1095 0 0 1 11 type_handle 5 1909  
260 0 0 7 312 1912 1095 0 0 2 1 n 1 1733  11 type_handle 5 1909  
261 0 0 4 313 1732 0 0 0 1 4 this 3 1912  
262 0 0 6 314 1733 0 0 0 1 4 this 3 1755  
263 0 0 4 315 1732 0 0 0 2 4 this 3 1912  1 x 1 1757  
264 0 0 4 316 1732 0 0 0 1 4 this 3 1912  
265 0 0 6 317 1757 0 0 0 2 4 this 3 1755  1 n 1 1733  
266 0 0 4 318 1732 0 0 0 3 4 this 3 1912  1 n 1 1733  5 value 1 1757  
267 0 0 6 319 1757 0 0 0 2 4 this 3 1755  1 n 1 1733  
268 0 0 4 320 1732 0 0 0 3 4 this 3 1912  1 n 1 1733  5 value 1 1757  
269 0 0 6 321 1737 0 0 0 1 4 this 3 1755  
270 0 0 4 322 1732 0 0 0 2 4 this 3 1912  4 data 1 1737  
271 0 0 6 323 1737 0 0 0 3 4 this 3 1755  1 n 1 1733  5 count 1 1733  
272 0 0 4 324 1732 0 0 0 4 4 this 3 1912  1 n 1 1733  5 count 1 1733  4 data 1 1911  
273 0 0 6 325 1740 0 0 0 1 4 this 3 1755  
274 0 0 6 326 1740 0 0 0 1 4 this 3 1755  
275 0 0 6 327 1733 0 0 0 2 4 this 3 1755  6 param0 0 1757  
276 0 0 6 328 1737 0 0 0 1 4 this 3 1755  
277 0 0 6 329 1740 0 0 0 3 4 this 3 1912  4 view 1 1741  5 flags 1 1740  
278 0 0 4 330 1732 0 0 0 2 4 this 3 1755  4 view 1 1741  
279 0 0 7 333 1913 1116 0 0 1 4 copy 1 1768  
280 0 0 7 333 1913 1116 0 0 1 6 source 1 1737  
281 0 0 7 333 1913 1116 0 0 1 11 type_handle 5 1909  
282 0 0 7 334 1913 1116 0 0 2 1 n 1 1733  11 type_handle 5 1909  
283 0 0 4 335 1732 0 0 0 1 4 this 3 1913  
284 0 0 6 336 1733 0 0 0 1 4 this 3 1768  
285 0 0 4 337 1732 0 0 0 2 4 this 3 1913  1 x 1 1770  
286 0 0 4 338 1732 0 0 0 1 4 this 3 1913  
287 0 0 6 339 1770 0 0 0 2 4 this 3 1768  1 n 1 1733  
288 0 0 4 340 1732 0 0 0 3 4 this 3 1913  1 n 1 1733  5 value 1 1770  
289 0 0 6 341 1770 0 0 0 2 4 this 3 1768  1 n 1 1733  
290 0 0 4 342 1732 0 0 0 3 4 this 3 1913  1 n 1 1733  5 value 1 1770  
291 0 0 6 343 1737 0 0 0 1 4 this 3 1768  
292 0 0 4 344 1732 0 0 0 2 4 this 3 1913  4 data 1 1737  
293 0 0 6 345 1737 0 0 0 3 4 this 3 1768  1 n 1 1733  5 count 1 1733  
294 0 0 4 346 1732 0 0 0 4 4 this 3 1913  1 n 1 1733  5 count 1 1733  4 data 1 1911  
295 0 0 6 347 1740 0 0 0 1 4 this 3 1768  
296 0 0 6 348 1740 0 0 0 1 4 this 3 1768  
297 0 0 6 349 1733 0 0 0 2 4 this 3 1768  6 param0 0 1770  
298 0 0 6 350 1737 0 0 0 1 4 this 3 1768  
299 0 0 6 351 1740 0 0 0 3 4 this 3 1913  4 view 1 1741  5 flags 1 1740  
300 0 0 4 352 1732 0 0 0 2 4 this 3 1768  4 view 1 1741  
301 0 0 7 355 1914 1137 0 0 1 4 copy 1 1781  
302 0 0 7 355 1914 1137 0 0 1 6 source 1 1737  
303 0 0 7 355 1914 1137 0 0 1 11 type_handle 5 1909  
304 0 0 7 356 1914 1137 0 0 2 1 n 1 1733  11 type_handle 5 1909  
305 0 0 4 357 1732 0 0 0 1 4 this 3 1914  
306 0 0 6 358 1733 0 0 0 1 4 this 3 1781  
307 0 0 4 359 1732 0 0 0 2 4 this 3 1914  1 x 1 1783  
308 0 0 4 360 1732 0 0 0 1 4 this 3 1914  
309 0 0 6 361 1783 0 0 0 2 4 this 3 1781  1 n 1 1733  
310 0 0 4 362 1732 0 0 0 3 4 this 3 1914  1 n 1 1733  5 value 1 1783  
311 0 0 6 363 1783 0 0 0 2 4 this 3 1781  1 n 1 1733  
312 0 0 4 364 1732 0 0 0 3 4 this 3 1914  1 n 1 1733  5 value 1 1783  
313 0 0 6 365 1737 0 0 0 1 4 this 3 1781  
314 0 0 4 366 1732 0 0 0 2 4 this 3 1914  4 data 1 1737  
315 0 0 6 367 1737 0 0 0 3 4 this 3 1781  1 n 1 1733  5 count 1 1733  
316 0 0 4 368 1732 0 0 0 4 4 this 3 1914  1 n 1 1733  5 count 1 1733  4 data 1 1911  
317 0 0 6 369 1740 0 0 0 1 4 this 3 1781  
318 0 0 6 370 1740 0 0 0 1 4 this 3 1781  
319 0 0 6 371 1733 0 0 0 2 4 this 3 1781  6 param0 0 1783  
320 0 0 6 372 1737 0 0 0 1 4 this 3 1781  
321 0 0 6 373 1740 0 0 0 3 4 this 3 1914  4 view 1 1741  5 flags 1 1740  
322 0 0 4 374 1732 0 0 0 2 4 this 3 1781  4 view 1 1741  
323 0 0 7 377 1915 1158 0 0 1 4 copy 1 1794  
324 0 0 7 377 1915 1158 0 0 1 6 source 1 1737  
325 0 0 7 377 1915 1158 0 0 1 11 type_handle 5 1909  
326 0 0 7 378 1915 1158 0 0 2 1 n 1 1733  11 type_handle 5 1909  
327 0 0 4 379 1732 0 0 0 1 4 this 3 1915  
328 0 0 6 380 1733 0 0 0 1 4 this 3 1794  
329 0 0 4 381 1732 0 0 0 2 4 this 3 1915  1 x 1 1796  
330 0 0 4 382 1732 0 0 0 1 4 this 3 1915  
331 0 0 6 383 1796 0 0 0 2 4 this 3 1794  1 n 1 1733  
332 0 0 4 384 1732 0 0 0 3 4 this 3 1915  1 n 1 1733  5 value 1 1796  
333 0 0 6 385 1796 0 0 0 2 4 this 3 1794  1 n 1 1733  
334 0 0 4 386 1732 0 0 0 3 4 this 3 1915  1 n 1 1733  5 value 1 1796  
335 0 0 6 387 1737 0 0 0 1 4 this 3 1794  
336 0 0 4 388 1732 0 0 0 2 4 this 3 1915  4 data 1 1737  
337 0 0 6 389 1737 0 0 0 3 4 this 3 1794  1 n 1 1733  5 count 1 1733  
338 0 0 4 390 1732 0 0 0 4 4 this 3 1915  1 n 1 1733  5 count 1 1733  4 data 1 1911  
339 0 0 6 391 1740 0 0 0 1 4 this 3 1794  
340 0 0 6 392 1740 0 0 0 1 4 this 3 1794  
341 0 0 6 393 1733 0 0 0 2 4 this 3 1794  6 param0 0 1796  
342 0 0 6 394 1737 0 0 0 1 4 this 3 1794  
343 0 0 6 395 1740 0 0 0 3 4 this 3 1915  4 view 1 1741  5 flags 1 1740  
344 0 0 4 396 1732 0 0 0 2 4 this 3 1794  4 view 1 1741  
345 0 0 7 399 1916 1179 0 0 1 4 copy 1 1807  
346 0 0 7 399 1916 1179 0 0 1 6 source 1 1737  
347 0 0 7 399 1916 1179 0 0 1 11 type_handle 5 1909  
348 0 0 7 400 1916 1179 0 0 2 1 n 1 1733  11 type_handle 5 1909  
349 0 0 4 401 1732 0 0 0 1 4 this 3 1916  
350 0 0 6 402 1733 0 0 0 1 4 this 3 1807  
351 0 0 4 403 1732 0 0 0 2 4 this 3 1916  1 x 1 1809  
352 0 0 4 404 1732 0 0 0 1 4 this 3 1916  
353 0 0 6 405 1809 0 0 0 2 4 this 3 1807  1 n 1 1733  
354 0 0 4 406 1732 0 0 0 3 4 this 3 1916  1 n 1 1733  5 value 1 1809  
355 0 0 6 407 1809 0 0 0 2 4 this 3 1807  1 n 1 1733  
356 0 0 4 408 1732 0 0 0 3 4 this 3 1916  1 n 1 1733  5 value 1 1809  
357 0 0 6 409 1737 0 0 0 1 4 this 3 1807  
358 0 0 4 410 1732 0 0 0 2 4 this 3 1916  4 data 1 1737  
359 0 0 6 411 1737 0 0 0 3 4 this 3 1807  1 n 1 1733  5 count 1 1733  
360 0 0 4 412 1732 0 0 0 4 4 this 3 1916  1 n 1 1733  5 count 1 1733  4 data 1 1911  
361 0 0 6 413 1740 0 0 0 1 4 this 3 1807  
362 0 0 6 414 1740 0 0 0 1 4 this 3 1807  
363 0 0 6 415 1733 0 0 0 2 4 this 3 1807  6 param0 0 1809  
364 0 0 6 416 1737 0 0 0 1 4 this 3 1807  
365 0 0 6 417 1740 0 0 0 3 4 this 3 1916  4 view 1 1741  5 flags 1 1740  
366 0 0 4 418 1732 0 0 0 2 4 this 3 1807  4 view 1 1741  
367 0 0 7 421 1917 1200 0 0 1 4 copy 1 1820  
368 0 0 7 421 1917 1200 0 0 1 6 source 1 1737  
369 0 0 7 421 1917 1200 0 0 1 11 type_handle 5 1909  
370 0 0 7 422 1917 1200 0 0 2 1 n 1 1733  11 type_handle 5 1909  
371 0 0 4 423 1732 0 0 0 1 4 this 3 1917  
372 0 0 6 424 1733 0 0 0 1 4 this 3 1820  
373 0 0 4 425 1732 0 0 0 2 4 this 3 1917  1 x 1 1822  
374 0 0 4 426 1732 0 0 0 1 4 this 3 1917  
375 0 0 6 427 1822 0 0 0 2 4 this 3 1820  1 n 1 1733  
376 0 0 4 428 1732 0 0 0 3 4 this 3 1917  1 n 1 1733  5 value 1 1822  
377 0 0 6 429 1822 0 0 0 2 4 this 3 1820  1 n 1 1733  
378 0 0 4 430 1732 0 0 0 3 4 this 3 1917  1 n 1 1733  5 value 1 1822  
379 0 0 6 431 1737 0 0 0 1 4 this 3 1820  
380 0 0 4 432 1732 0 0 0 2 4 this 3 1917  4 data 1 1737  
381 0 0 6 433 1737 0 0 0 3 4 this 3 1820  1 n 1 1733  5 count 1 1733  
382 0 0 4 434 1732 0 0 0 4 4 this 3 1917  1 n 1 1733  5 count 1 1733  4 data 1 1911  
383 0 0 6 435 1740 0 0 0 1 4 this 3 1820  
384 0 0 6 436 1740 0 0 0 1 4 this 3 1820  
385 0 0 6 437 1733 0 0 0 2 4 this 3 1820  6 param0 0 1822  
386 0 0 6 438 1737 0 0 0 1 4 this 3 1820  
387 0 0 6 439 1740 0 0 0 3 4 this 3 1917  4 view 1 1741  5 flags 1 1740  
388 0 0 4 440 1732 0 0 0 2 4 this 3 1820  4 view 1 1741  
389 0 0 7 443 1918 1221 0 0 1 4 copy 1 1833  
390 0 0 7 443 1918 1221 0 0 1 6 source 1 1737  
391 0 0 7 443 1918 1221 0 0 1 11 type_handle 5 1909  
392 0 0 7 444 1918 1221 0 0 2 1 n 1 1733  11 type_handle 5 1909  
393 0 0 4 445 1732 0 0 0 1 4 this 3 1918  
394 0 0 6 446 1733 0 0 0 1 4 this 3 1833  
395 0 0 4 447 1732 0 0 0 2 4 this 3 1918  1 x 1 1835  
396 0 0 4 448 1732 0 0 0 1 4 this 3 1918  
397 0 0 6 449 1835 0 0 0 2 4 this 3 1833  1 n 1 1733  
398 0 0 4 450 1732 0 0 0 3 4 this 3 1918  1 n 1 1733  5 value 1 1835  
399 0 0 6 451 1835 0 0 0 2 4 this 3 1833  1 n 1 1733  
400 0 0 4 452 1732 0 0 0 3 4 this 3 1918  1 n 1 1733  5 value 1 1835  
401 0 0 6 453 1737 0 0 0 1 4 this 3 1833  
402 0 0 4 454 1732 0 0 0 2 4 this 3 1918  4 data 1 1737  
403 0 0 6 455 1737 0 0 0 3 4 this 3 1833  1 n 1 1733  5 count 1 1733  
404 0 0 4 456 1732 0 0 0 4 4 this 3 1918  1 n 1 1733  5 count 1 1733  4 data 1 1911  
405 0 0 6 457 1740 0 0 0 1 4 this 3 1833  
406 0 0 6 458 1740 0 0 0 1 4 this 3 1833  
407 0 0 6 459 1733 0 0 0 2 4 this 3 1833  6 param0 0 1835  
408 0 0 6 460 1737 0 0 0 1 4 this 3 1833  
409 0 0 6 461 1740 0 0 0 3 4 this 3 1918  4 view 1 1741  5 flags 1 1740  
410 0 0 4 462 1732 0 0 0 2 4 this 3 1833  4 view 1 1741  
411 0 0 7 465 1919 1242 0 0 1 4 copy 1 1846  
412 0 0 7 465 1919 1242 0 0 1 6 source 1 1737  
413 0 0 7 465 1919 1242 0 0 1 11 type_handle 5 1909  
414 0 0 7 466 1919 1242 0 0 2 1 n 1 1733  11 type_handle 5 1909  
415 0 0 4 467 1732 0 0 0 1 4 this 3 1919  
416 0 0 6 468 1733 0 0 0 1 4 this 3 1846  
417 0 0 4 469 1732 0 0 0 2 4 this 3 1919  1 x 1 1848  
418 0 0 4 470 1732 0 0 0 1 4 this 3 1919  
419 0 0 6 471 1848 0 0 0 2 4 this 3 1846  1 n 1 1733  
420 0 0 4 472 1732 0 0 0 3 4 this 3 1919  1 n 1 1733  5 value 1 1848  
421 0 0 6 473 1848 0 0 0 2 4 this 3 1846  1 n 1 1733  
422 0 0 4 474 1732 0 0 0 3 4 this 3 1919  1 n 1 1733  5 value 1 1848  
423 0 0 6 475 1737 0 0 0 1 4 this 3 1846  
424 0 0 4 476 1732 0 0 0 2 4 this 3 1919  4 data 1 1737  
425 0 0 6 477 1737 0 0 0 3 4 this 3 1846  1 n 1 1733  5 count 1 1733  
426 0 0 4 478 1732 0 0 0 4 4 this 3 1919  1 n 1 1733  5 count 1 1733  4 data 1 1911  
427 0 0 6 479 1740 0 0 0 1 4 this 3 1846  
428 0 0 6 480 1740 0 0 0 1 4 this 3 1846  
429 0 0 6 481 1733 0 0 0 2 4 this 3 1846  6 param0 0 1848  
430 0 0 6 482 1737 0 0 0 1 4 this 3 1846  
431 0 0 6 483 1740 0 0 0 3 4 this 3 1919  4 view 1 1741  5 flags 1 1740  
432 0 0 4 484 1732 0 0 0 2 4 this 3 1846  4 view 1 1741  
433 0 0 7 487 1920 1263 0 0 1 4 copy 1 1859  
434 0 0 7 487 1920 1263 0 0 1 6 source 1 1737  
435 0 0 7 487 1920 1263 0 0 1 11 type_handle 5 1909  
436 0 0 7 488 1920 1263 0 0 2 1 n 1 1733  11 type_handle 5 1909  
437 0 0 4 489 1732 0 0 0 1 4 this 3 1920  
438 0 0 6 490 1733 0 0 0 1 4 this 3 1859  
439 0 0 4 491 1732 0 0 0 2 4 this 3 1920  1 x 1 1861  
440 0 0 4 492 1732 0 0 0 1 4 this 3 1920  
441 0 0 6 493 1861 0 0 0 2 4 this 3 1859  1 n 1 1733  
442 0 0 4 494 1732 0 0 0 3 4 this 3 1920  1 n 1 1733  5 value 1 1861  
443 0 0 6 495 1861 0 0 0 2 4 this 3 1859  1 n 1 1733  
444 0 0 4 496 1732 0 0 0 3 4 this 3 1920  1 n 1 1733  5 value 1 1861  
445 0 0 6 497 1737 0 0 0 1 4 this 3 1859  
446 0 0 4 498 1732 0 0 0 2 4 this 3 1920  4 data 1 1737  
447 0 0 6 499 1737 0 0 0 3 4 this 3 1859  1 n 1 1733  5 count 1 1733  
448 0 0 4 500 1732 0 0 0 4 4 this 3 1920  1 n 1 1733  5 count 1 1733  4 data 1 1911  
449 0 0 6 501 1740 0 0 0 1 4 this 3 1859  
450 0 0 6 502 1740 0 0 0 1 4 this 3 1859  
451 0 0 6 503 1733 0 0 0 2 4 this 3 1859  6 param0 0 1861  
452 0 0 6 504 1737 0 0 0 1 4 this 3 1859  
453 0 0 6 505 1740 0 0 0 3 4 this 3 1920  4 view 1 1741  5 flags 1 1740  
454 0 0 4 506 1732 0 0 0 2 4 this 3 1859  4 view 1 1741  
455 0 0 7 509 1921 1284 0 0 1 4 copy 1 1872  
456 0 0 7 509 1921 1284 0 0 1 6 source 1 1737  
457 0 0 7 509 1921 1284 0 0 1 11 type_handle 5 1909  
458 0 0 7 510 1921 1284 0 0 2 1 n 1 1733  11 type_handle 5 1909  
459 0 0 4 511 1732 0 0 0 1 4 this 3 1921  
460 0 0 6 512 1733 0 0 0 1 4 this 3 1872  
461 0 0 4 513 1732 0 0 0 2 4 this 3 1921  1 x 1 1874  
462 0 0 4 514 1732 0 0 0 1 4 this 3 1921  
463 0 0 6 515 1874 0 0 0 2 4 this 3 1872  1 n 1 1733  
464 0 0 4 516 1732 0 0 0 3 4 this 3 1921  1 n 1 1733  5 value 1 1874  
465 0 0 6 517 1874 0 0 0 2 4 this 3 1872  1 n 1 1733  
466 0 0 4 518 1732 0 0 0 3 4 this 3 1921  1 n 1 1733  5 value 1 1874  
467 0 0 6 519 1737 0 0 0 1 4 this 3 1872  
468 0 0 4 520 1732 0 0 0 2 4 this 3 1921  4 data 1 1737  
469 0 0 6 521 1737 0 0 0 3 4 this 3 1872  1 n 1 1733  5 count 1 1733  
470 0 0 4 522 1732 0 0 0 4 4 this 3 1921  1 n 1 1733  5 count 1 1733  4 data 1 1911  
471 0 0 6 523 1740 0 0 0 1 4 this 3 1872  
472 0 0 6 524 1740 0 0 0 1 4 this 3 1872  
473 0 0 6 525 1733 0 0 0 2 4 this 3 1872  6 param0 0 1874  
474 0 0 6 526 1737 0 0 0 1 4 this 3 1872  
475 0 0 6 527 1740 0 0 0 3 4 this 3 1921  4 view 1 1741  5 flags 1 1740  
476 0 0 4 528 1732 0 0 0 2 4 this 3 1872  4 view 1 1741  
477 0 0 7 531 1922 1305 0 0 1 4 copy 1 1885  
478 0 0 7 531 1922 1305 0 0 1 6 source 1 1737  
479 0 0 7 531 1922 1305 0 0 1 11 type_handle 5 1909  
480 0 0 7 532 1922 1305 0 0 2 1 n 1 1733  11 type_handle 5 1909  
481 0 0 4 533 1732 0 0 0 1 4 this 3 1922  
482 0 0 6 534 1733 0 0 0 1 4 this 3 1885  
483 0 0 4 535 1732 0 0 0 2 4 this 3 1922  1 x 1 1887  
484 0 0 4 536 1732 0 0 0 1 4 this 3 1922  
485 0 0 6 537 1887 0 0 0 2 4 this 3 1885  1 n 1 1733  
486 0 0 4 538 1732 0 0 0 3 4 this 3 1922  1 n 1 1733  5 value 1 1887  
487 0 0 6 539 1887 0 0 0 2 4 this 3 1885  1 n 1 1733  
488 0 0 4 540 1732 0 0 0 3 4 this 3 1922  1 n 1 1733  5 value 1 1887  
489 0 0 6 541 1737 0 0 0 1 4 this 3 1885  
490 0 0 4 542 1732 0 0 0 2 4 this 3 1922  4 data 1 1737  
491 0 0 6 543 1737 0 0 0 3 4 this 3 1885  1 n 1 1733  5 count 1 1733  
492 0 0 4 544 1732 0 0 0 4 4 this 3 1922  1 n 1 1733  5 count 1 1733  4 data 1 1911  
493 0 0 6 545 1740 0 0 0 1 4 this 3 1885  
494 0 0 6 546 1740 0 0 0 1 4 this 3 1885  
495 0 0 6 547 1733 0 0 0 2 4 this 3 1885  6 param0 0 1887  
496 0 0 6 548 1737 0 0 0 1 4 this 3 1885  
497 0 0 6 549 1740 0 0 0 3 4 this 3 1922  4 view 1 1741  5 flags 1 1740  
498 0 0 4 550 1732 0 0 0 2 4 this 3 1885  4 view 1 1741  
499 0 0 7 553 1923 1326 0 0 1 4 copy 1 1898  
500 0 0 7 553 1923 1326 0 0 1 6 source 1 1737  
501 0 0 7 553 1923 1326 0 0 1 11 type_handle 5 1909  
502 0 0 7 554 1923 1326 0 0 2 1 n 1 1733  11 type_handle 5 1909  
503 0 0 4 555 1732 0 0 0 1 4 this 3 1923  
504 0 0 6 556 1733 0 0 0 1 4 this 3 1898  
505 0 0 4 557 1732 0 0 0 2 4 this 3 1923  1 x 1 1900  
506 0 0 4 558 1732 0 0 0 1 4 this 3 1923  
507 0 0 6 559 1900 0 0 0 2 4 this 3 1898  1 n 1 1733  
508 0 0 4 560 1732 0 0 0 3 4 this 3 1923  1 n 1 1733  5 value 1 1900  
509 0 0 6 561 1900 0 0 0 2 4 this 3 1898  1 n 1 1733  
510 0 0 4 562 1732 0 0 0 3 4 this 3 1923  1 n 1 1733  5 value 1 1900  
511 0 0 6 563 1737 0 0 0 1 4 this 3 1898  
512 0 0 4 564 1732 0 0 0 2 4 this 3 1923  4 data 1 1737  
513 0 0 6 565 1737 0 0 0 3 4 this 3 1898  1 n 1 1733  5 count 1 1733  
514 0 0 4 566 1732 0 0 0 4 4 this 3 1923  1 n 1 1733  5 count 1 1733  4 data 1 1911  
515 0 0 6 567 1740 0 0 0 1 4 this 3 1898  
516 0 0 6 568 1740 0 0 0 1 4 this 3 1898  
517 0 0 6 569 1733 0 0 0 2 4 this 3 1898  6 param0 0 1900  
518 0 0 6 570 1737 0 0 0 1 4 this 3 1898  
519 0 0 6 571 1740 0 0 0 3 4 this 3 1923  4 view 1 1741  5 flags 1 1740  
520 0 0 4 572 1732 0 0 0 2 4 this 3 1898  4 view 1 1741  
521 0 0 7 576 1926 1336 0 0 1 4 this 3 1924  
522 0 0 6 577 1746 0 0 253 /**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */ 1 4 this 3 1924  
523 0 0 6 578 1746 0 0 536 /**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */ 1 4 this 3 1924  
524 0 0 4 579 1732 0 0 135 /**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */ 1 4 this 3 1926  
525 0 0 6 580 1746 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1926  3 vol 1 1924  
526 0 0 6 582 1740 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1924  3 vol 1 1924  
527 0 0 4 583 1732 0 0 0 2 4 this 3 1924  3 out 1 1750  
528 0 0 4 584 1732 0 0 10 /**
 *
 */ 3 4 this 3 1924  3 out 1 1750  12 indent_level 5 1740  
529 0 0 7 586 1909 0 0 0 0 
530 0 0 6 589 1746 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1927  3 vol 1 1652  
531 0 0 6 589 1746 0 0 71 /**
 * Increases the size of the volume to include the given point.
 */ 2 4 this 3 1927  5 point 1 1928  
532 0 0 6 590 1740 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1652  3 vol 1 1652  
533 0 0 6 590 1740 0 0 127 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */ 2 4 this 3 1652  5 point 1 1928  
534 0 0 6 590 1740 0 0 134 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */ 3 4 this 3 1652  1 a 1 1928  1 b 1 1928  
535 0 0 7 591 1930 0 0 0 1 4 this 3 1652  
536 0 0 4 592 1732 0 0 0 2 4 this 3 1927  3 mat 1 1931  
537 0 0 7 593 1909 0 0 0 0 
538 0 0 7 596 1930 0 0 0 1 4 this 3 1935  
539 0 0 7 597 1930 0 0 0 1 4 this 3 1935  
540 0 0 6 598 1626 0 0 10 /**
 *
 */ 1 4 this 3 1935  
541 0 0 7 606 1909 0 0 0 0 
542 0 0 7 609 1937 1350 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
543 0 0 7 609 1937 1350 0 10 /**
 *
 */ 1 4 copy 1 1938  
544 0 0 7 609 1937 1350 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1822  1 b 1 1822  1 c 1 1822  
545 0 0 6 610 1937 0 0 0 2 4 this 3 1937  4 copy 1 1938  
546 0 0 4 612 1732 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1937  3 mat 1 1940  
547 0 0 6 613 1822 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1938  
548 0 0 6 614 1822 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1938  
549 0 0 6 615 1822 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1938  
550 0 0 7 616 1942 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1938  1 t 1 1627  
551 0 0 4 617 1732 0 0 10 /**
 *
 */ 2 4 this 3 1938  3 out 1 1750  
552 0 0 4 618 1732 0 0 10 /**
 *
 */ 3 4 this 3 1938  3 out 1 1750  12 indent_level 5 1740  
553 0 0 4 619 1732 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1938  11 destination 1 1943  
554 0 0 4 620 1732 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1937  6 source 1 1945  
555 0 0 4 621 1732 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1938  11 destination 1 1943  
556 0 0 4 622 1732 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1937  6 source 1 1945  
557 0 0 7 624 1947 1364 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
558 0 0 7 624 1947 1364 0 10 /**
 *
 */ 1 4 copy 1 1948  
559 0 0 7 624 1947 1364 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1809  1 b 1 1809  1 c 1 1809  
560 0 0 6 625 1947 0 0 0 2 4 this 3 1947  4 copy 1 1948  
561 0 0 4 627 1732 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1947  3 mat 1 1950  
562 0 0 6 628 1809 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1948  
563 0 0 6 629 1809 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1948  
564 0 0 6 630 1809 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1948  
565 0 0 7 631 1954 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1948  1 t 1 1953  
566 0 0 4 632 1732 0 0 10 /**
 *
 */ 2 4 this 3 1948  3 out 1 1750  
567 0 0 4 633 1732 0 0 10 /**
 *
 */ 3 4 this 3 1948  3 out 1 1750  12 indent_level 5 1740  
568 0 0 4 634 1732 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1948  11 destination 1 1943  
569 0 0 4 635 1732 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1947  6 source 1 1945  
570 0 0 4 636 1732 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1948  11 destination 1 1943  
571 0 0 4 637 1732 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1947  6 source 1 1945  
572 0 0 7 641 1955 1395 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
573 0 0 7 641 1955 1395 0 0 1 6 param0 0 1956  
574 0 0 7 641 1955 1395 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1958  1 b 1 1958  1 c 1 1958  
575 0 0 7 641 1955 1395 0 10 /**
 *
 */ 1 4 copy 1 1960  
576 0 0 7 641 1955 1395 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1962  5 point 1 1958  
577 0 0 7 641 1955 1395 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1627  1 b 1 1627  1 c 1 1627  1 d 1 1627  
578 0 0 7 642 1955 1395 0 0 2 4 this 3 1956  3 mat 1 1757  
579 0 0 7 642 1955 1395 0 0 2 4 this 3 1956  3 mat 1 1940  
580 0 0 6 643 1955 0 0 0 2 4 this 3 1955  3 mat 1 1940  
581 0 0 4 644 1732 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1955  3 mat 1 1940  
582 0 0 7 645 1955 1395 0 0 1 4 this 3 1956  
583 0 0 7 646 1965 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1956  
584 0 0 7 647 1966 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1956  
585 0 0 7 648 1942 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1956  
586 0 0 6 649 1627 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1956  5 point 1 1958  
587 0 0 6 650 1746 0 0 139 /**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */ 1 4 this 3 1955  
588 0 0 7 651 1955 1395 0 155 /**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */ 1 4 this 3 1956  
589 0 0 7 652 1942 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1956  5 point 1 1958  
590 0 0 4 653 1732 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1955  
591 0 0 6 654 1746 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1956  18 intersection_point 1 1942  2 p1 1 1958  2 p2 1 1958  
592 0 0 6 655 1746 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1956  4 from 1 1942  5 delta 1 1966  5 other 1 1956  
593 0 0 4 657 1732 0 0 10 /**
 *
 */ 2 4 this 3 1956  3 out 1 1750  
594 0 0 4 658 1732 0 0 10 /**
 *
 */ 3 4 this 3 1956  3 out 1 1750  12 indent_level 5 1740  
595 0 0 6 659 1911 0 0 58 /**
 * Returns a string representation of this LPlane.
 */ 1 4 this 3 1956  
596 0 0 7 663 1967 1415 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
597 0 0 7 663 1967 1415 0 0 1 6 param0 0 1968  
598 0 0 7 663 1967 1415 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1969  1 b 1 1969  1 c 1 1969  
599 0 0 7 663 1967 1415 0 10 /**
 *
 */ 1 4 copy 1 1970  
600 0 0 7 663 1967 1415 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1972  5 point 1 1969  
601 0 0 7 663 1967 1415 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1953  1 b 1 1953  1 c 1 1953  1 d 1 1953  
602 0 0 7 664 1967 1415 0 0 2 4 this 3 1968  3 mat 1 1734  
603 0 0 7 664 1967 1415 0 0 2 4 this 3 1968  3 mat 1 1950  
604 0 0 6 665 1967 0 0 0 2 4 this 3 1967  3 mat 1 1950  
605 0 0 4 666 1732 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1967  3 mat 1 1950  
606 0 0 7 667 1967 1415 0 0 1 4 this 3 1968  
607 0 0 7 668 1975 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1968  
608 0 0 7 669 1976 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1968  
609 0 0 7 670 1954 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1968  
610 0 0 6 671 1953 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1968  5 point 1 1969  
611 0 0 6 672 1746 0 0 139 /**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */ 1 4 this 3 1967  
612 0 0 7 673 1967 1415 0 155 /**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */ 1 4 this 3 1968  
613 0 0 7 674 1954 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1968  5 point 1 1969  
614 0 0 4 675 1732 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1967  
615 0 0 6 676 1746 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1968  18 intersection_point 1 1954  2 p1 1 1969  2 p2 1 1969  
616 0 0 6 677 1746 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1968  4 from 1 1954  5 delta 1 1976  5 other 1 1968  
617 0 0 4 679 1732 0 0 10 /**
 *
 */ 2 4 this 3 1968  3 out 1 1750  
618 0 0 4 680 1732 0 0 10 /**
 *
 */ 3 4 this 3 1968  3 out 1 1750  12 indent_level 5 1740  
619 0 0 6 681 1911 0 0 58 /**
 * Returns a string representation of this LPlane.
 */ 1 4 this 3 1968  
620 0 0 7 688 1977 1426 0 42 /**
 * Constructs an empty box object.
 */ 0 
621 0 0 7 688 1977 1426 0 44 /**
 * Constructs a specific box object.
 */ 2 3 min 1 1928  3 max 1 1928  
622 0 0 4 689 1732 0 0 0 2 4 this 3 1977  4 size 1 1978  
623 0 0 6 692 1740 0 0 68 /**
 * Returns 8: the number of vertices of a rectangular solid.
 */ 1 4 this 3 1979  
624 0 0 7 693 1930 0 0 59 /**
 * Returns the nth vertex of the rectangular solid.
 */ 2 4 this 3 1979  1 n 1 1740  
625 0 0 6 695 1740 0 0 65 /**
 * Returns 6: the number of faces of a rectangular solid.
 */ 1 4 this 3 1979  
626 0 0 7 696 1981 0 0 57 /**
 * Returns the nth face of the rectangular solid.
 */ 2 4 this 3 1979  1 n 1 1740  
627 0 0 4 700 1732 0 0 63 /**
 * Sets the min and max point of the rectangular solid.
 */ 3 4 this 3 1977  3 min 1 1928  3 max 1 1928  
628 0 0 7 701 1909 0 0 0 0 
629 0 0 7 704 1982 1434 0 10 /**
 *
 */ 0 
630 0 0 7 704 1982 1434 0 0 1 6 param0 0 1983  
631 0 0 4 705 1732 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1982  
632 0 0 4 705 1732 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1982  1 l 1 1627  1 r 1 1627  1 t 1 1627  1 b 1 1627  
633 0 0 4 706 1732 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1982  5 fnear 1 1627  4 ffar 1 1627  
634 0 0 4 706 1732 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1982  5 fnear 1 1627  4 ffar 1 1627  1 l 1 1627  1 r 1 1627  1 t 1 1627  1 b 1 1627  
635 0 0 4 707 1732 0 0 79 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees)
 */ 5 4 this 3 1982  4 xfov 1 1627  6 aspect 1 1627  5 fnear 1 1627  4 ffar 1 1627  
636 0 0 4 708 1732 0 0 10 /**
 *
 */ 5 4 this 3 1982  4 yfov 1 1627  6 aspect 1 1627  5 fnear 1 1627  4 ffar 1 1627  
637 0 0 4 709 1732 0 0 10 /**
 *
 */ 5 4 this 3 1982  4 xfov 1 1627  4 yfov 1 1627  5 fnear 1 1627  4 ffar 1 1627  
638 0 0 7 713 1985 1442 0 10 /**
 *
 */ 0 
639 0 0 7 713 1985 1442 0 0 1 6 param0 0 1986  
640 0 0 4 714 1732 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1985  
641 0 0 4 714 1732 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1985  1 l 1 1953  1 r 1 1953  1 t 1 1953  1 b 1 1953  
642 0 0 4 715 1732 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1985  5 fnear 1 1953  4 ffar 1 1953  
643 0 0 4 715 1732 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1985  5 fnear 1 1953  4 ffar 1 1953  1 l 1 1953  1 r 1 1953  1 t 1 1953  1 b 1 1953  
644 0 0 4 716 1732 0 0 79 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees)
 */ 5 4 this 3 1985  4 xfov 1 1953  6 aspect 1 1953  5 fnear 1 1953  4 ffar 1 1953  
645 0 0 4 717 1732 0 0 10 /**
 *
 */ 5 4 this 3 1985  4 yfov 1 1953  6 aspect 1 1953  5 fnear 1 1953  4 ffar 1 1953  
646 0 0 4 718 1732 0 0 10 /**
 *
 */ 5 4 this 3 1985  4 xfov 1 1953  4 yfov 1 1953  5 fnear 1 1953  4 ffar 1 1953  
647 0 0 7 726 1991 1449 0 10 /**
 *
 */ 3 7 frustum 1 1988  8 is_ortho 1 1746  2 cs 5 1990  
648 0 0 7 726 1991 1449 0 10 /**
 *
 */ 8 3 fll 1 1928  3 flr 1 1928  3 fur 1 1928  3 ful 1 1928  3 nll 1 1928  3 nlr 1 1928  3 nur 1 1928  3 nul 1 1928  
649 0 0 6 727 1740 0 0 61 /**
 * Returns 8: the number of vertices of a hexahedron.
 */ 1 4 this 3 1992  
650 0 0 7 728 1930 0 0 52 /**
 * Returns the nth vertex of the hexahedron.
 */ 2 4 this 3 1992  1 n 1 1740  
651 0 0 6 730 1740 0 0 58 /**
 * Returns 6: the number of faces of a hexahedron.
 */ 1 4 this 3 1992  
652 0 0 7 731 1981 0 0 50 /**
 * Returns the nth face of the hexahedron.
 */ 2 4 this 3 1992  1 n 1 1740  
653 0 0 7 735 1909 0 0 0 0 
654 0 0 7 738 1994 1457 0 10 /**
 *
 */ 2 1 a 1 1928  1 b 1 1928  
655 0 0 4 739 1732 0 0 0 2 4 this 3 1994  4 size 1 1978  
656 0 0 6 742 1928 0 0 57 /**
 * Returns the first point that defines the line.
 */ 1 4 this 3 1995  
657 0 0 7 743 1930 0 0 58 /**
 * Returns the second point that defines the line.
 */ 1 4 this 3 1995  
658 0 0 7 744 1909 0 0 0 0 
659 0 0 7 747 1997 1464 0 65 /**
 * Constructs an empty "plane" that has no intersections.
 */ 0 
660 0 0 7 747 1997 1464 0 10 /**
 *
 */ 1 5 plane 1 1998  
661 0 0 4 748 1732 0 0 0 2 4 this 3 1997  4 size 1 1978  
662 0 0 6 751 1998 0 0 10 /**
 *
 */ 1 4 this 3 1999  
663 0 0 7 754 1909 0 0 0 0 
664 0 0 7 757 2001 1474 0 38 /**
 * Constructs an empty sphere.
 */ 0 
665 0 0 7 757 2001 1474 0 40 /**
 * Constructs a specific sphere.
 */ 2 6 center 1 1928  6 radius 1 1626  
666 0 0 4 758 1732 0 0 0 2 4 this 3 2001  4 size 1 1978  
667 0 0 7 761 1930 0 0 10 /**
 *
 */ 1 4 this 3 2002  
668 0 0 6 762 1626 0 0 10 /**
 *
 */ 1 4 this 3 2002  
669 0 0 4 763 1732 0 0 47 /**
 * Sets the center point of the sphere.
 */ 2 4 this 3 2001  6 center 1 1928  
670 0 0 4 764 1732 0 0 41 /**
 * Sets the radius of the sphere.
 */ 2 4 this 3 2001  6 radius 1 1626  
671 0 0 7 767 1909 0 0 0 0 
672 0 0 7 770 2004 1484 0 44 /**
 * Constructs an empty intersection.
 */ 0 
673 0 0 4 771 1732 0 0 0 2 4 this 3 2004  4 size 1 1978  
674 0 0 6 774 1740 0 0 64 /**
 * Returns the number of components in the intersection.
 */ 1 4 this 3 2005  
675 0 0 7 775 1652 0 0 57 /**
 * Returns the nth component in the intersection.
 */ 2 4 this 3 2005  1 n 1 1740  
676 0 0 4 780 1732 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 2004  
677 0 0 4 781 1732 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 2004  9 component 1 1652  
678 0 0 7 782 1909 0 0 0 0 
679 0 0 7 787 2009 1489 0 0 1 6 param0 0 2007  
680 0 0 7 787 2009 1489 0 35 /* initializes mt[N] with a seed */ 1 4 seed 1 1733  
681 0 0 6 788 1733 0 0 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 2009  
682 0 0 7 792 2010 1492 0 10 /**
 *
 */ 0 
683 0 0 7 793 1909 0 0 0 0 
684 0 0 7 796 2011 1503 0 37 /**
 * Constructs an empty union.
 */ 0 
685 0 0 4 797 1732 0 0 0 2 4 this 3 2011  4 size 1 1978  
686 0 0 6 800 1740 0 0 57 /**
 * Returns the number of components in the union.
 */ 1 4 this 3 2012  
687 0 0 7 801 1652 0 0 50 /**
 * Returns the nth component in the union.
 */ 2 4 this 3 2012  1 n 1 1740  
688 0 0 4 804 1732 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 2011  
689 0 0 4 805 1732 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 2011  9 component 1 1652  
690 0 0 4 806 1732 0 0 104 /**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */ 2 4 this 3 2011  6 volume 1 1924  
691 0 0 7 807 1909 0 0 0 0 
692 0 0 7 810 2016 1511 0 10 /**
 *
 */ 1 4 copy 1 2014  
693 0 0 7 810 2016 1511 0 108 /**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 1 4 seed 5 1733  
694 0 0 6 811 2016 0 0 0 2 4 this 3 2016  4 copy 1 2014  
695 0 0 6 812 1740 0 0 60 /**
 * Returns a random integer in the range [0, range).
 */ 2 4 this 3 2016  5 range 1 1740  
696 0 0 6 813 1953 0 0 59 /**
 * Returns a random double in the range [0, range).
 */ 2 4 this 3 2016  5 range 1 1953  
697 0 0 6 814 1953 0 0 60 /**
 * Returns a random double in the range [-0.5, 0.5).
 */ 1 4 this 3 2016  
698 0 0 6 815 1733 0 0 77 /**
 * Returns a random seed value for the next global Randomizer object.
 */ 0 
699 0 0 6 816 1733 0 0 126 /**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */ 1 4 this 3 2016  
700 0 0 6 819 1733 0 0 127 /**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */ 1 4 this 3 2017  
701 0 0 7 822 2018 1519 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
702 0 0 7 822 2018 1519 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 2019  
703 0 0 7 822 2018 1519 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 4 2 sx 1 1953  2 sy 1 1953  10 table_size 5 1740  4 seed 5 1733  
704 0 0 6 823 2018 0 0 0 2 4 this 3 2018  4 copy 1 2019  
705 0 0 4 824 1732 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2018  5 scale 1 1770  
706 0 0 4 824 1732 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2018  5 scale 1 1783  
707 0 0 4 824 1732 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2018  5 scale 1 1953  
708 0 0 4 824 1732 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 3 4 this 3 2018  2 sx 1 1953  2 sy 1 1953  
709 0 0 6 825 1953 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2019  5 value 1 1770  
710 0 0 6 825 1627 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2019  5 value 1 1783  
711 0 0 6 825 1953 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 2019  1 x 1 1953  1 y 1 1953  
712 0 0 6 826 1953 0 0 0 2 4 this 3 2019  5 value 1 1770  
713 0 0 6 826 1627 0 0 0 2 4 this 3 2019  5 value 1 1783  
714 0 0 6 826 1953 0 0 0 3 4 this 3 2019  1 x 1 1953  1 y 1 1953  
715 0 0 7 829 2021 1525 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
716 0 0 7 829 2021 1525 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 2022  
717 0 0 7 829 2021 1525 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 5 2 sx 1 1953  2 sy 1 1953  2 sz 1 1953  10 table_size 5 1740  4 seed 5 1733  
718 0 0 6 830 2021 0 0 0 2 4 this 3 2021  4 copy 1 2022  
719 0 0 4 831 1732 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2021  5 scale 1 1809  
720 0 0 4 831 1732 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2021  5 scale 1 1822  
721 0 0 4 831 1732 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2021  5 scale 1 1953  
722 0 0 4 831 1732 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 4 4 this 3 2021  2 sx 1 1953  2 sy 1 1953  2 sz 1 1953  
723 0 0 6 832 1953 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2022  5 value 1 1809  
724 0 0 6 832 1627 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2022  5 value 1 1822  
725 0 0 6 832 1953 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 2022  1 x 1 1953  1 y 1 1953  1 z 1 1953  
726 0 0 6 833 1953 0 0 0 2 4 this 3 2022  5 value 1 1809  
727 0 0 6 833 1627 0 0 0 2 4 this 3 2022  5 value 1 1822  
728 0 0 6 833 1953 0 0 0 4 4 this 3 2022  1 x 1 1953  1 y 1 1953  1 z 1 1953  
729 0 0 7 893 2024 1533 0 122 /**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
730 0 0 7 893 2024 1533 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */ 1 4 copy 1 2025  
731 0 0 7 893 2024 1533 0 318 /**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 7 2 sx 1 1953  2 sy 1 1953  10 num_levels 5 1740  12 scale_factor 5 1953  9 amp_scale 5 1953  10 table_size 5 1740  4 seed 5 1733  
732 0 0 6 894 2024 0 0 0 2 4 this 3 2024  4 copy 1 2025  
733 0 0 4 895 1732 0 0 95 /**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 2024  5 level 1 2019  3 amp 5 1953  
734 0 0 4 896 1732 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 2024  
735 0 0 6 897 1953 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2024  5 value 1 1770  
736 0 0 6 897 1627 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2024  5 value 1 1783  
737 0 0 6 897 1953 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 2024  1 x 1 1953  1 y 1 1953  
738 0 0 6 898 1953 0 0 0 2 4 this 3 2024  5 value 1 1770  
739 0 0 6 898 1627 0 0 0 2 4 this 3 2024  5 value 1 1783  
740 0 0 6 898 1953 0 0 0 3 4 this 3 2024  1 x 1 1953  1 y 1 1953  
741 0 0 7 901 2027 1540 0 122 /**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
742 0 0 7 901 2027 1540 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */ 1 4 copy 1 2028  
743 0 0 7 901 2027 1540 0 318 /**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 8 2 sx 1 1953  2 sy 1 1953  2 sz 1 1953  10 num_levels 5 1740  12 scale_factor 5 1953  9 amp_scale 5 1953  10 table_size 5 1740  4 seed 5 1733  
744 0 0 6 902 2027 0 0 0 2 4 this 3 2027  4 copy 1 2028  
745 0 0 4 903 1732 0 0 95 /**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 2027  5 level 1 2022  3 amp 5 1953  
746 0 0 4 904 1732 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 2027  
747 0 0 6 905 1953 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2027  5 value 1 1809  
748 0 0 6 905 1627 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2027  5 value 1 1822  
749 0 0 6 905 1953 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 2027  1 x 1 1953  1 y 1 1953  1 z 1 1953  
750 0 0 6 906 1953 0 0 0 2 4 this 3 2027  5 value 1 1809  
751 0 0 6 906 1627 0 0 0 2 4 this 3 2027  5 value 1 1822  
752 0 0 6 906 1953 0 0 0 4 4 this 3 2027  1 x 1 1953  1 y 1 1953  1 z 1 1953  
753 0 0 7 909 2030 1556 0 10 /**
 *
 */ 0 
754 0 0 7 909 2030 1556 0 0 1 6 param0 0 2031  
755 0 0 4 910 1732 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 2030  
756 0 0 6 911 1740 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 2030  5 point 1 2033  
757 0 0 6 911 1740 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 3 4 this 3 2030  1 x 1 1953  1 y 1 1953  
758 0 0 6 912 1740 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 2031  
759 0 0 6 913 2033 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 2031  1 n 1 1740  
760 0 0 4 918 1732 0 0 112 /**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */ 1 4 this 3 2030  
761 0 0 4 919 1732 0 0 334 /**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */ 2 4 this 3 2030  5 index 1 1740  
762 0 0 6 920 1746 0 0 145 /**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */ 1 4 this 3 2031  
763 0 0 4 921 1732 0 0 78 /**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */ 1 4 this 3 2030  
764 0 0 4 922 1732 0 0 277 /**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */ 2 4 this 3 2030  5 index 1 1740  
765 0 0 4 923 1732 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 2030  
766 0 0 6 924 1740 0 0 94 /**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */ 1 4 this 3 2031  
767 0 0 6 925 1740 0 0 194 /**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 2031  1 n 1 1740  
768 0 0 6 926 1740 0 0 194 /**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 2031  1 n 1 1740  
769 0 0 6 927 1740 0 0 194 /**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 2031  1 n 1 1740  
770 0 0 7 930 2034 1564 0 10 /**
 *
 */ 0 
771 0 0 7 930 2034 1564 0 0 1 6 param0 0 2035  
772 0 0 4 931 1732 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 2034  
773 0 0 6 932 1740 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 2034  5 point 1 1969  
774 0 0 6 932 1740 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 4 4 this 3 2034  1 x 1 1953  1 y 1 1953  1 z 1 1953  
775 0 0 6 933 1740 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 2035  
776 0 0 6 934 1969 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 2035  1 n 1 1740  
777 0 0 4 936 1732 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 2034  
778 0 0 6 937 1968 0 0 100 /**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */ 1 4 this 3 2035  
779 0 0 4 784 1732 0 0 0 3 3 mat 1 2037  3 fwd 1 1972  2 cs 1 1990  
780 0 0 4 784 1732 0 0 0 4 3 mat 1 2037  3 fwd 1 1972  2 up 5 1972  2 cs 5 1990  
781 0 0 4 784 1732 0 0 0 3 3 mat 1 2038  3 fwd 1 1962  2 cs 1 1990  
782 0 0 4 784 1732 0 0 0 4 3 mat 1 2038  3 fwd 1 1962  2 up 5 1962  2 cs 5 1990  
783 0 0 4 784 1732 0 0 0 3 3 mat 1 1975  3 fwd 1 1972  2 cs 1 1990  
784 0 0 4 784 1732 0 0 0 4 3 mat 1 1975  3 fwd 1 1972  2 up 5 1972  2 cs 5 1990  
785 0 0 4 784 1732 0 0 0 3 3 mat 1 1965  3 fwd 1 1962  2 cs 1 1990  
786 0 0 4 784 1732 0 0 0 4 3 mat 1 1965  3 fwd 1 1962  2 up 5 1962  2 cs 5 1990  
787 0 0 4 784 1732 0 0 0 3 4 quat 1 2039  3 fwd 1 1972  2 cs 1 1990  
788 0 0 4 784 1732 0 0 0 4 4 quat 1 2039  3 fwd 1 1972  2 up 5 1972  2 cs 5 1990  
789 0 0 4 784 1732 0 0 0 3 4 quat 1 2041  3 fwd 1 1962  2 cs 1 1990  
790 0 0 4 784 1732 0 0 0 4 4 quat 1 2041  3 fwd 1 1962  2 up 5 1962  2 cs 5 1990  
791 0 0 4 785 1732 0 0 0 3 3 mat 1 2037  3 fwd 1 1972  2 cs 1 1990  
792 0 0 4 785 1732 0 0 0 4 3 mat 1 2037  3 fwd 1 1972  2 up 5 1972  2 cs 5 1990  
793 0 0 4 785 1732 0 0 0 3 3 mat 1 2038  3 fwd 1 1962  2 cs 1 1990  
794 0 0 4 785 1732 0 0 0 4 3 mat 1 2038  3 fwd 1 1962  2 up 5 1962  2 cs 5 1990  
795 0 0 4 785 1732 0 0 0 3 3 mat 1 1975  3 fwd 1 1972  2 cs 1 1990  
796 0 0 4 785 1732 0 0 0 4 3 mat 1 1975  3 fwd 1 1972  2 up 5 1972  2 cs 5 1990  
797 0 0 4 785 1732 0 0 0 3 3 mat 1 1965  3 fwd 1 1962  2 cs 1 1990  
798 0 0 4 785 1732 0 0 0 4 3 mat 1 1965  3 fwd 1 1962  2 up 5 1962  2 cs 5 1990  
799 0 0 4 785 1732 0 0 0 3 4 quat 1 2039  3 fwd 1 1972  2 cs 1 1990  
800 0 0 4 785 1732 0 0 0 4 4 quat 1 2039  3 fwd 1 1972  2 up 5 1972  2 cs 5 1990  
801 0 0 4 785 1732 0 0 0 3 4 quat 1 2041  3 fwd 1 1962  2 cs 1 1990  
802 0 0 4 785 1732 0 0 0 4 4 quat 1 2041  3 fwd 1 1962  2 up 5 1962  2 cs 5 1990  
803 0 0 4 891 1732 0 0 0 3 3 mat 1 2037  1 a 1 1972  1 b 1 1972  
804 0 0 4 891 1732 0 0 0 3 3 mat 1 2038  1 a 1 1962  1 b 1 1962  
805 0 0 4 891 1732 0 0 0 3 3 mat 1 1975  1 a 1 1972  1 b 1 1972  
806 0 0 4 891 1732 0 0 0 3 3 mat 1 1965  1 a 1 1962  1 b 1 1962  
478
1565 32 ConstPointerToArray< LMatrix3d > 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 812 825 0 12 813 814 815 816 817 818 819 820 821 822 823 824 0 0 1 0 1566 0 0 0 0 0

1566 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 809 0 2 810 811 0 0 1 0 1567 0 0 0 0 0

1567 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 807 808 0 0 1 0 1568 0 0 0 0 0

1568 13 PointerToVoid 0 2048 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1569 32 ConstPointerToArray< LMatrix3f > 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 831 844 0 12 832 833 834 835 836 837 838 839 840 841 842 843 0 0 1 0 1570 0 0 0 0 0

1570 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 828 0 2 829 830 0 0 1 0 1571 0 0 0 0 0

1571 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 826 827 0 0 1 0 1568 0 0 0 0 0

1572 33 ConstPointerToArray< LVecBase2d > 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 850 863 0 12 851 852 853 854 855 856 857 858 859 860 861 862 0 0 1 0 1573 0 0 0 0 0

1573 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 847 0 2 848 849 0 0 1 0 1574 0 0 0 0 0

1574 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 845 846 0 0 1 0 1568 0 0 0 0 0

1575 33 ConstPointerToArray< LVecBase2f > 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 869 882 0 12 870 871 872 873 874 875 876 877 878 879 880 881 0 0 1 0 1576 0 0 0 0 0

1576 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 866 0 2 867 868 0 0 1 0 1577 0 0 0 0 0

1577 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 864 865 0 0 1 0 1568 0 0 0 0 0

1578 33 ConstPointerToArray< LVecBase2i > 0 141313 33 ConstPointerToArray< LVecBase2i > 33 ConstPointerToArray< LVecBase2i > 0 0 0 1 888 901 0 12 889 890 891 892 893 894 895 896 897 898 899 900 0 0 1 0 1579 0 0 0 0 0

1579 32 PointerToArrayBase< LVecBase2i > 0 26625 32 PointerToArrayBase< LVecBase2i > 32 PointerToArrayBase< LVecBase2i > 0 0 0 0 885 0 2 886 887 0 0 1 0 1580 0 0 0 0 0

1580 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 0 0 0 0 0 2 883 884 0 0 1 0 1568 0 0 0 0 0

1581 33 ConstPointerToArray< LVecBase3d > 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 907 920 0 12 908 909 910 911 912 913 914 915 916 917 918 919 0 0 1 0 1582 0 0 0 0 0

1582 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 904 0 2 905 906 0 0 1 0 1583 0 0 0 0 0

1583 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 902 903 0 0 1 0 1568 0 0 0 0 0

1584 33 ConstPointerToArray< LVecBase3f > 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 926 939 0 12 927 928 929 930 931 932 933 934 935 936 937 938 0 0 1 0 1585 0 0 0 0 0

1585 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 923 0 2 924 925 0 0 1 0 1586 0 0 0 0 0

1586 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 921 922 0 0 1 0 1568 0 0 0 0 0

1587 33 ConstPointerToArray< LVecBase3i > 0 141313 33 ConstPointerToArray< LVecBase3i > 33 ConstPointerToArray< LVecBase3i > 0 0 0 1 945 958 0 12 946 947 948 949 950 951 952 953 954 955 956 957 0 0 1 0 1588 0 0 0 0 0

1588 32 PointerToArrayBase< LVecBase3i > 0 26625 32 PointerToArrayBase< LVecBase3i > 32 PointerToArrayBase< LVecBase3i > 0 0 0 0 942 0 2 943 944 0 0 1 0 1589 0 0 0 0 0

1589 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 0 0 0 0 0 2 940 941 0 0 1 0 1568 0 0 0 0 0

1590 41 ConstPointerToArray< UnalignedLMatrix4d > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 964 977 0 12 965 966 967 968 969 970 971 972 973 974 975 976 0 0 1 0 1591 0 0 0 0 0

1591 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 961 0 2 962 963 0 0 1 0 1592 0 0 0 0 0

1592 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 959 960 0 0 1 0 1568 0 0 0 0 0

1593 41 ConstPointerToArray< UnalignedLMatrix4f > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 983 996 0 12 984 985 986 987 988 989 990 991 992 993 994 995 0 0 1 0 1594 0 0 0 0 0

1594 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 980 0 2 981 982 0 0 1 0 1595 0 0 0 0 0

1595 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 978 979 0 0 1 0 1568 0 0 0 0 0

1596 42 ConstPointerToArray< UnalignedLVecBase4d > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 1002 1015 0 12 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 0 0 1 0 1597 0 0 0 0 0

1597 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 999 0 2 1000 1001 0 0 1 0 1598 0 0 0 0 0

1598 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 997 998 0 0 1 0 1568 0 0 0 0 0

1599 42 ConstPointerToArray< UnalignedLVecBase4f > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 1021 1034 0 12 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 0 0 1 0 1600 0 0 0 0 0

1600 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 1018 0 2 1019 1020 0 0 1 0 1601 0 0 0 0 0

1601 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 1016 1017 0 0 1 0 1568 0 0 0 0 0

1602 42 ConstPointerToArray< UnalignedLVecBase4i > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4i > 42 ConstPointerToArray< UnalignedLVecBase4i > 0 0 0 1 1040 1053 0 12 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 0 0 1 0 1603 0 0 0 0 0

1603 41 PointerToArrayBase< UnalignedLVecBase4i > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4i > 41 PointerToArrayBase< UnalignedLVecBase4i > 0 0 0 0 1037 0 2 1038 1039 0 0 1 0 1604 0 0 0 0 0

1604 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 0 0 0 0 0 2 1035 1036 0 0 1 0 1568 0 0 0 0 0

1605 27 PointerToArray< LMatrix3d > 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 1054 1074 0 19 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 0 0 1 0 1566 0 0 0 0 0

1606 27 PointerToArray< LMatrix3f > 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 1075 1095 0 19 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 0 0 1 0 1570 0 0 0 0 0

1607 28 PointerToArray< LVecBase2d > 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 1096 1116 0 19 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 0 0 1 0 1573 0 0 0 0 0

1608 28 PointerToArray< LVecBase2f > 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 1117 1137 0 19 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 0 0 1 0 1576 0 0 0 0 0

1609 28 PointerToArray< LVecBase2i > 0 141313 28 PointerToArray< LVecBase2i > 28 PointerToArray< LVecBase2i > 0 0 0 1 1138 1158 0 19 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 0 0 1 0 1579 0 0 0 0 0

1610 28 PointerToArray< LVecBase3d > 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 1159 1179 0 19 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 0 0 1 0 1582 0 0 0 0 0

1611 28 PointerToArray< LVecBase3f > 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 1180 1200 0 19 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 0 0 1 0 1585 0 0 0 0 0

1612 28 PointerToArray< LVecBase3i > 0 141313 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 1 1201 1221 0 19 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 0 0 1 0 1588 0 0 0 0 0

1613 36 PointerToArray< UnalignedLMatrix4d > 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 1222 1242 0 19 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 0 0 1 0 1591 0 0 0 0 0

1614 36 PointerToArray< UnalignedLMatrix4f > 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 1243 1263 0 19 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 0 0 1 0 1594 0 0 0 0 0

1615 37 PointerToArray< UnalignedLVecBase4d > 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 1264 1284 0 19 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 0 0 1 0 1597 0 0 0 0 0

1616 37 PointerToArray< UnalignedLVecBase4f > 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 1285 1305 0 19 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 0 0 1 0 1600 0 0 0 0 0

1617 37 PointerToArray< UnalignedLVecBase4i > 0 141313 37 PointerToArray< UnalignedLVecBase4i > 37 PointerToArray< UnalignedLVecBase4i > 0 0 0 1 1306 1326 0 19 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 0 0 1 0 1603 0 0 0 0 0

1618 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 1336 0 9 1327 1328 1329 1330 1331 1332 1333 1334 1335 0 0 1 0 1619 0 0 0 2 1620 1621 330
/**
 * This is an abstract class for any volume in any sense which can be said to
 * define the locality of reference of a node in a graph, along with all of
 * its descendants.  It is not necessarily a geometric volume (although see
 * GeometricBoundingVolume); this is simply an abstract interface for bounds
 * of any sort.
 */

1619 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1620 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1618 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 65
// If no bits are set, it is known that there is no intersection.
0 11 IF_possible 27 BoundingVolume::IF_possible 56
// IF_possible is set if there might be an intersection.
1 7 IF_some 23 BoundingVolume::IF_some 105
// IF_some is set if there is definitely an intersection.  In this case,
// IF_possible will also be set.
2 6 IF_all 22 BoundingVolume::IF_all 69
// When IF_all is set, both IF_possible and IF_some will also be set.
4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 106
// IF_dont_understand is set if the particular volumevolume intersection
// test has not been implemented.
8 0 74
// The contains() functions return the union of one or more of these bits.

1621 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1618 0 0 0 0 0 0 0 0 0 5 10 BT_default 26 BoundingVolume::BT_default 0
0 7 BT_best 23 BoundingVolume::BT_best 0
1 9 BT_sphere 25 BoundingVolume::BT_sphere 0
2 6 BT_box 22 BoundingVolume::BT_box 0
3 10 BT_fastest 26 BoundingVolume::BT_fastest 0
4 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1622 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 1342 0 5 1337 1338 1339 1340 1341 0 0 1 0 1618 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1623 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 1347 3 2043 2044 2045 4 1343 1344 1345 1346 0 0 1 0 1622 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

1624 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1625 0 0 0 0 0 0 0 0 0 0

1625 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1626 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1627 0 0 0 0 0 0 0 0 0 0

1627 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1628 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 1348 1350 0 12 1349 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1629 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 1362 1364 0 12 1363 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1630 9 LParabola 0 2105345 9 LParabola 9 LParabola 0 0 1628 0 0 0 0 0 0 0 0 0 0

1631 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 1376 1395 0 18 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 0 0 1 0 1632 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1632 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1633 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 1396 1415 0 18 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 0 0 1 0 1634 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1634 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1635 6 LPlane 0 2105345 6 LPlane 6 LPlane 0 0 1631 0 0 0 0 0 0 0 0 0 0

1636 6 PlaneF 0 2105345 6 PlaneF 6 PlaneF 0 0 1631 0 0 0 0 0 0 0 0 0 0

1637 6 PlaneD 0 2105345 6 PlaneD 6 PlaneD 0 0 1633 0 0 0 0 0 0 0 0 0 0

1638 5 Plane 0 2105345 5 Plane 5 Plane 0 0 1631 0 0 0 0 0 0 0 0 0 0

1639 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 1416 1426 2 2046 2047 9 1417 1418 1419 1420 1421 1422 1423 1424 1425 2 2058 2059 0 1 0 1623 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1640 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 1427 1434 0 6 1428 1429 1430 1431 1432 1433 0 0 0 0 0 10
/**
 *
 */

1641 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 1435 1442 0 6 1436 1437 1438 1439 1440 1441 0 0 0 0 0 10
/**
 *
 */

1642 8 LFrustum 0 2105345 8 LFrustum 8 LFrustum 0 0 1640 0 0 0 0 0 0 0 0 0 0

1643 8 FrustumF 0 2105345 8 FrustumF 8 FrustumF 0 0 1640 0 0 0 0 0 0 0 0 0 0

1644 8 FrustumD 0 2105345 8 FrustumD 8 FrustumD 0 0 1641 0 0 0 0 0 0 0 0 0 0

1645 7 Frustum 0 2105345 7 Frustum 7 Frustum 0 0 1640 0 0 0 0 0 0 0 0 0 0

1646 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1443 1449 2 2048 2049 5 1444 1445 1446 1447 1448 2 2060 2061 0 1 0 1623 0 0 0 0 300
/**
 * This defines a bounding convex hexahedron.  It is typically used to
 * represent a frustum, but may represent any enclosing convex hexahedron,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

1647 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1450 1457 0 6 1451 1452 1453 1454 1455 1456 0 0 1 0 1622 0 0 0 0 320
/**
 * This funny bounding volume is an infinite line with no thickness and
 * extending to infinity in both directions.
 *
 * Note that it *always* extends in both directions, despite the fact that you
 * specify two points to the constructor.  These are not endpoints, they are
 * two arbitrary points on the line.
 */

1648 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1458 1464 1 2050 5 1459 1460 1461 1462 1463 0 0 1 0 1622 0 0 0 0 248
/**
 * This funny bounding volume is an infinite plane that divides space into two
 * regions: the part behind the normal, which is "inside" the bounding volume,
 * and the part in front of the normal, which is "outside" the bounding
 * volume.
 */

1649 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 1635 0 0 0 0 0 0 0 0 0 0

1650 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1465 1474 2 2051 2052 8 1466 1467 1468 1469 1470 1471 1472 1473 0 0 1 0 1623 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1651 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1475 1484 1 2053 8 1476 1477 1478 1479 1480 1481 1482 1483 1 2062 0 1 0 1622 0 0 0 0 232
/**
 * This special bounding volume is the intersection of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within an IntersectionBoundingVolume if it is
 * within all of its component bounding volumes.
 */

1652 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1622 0 0 0 0 0 0 0 0 0 0

1654 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1487 1489 0 1 1488 0 0 0 0 1 1655 0

1655 0 0 794624 10 Mersenne:: 0 1654 0 0 0 0 0 0 0 0 0 1 9 max_value 19 Mersenne::max_value 0
2147483647 0 0

1656 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1490 1492 0 1 1491 0 0 1 0 1622 0 0 0 0 85
/**
 * This is a special kind of GeometricBoundingVolume that fills all of space.
 */

1657 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1493 1503 1 2054 9 1494 1495 1496 1497 1498 1499 1500 1501 1502 1 2063 0 1 0 1622 0 0 0 0 229
/**
 * This special bounding volume is the union of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within a UnionBoundingVolume if it is within any
 * one or more of its component bounding volumes.
 */

1658 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1504 1511 0 6 1505 1506 1507 1508 1509 1510 0 0 0 0 0 50
/**
 * A handy class to return random numbers.
 */

1659 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1513 0 1 1512 0 0 0 0 0 183
/**
 * This is the base class for PerlinNoise2 and PerlinNoise3, different
 * dimensions of Perlin noise implementation.  The base class just collects
 * the common functionality.
 */

1660 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1514 1519 0 4 1515 1516 1517 1518 0 0 1 0 1659 0 0 0 0 186
/**
 * This class provides an implementation of Perlin noise for 2 variables.
 * This code is loosely based on the reference implementation at
 * https://mrl.nyu.edu/~perlin/noise/ .
 */

1661 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1520 1525 0 4 1521 1522 1523 1524 0 0 1 0 1659 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 3 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1662 13 PTA_LMatrix4f 0 2105345 13 PTA_LMatrix4f 13 PTA_LMatrix4f 0 0 1614 0 0 0 0 0 0 0 0 0 0

1663 14 CPTA_LMatrix4f 0 2105345 14 CPTA_LMatrix4f 14 CPTA_LMatrix4f 0 0 1593 0 0 0 0 0 0 0 0 0 0

1664 13 PTA_LMatrix4d 0 2105345 13 PTA_LMatrix4d 13 PTA_LMatrix4d 0 0 1613 0 0 0 0 0 0 0 0 0 0

1665 14 CPTA_LMatrix4d 0 2105345 14 CPTA_LMatrix4d 14 CPTA_LMatrix4d 0 0 1590 0 0 0 0 0 0 0 0 0 0

1666 12 PTA_LMatrix4 0 2105345 12 PTA_LMatrix4 12 PTA_LMatrix4 0 0 1662 0 0 0 0 0 0 0 0 0 0

1667 13 CPTA_LMatrix4 0 2105345 13 CPTA_LMatrix4 13 CPTA_LMatrix4 0 0 1663 0 0 0 0 0 0 0 0 0 0

1668 7 PTAMat4 0 2105345 7 PTAMat4 7 PTAMat4 0 0 1666 0 0 0 0 0 0 0 0 0 0

1669 8 CPTAMat4 0 2105345 8 CPTAMat4 8 CPTAMat4 0 0 1667 0 0 0 0 0 0 0 0 0 0

1670 8 PTAMat4d 0 2105345 8 PTAMat4d 8 PTAMat4d 0 0 1664 0 0 0 0 0 0 0 0 0 0

1671 9 CPTAMat4d 0 2105345 9 CPTAMat4d 9 CPTAMat4d 0 0 1665 0 0 0 0 0 0 0 0 0 0

1672 13 PTA_LMatrix3f 0 2105345 13 PTA_LMatrix3f 13 PTA_LMatrix3f 0 0 1606 0 0 0 0 0 0 0 0 0 0

1673 14 CPTA_LMatrix3f 0 2105345 14 CPTA_LMatrix3f 14 CPTA_LMatrix3f 0 0 1569 0 0 0 0 0 0 0 0 0 0

1674 13 PTA_LMatrix3d 0 2105345 13 PTA_LMatrix3d 13 PTA_LMatrix3d 0 0 1605 0 0 0 0 0 0 0 0 0 0

1675 14 CPTA_LMatrix3d 0 2105345 14 CPTA_LMatrix3d 14 CPTA_LMatrix3d 0 0 1565 0 0 0 0 0 0 0 0 0 0

1676 12 PTA_LMatrix3 0 2105345 12 PTA_LMatrix3 12 PTA_LMatrix3 0 0 1672 0 0 0 0 0 0 0 0 0 0

1677 13 CPTA_LMatrix3 0 2105345 13 CPTA_LMatrix3 13 CPTA_LMatrix3 0 0 1673 0 0 0 0 0 0 0 0 0 0

1678 7 PTAMat3 0 2105345 7 PTAMat3 7 PTAMat3 0 0 1676 0 0 0 0 0 0 0 0 0 0

1679 8 CPTAMat3 0 2105345 8 CPTAMat3 8 CPTAMat3 0 0 1677 0 0 0 0 0 0 0 0 0 0

1680 8 PTAMat3d 0 2105345 8 PTAMat3d 8 PTAMat3d 0 0 1674 0 0 0 0 0 0 0 0 0 0

1681 9 CPTAMat3d 0 2105345 9 CPTAMat3d 9 CPTAMat3d 0 0 1675 0 0 0 0 0 0 0 0 0 0

1682 14 PTA_LVecBase4f 0 2105345 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1616 0 0 0 0 0 0 0 0 0 0

1683 15 CPTA_LVecBase4f 0 2105345 15 CPTA_LVecBase4f 15 CPTA_LVecBase4f 0 0 1599 0 0 0 0 0 0 0 0 0 0

1684 14 PTA_LVecBase4d 0 2105345 14 PTA_LVecBase4d 14 PTA_LVecBase4d 0 0 1615 0 0 0 0 0 0 0 0 0 0

1685 15 CPTA_LVecBase4d 0 2105345 15 CPTA_LVecBase4d 15 CPTA_LVecBase4d 0 0 1596 0 0 0 0 0 0 0 0 0 0

1686 14 PTA_LVecBase4i 0 2105345 14 PTA_LVecBase4i 14 PTA_LVecBase4i 0 0 1617 0 0 0 0 0 0 0 0 0 0

1687 15 CPTA_LVecBase4i 0 2105345 15 CPTA_LVecBase4i 15 CPTA_LVecBase4i 0 0 1602 0 0 0 0 0 0 0 0 0 0

1688 13 PTA_LVecBase4 0 2105345 13 PTA_LVecBase4 13 PTA_LVecBase4 0 0 1682 0 0 0 0 0 0 0 0 0 0

1689 14 CPTA_LVecBase4 0 2105345 14 CPTA_LVecBase4 14 CPTA_LVecBase4 0 0 1683 0 0 0 0 0 0 0 0 0 0

1690 12 PTAVecBase4f 0 2105345 12 PTAVecBase4f 12 PTAVecBase4f 0 0 1682 0 0 0 0 0 0 0 0 0 0

1691 13 CPTAVecBase4f 0 2105345 13 CPTAVecBase4f 13 CPTAVecBase4f 0 0 1683 0 0 0 0 0 0 0 0 0 0

1692 12 PTAVecBase4d 0 2105345 12 PTAVecBase4d 12 PTAVecBase4d 0 0 1684 0 0 0 0 0 0 0 0 0 0

1693 13 CPTAVecBase4d 0 2105345 13 CPTAVecBase4d 13 CPTAVecBase4d 0 0 1685 0 0 0 0 0 0 0 0 0 0

1694 14 PTA_LVecBase3f 0 2105345 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1611 0 0 0 0 0 0 0 0 0 0

1695 15 CPTA_LVecBase3f 0 2105345 15 CPTA_LVecBase3f 15 CPTA_LVecBase3f 0 0 1584 0 0 0 0 0 0 0 0 0 0

1696 14 PTA_LVecBase3d 0 2105345 14 PTA_LVecBase3d 14 PTA_LVecBase3d 0 0 1610 0 0 0 0 0 0 0 0 0 0

1697 15 CPTA_LVecBase3d 0 2105345 15 CPTA_LVecBase3d 15 CPTA_LVecBase3d 0 0 1581 0 0 0 0 0 0 0 0 0 0

1698 14 PTA_LVecBase3i 0 2105345 14 PTA_LVecBase3i 14 PTA_LVecBase3i 0 0 1612 0 0 0 0 0 0 0 0 0 0

1699 15 CPTA_LVecBase3i 0 2105345 15 CPTA_LVecBase3i 15 CPTA_LVecBase3i 0 0 1587 0 0 0 0 0 0 0 0 0 0

1700 13 PTA_LVecBase3 0 2105345 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1694 0 0 0 0 0 0 0 0 0 0

1701 14 CPTA_LVecBase3 0 2105345 14 CPTA_LVecBase3 14 CPTA_LVecBase3 0 0 1695 0 0 0 0 0 0 0 0 0 0

1702 12 PTAVecBase3f 0 2105345 12 PTAVecBase3f 12 PTAVecBase3f 0 0 1694 0 0 0 0 0 0 0 0 0 0

1703 13 CPTAVecBase3f 0 2105345 13 CPTAVecBase3f 13 CPTAVecBase3f 0 0 1695 0 0 0 0 0 0 0 0 0 0

1704 12 PTAVecBase3d 0 2105345 12 PTAVecBase3d 12 PTAVecBase3d 0 0 1696 0 0 0 0 0 0 0 0 0 0

1705 13 CPTAVecBase3d 0 2105345 13 CPTAVecBase3d 13 CPTAVecBase3d 0 0 1697 0 0 0 0 0 0 0 0 0 0

1706 14 PTA_LVecBase2f 0 2105345 14 PTA_LVecBase2f 14 PTA_LVecBase2f 0 0 1608 0 0 0 0 0 0 0 0 0 0

1707 15 CPTA_LVecBase2f 0 2105345 15 CPTA_LVecBase2f 15 CPTA_LVecBase2f 0 0 1575 0 0 0 0 0 0 0 0 0 0

1708 14 PTA_LVecBase2d 0 2105345 14 PTA_LVecBase2d 14 PTA_LVecBase2d 0 0 1607 0 0 0 0 0 0 0 0 0 0

1709 15 CPTA_LVecBase2d 0 2105345 15 CPTA_LVecBase2d 15 CPTA_LVecBase2d 0 0 1572 0 0 0 0 0 0 0 0 0 0

1710 14 PTA_LVecBase2i 0 2105345 14 PTA_LVecBase2i 14 PTA_LVecBase2i 0 0 1609 0 0 0 0 0 0 0 0 0 0

1711 15 CPTA_LVecBase2i 0 2105345 15 CPTA_LVecBase2i 15 CPTA_LVecBase2i 0 0 1578 0 0 0 0 0 0 0 0 0 0

1712 13 PTA_LVecBase2 0 2105345 13 PTA_LVecBase2 13 PTA_LVecBase2 0 0 1706 0 0 0 0 0 0 0 0 0 0

1713 14 CPTA_LVecBase2 0 2105345 14 CPTA_LVecBase2 14 CPTA_LVecBase2 0 0 1707 0 0 0 0 0 0 0 0 0 0

1714 12 PTAVecBase2f 0 2105345 12 PTAVecBase2f 12 PTAVecBase2f 0 0 1706 0 0 0 0 0 0 0 0 0 0

1715 13 CPTAVecBase2f 0 2105345 13 CPTAVecBase2f 13 CPTAVecBase2f 0 0 1707 0 0 0 0 0 0 0 0 0 0

1716 12 PTAVecBase2d 0 2105345 12 PTAVecBase2d 12 PTAVecBase2d 0 0 1708 0 0 0 0 0 0 0 0 0 0

1717 13 CPTAVecBase2d 0 2105345 13 CPTAVecBase2d 13 CPTAVecBase2d 0 0 1709 0 0 0 0 0 0 0 0 0 0

1718 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1527 1533 0 5 1528 1529 1530 1531 1532 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1719 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1534 1540 0 5 1535 1536 1537 1538 1539 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1720 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1541 1556 1 2055 14 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1 2064 0 0 0 0 382
/**
 * This class can triangulate a convex or concave polygon, even one with
 * holes.  It is adapted from an algorithm published as:
 *
 * Narkhede A. and Manocha D., Fast polygon triangulation algorithm based on
 * Seidel's Algorithm, UNC-CH, 1994.
 *
 * http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
 *
 * It works strictly on 2-d points.  See Triangulator3 for 3-d points.
 */

1721 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1722 0 0 0 0 0 0 0 0 0 0

1722 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1723 13 Triangulator3 0 141313 13 Triangulator3 13 Triangulator3 0 0 0 1 1557 1564 2 2056 2057 6 1558 1559 1560 1561 1562 1563 1 2065 0 1 0 1720 0 0 0 0 264
/**
 * This is an extension of Triangulator to handle polygons with three-
 * dimensional points.  It assumes all of the points lie in a single plane,
 * and internally projects the supplied points into 2-D for passing to the
 * underlying Triangulator object.
 */

1724 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1725 0 0 0 0 0 0 0 0 0 0

1725 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1726 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1633 0 0 0 0 0 0 0 0 0 0

1727 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1728 0 0 0 0 0 0 0 0 0 0

1728 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1565 0 0 0 0 0 0 0 0 0 0

1729 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1565 0 0 0 0 0 0 0 0 0 0

1730 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1731 0 0 0 0 0 0 0 0 0 0

1731 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1605 0 0 0 0 0 0 0 0 0 0

1732 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1733 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1734 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1735 0 0 0 0 0 0 0 0 0 0

1735 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1736 0 0 0 0 0 0 0 0 0 0

1736 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1737 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1738 0 0 0 0 0 0 0 0 0 0

1738 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1739 0 0 0 0 0 0 0 0 0 0

1739 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1740 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1741 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1742 0 0 0 0 0 0 0 0 0 0

1742 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1743 0 0 0 0 0 0 0 0 0 0

1743 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1744 39 PointerToArrayBase< LMatrix3d > const * 0 8576 39 PointerToArrayBase< LMatrix3d > const * 39 PointerToArrayBase< LMatrix3d > const * 0 0 1745 0 0 0 0 0 0 0 0 0 0

1745 37 PointerToArrayBase< LMatrix3d > const 0 8832 37 PointerToArrayBase< LMatrix3d > const 37 PointerToArrayBase< LMatrix3d > const 0 0 1566 0 0 0 0 0 0 0 0 0 0

1746 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1747 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1748 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1749 0 0 0 0 0 0 0 0 0 0

1749 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1567 0 0 0 0 0 0 0 0 0 0

1750 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1751 0 0 0 0 0 0 0 0 0 0

1751 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1752 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1753 0 0 0 0 0 0 0 0 0 0

1753 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1569 0 0 0 0 0 0 0 0 0 0

1754 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1569 0 0 0 0 0 0 0 0 0 0

1755 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1756 0 0 0 0 0 0 0 0 0 0

1756 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1606 0 0 0 0 0 0 0 0 0 0

1757 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1758 0 0 0 0 0 0 0 0 0 0

1758 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1759 0 0 0 0 0 0 0 0 0 0

1759 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1760 39 PointerToArrayBase< LMatrix3f > const * 0 8576 39 PointerToArrayBase< LMatrix3f > const * 39 PointerToArrayBase< LMatrix3f > const * 0 0 1761 0 0 0 0 0 0 0 0 0 0

1761 37 PointerToArrayBase< LMatrix3f > const 0 8832 37 PointerToArrayBase< LMatrix3f > const 37 PointerToArrayBase< LMatrix3f > const 0 0 1570 0 0 0 0 0 0 0 0 0 0

1762 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1571 0 0 0 0 0 0 0 0 0 0

1763 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1764 0 0 0 0 0 0 0 0 0 0

1764 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1571 0 0 0 0 0 0 0 0 0 0

1765 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1766 0 0 0 0 0 0 0 0 0 0

1766 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1572 0 0 0 0 0 0 0 0 0 0

1767 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1572 0 0 0 0 0 0 0 0 0 0

1768 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1769 0 0 0 0 0 0 0 0 0 0

1769 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1607 0 0 0 0 0 0 0 0 0 0

1770 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1771 0 0 0 0 0 0 0 0 0 0

1771 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1772 0 0 0 0 0 0 0 0 0 0

1772 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1773 40 PointerToArrayBase< LVecBase2d > const * 0 8576 40 PointerToArrayBase< LVecBase2d > const * 40 PointerToArrayBase< LVecBase2d > const * 0 0 1774 0 0 0 0 0 0 0 0 0 0

1774 38 PointerToArrayBase< LVecBase2d > const 0 8832 38 PointerToArrayBase< LVecBase2d > const 38 PointerToArrayBase< LVecBase2d > const 0 0 1573 0 0 0 0 0 0 0 0 0 0

1775 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1574 0 0 0 0 0 0 0 0 0 0

1776 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1777 0 0 0 0 0 0 0 0 0 0

1777 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1574 0 0 0 0 0 0 0 0 0 0

1778 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1779 0 0 0 0 0 0 0 0 0 0

1779 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1575 0 0 0 0 0 0 0 0 0 0

1780 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1575 0 0 0 0 0 0 0 0 0 0

1781 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1782 0 0 0 0 0 0 0 0 0 0

1782 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1608 0 0 0 0 0 0 0 0 0 0

1783 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1784 0 0 0 0 0 0 0 0 0 0

1784 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1785 0 0 0 0 0 0 0 0 0 0

1785 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1786 40 PointerToArrayBase< LVecBase2f > const * 0 8576 40 PointerToArrayBase< LVecBase2f > const * 40 PointerToArrayBase< LVecBase2f > const * 0 0 1787 0 0 0 0 0 0 0 0 0 0

1787 38 PointerToArrayBase< LVecBase2f > const 0 8832 38 PointerToArrayBase< LVecBase2f > const 38 PointerToArrayBase< LVecBase2f > const 0 0 1576 0 0 0 0 0 0 0 0 0 0

1788 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1577 0 0 0 0 0 0 0 0 0 0

1789 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1790 0 0 0 0 0 0 0 0 0 0

1790 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1577 0 0 0 0 0 0 0 0 0 0

1791 41 ConstPointerToArray< LVecBase2i > const * 0 8576 41 ConstPointerToArray< LVecBase2i > const * 41 ConstPointerToArray< LVecBase2i > const * 0 0 1792 0 0 0 0 0 0 0 0 0 0

1792 39 ConstPointerToArray< LVecBase2i > const 0 8832 39 ConstPointerToArray< LVecBase2i > const 39 ConstPointerToArray< LVecBase2i > const 0 0 1578 0 0 0 0 0 0 0 0 0 0

1793 35 ConstPointerToArray< LVecBase2i > * 0 8576 35 ConstPointerToArray< LVecBase2i > * 35 ConstPointerToArray< LVecBase2i > * 0 0 1578 0 0 0 0 0 0 0 0 0 0

1794 36 PointerToArray< LVecBase2i > const * 0 8576 36 PointerToArray< LVecBase2i > const * 36 PointerToArray< LVecBase2i > const * 0 0 1795 0 0 0 0 0 0 0 0 0 0

1795 34 PointerToArray< LVecBase2i > const 0 8832 34 PointerToArray< LVecBase2i > const 34 PointerToArray< LVecBase2i > const 0 0 1609 0 0 0 0 0 0 0 0 0 0

1796 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1797 0 0 0 0 0 0 0 0 0 0

1797 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1798 0 0 0 0 0 0 0 0 0 0

1798 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1799 40 PointerToArrayBase< LVecBase2i > const * 0 8576 40 PointerToArrayBase< LVecBase2i > const * 40 PointerToArrayBase< LVecBase2i > const * 0 0 1800 0 0 0 0 0 0 0 0 0 0

1800 38 PointerToArrayBase< LVecBase2i > const 0 8832 38 PointerToArrayBase< LVecBase2i > const 38 PointerToArrayBase< LVecBase2i > const 0 0 1579 0 0 0 0 0 0 0 0 0 0

1801 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 0 1580 0 0 0 0 0 0 0 0 0 0

1802 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 0 1803 0 0 0 0 0 0 0 0 0 0

1803 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 0 1580 0 0 0 0 0 0 0 0 0 0

1804 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1805 0 0 0 0 0 0 0 0 0 0

1805 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1581 0 0 0 0 0 0 0 0 0 0

1806 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1581 0 0 0 0 0 0 0 0 0 0

1807 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1808 0 0 0 0 0 0 0 0 0 0

1808 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1610 0 0 0 0 0 0 0 0 0 0

1809 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1810 0 0 0 0 0 0 0 0 0 0

1810 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1811 0 0 0 0 0 0 0 0 0 0

1811 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1812 40 PointerToArrayBase< LVecBase3d > const * 0 8576 40 PointerToArrayBase< LVecBase3d > const * 40 PointerToArrayBase< LVecBase3d > const * 0 0 1813 0 0 0 0 0 0 0 0 0 0

1813 38 PointerToArrayBase< LVecBase3d > const 0 8832 38 PointerToArrayBase< LVecBase3d > const 38 PointerToArrayBase< LVecBase3d > const 0 0 1582 0 0 0 0 0 0 0 0 0 0

1814 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1583 0 0 0 0 0 0 0 0 0 0

1815 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1816 0 0 0 0 0 0 0 0 0 0

1816 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1583 0 0 0 0 0 0 0 0 0 0

1817 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1818 0 0 0 0 0 0 0 0 0 0

1818 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1584 0 0 0 0 0 0 0 0 0 0

1819 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1584 0 0 0 0 0 0 0 0 0 0

1820 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1821 0 0 0 0 0 0 0 0 0 0

1821 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1611 0 0 0 0 0 0 0 0 0 0

1822 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1823 0 0 0 0 0 0 0 0 0 0

1823 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1824 0 0 0 0 0 0 0 0 0 0

1824 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1825 40 PointerToArrayBase< LVecBase3f > const * 0 8576 40 PointerToArrayBase< LVecBase3f > const * 40 PointerToArrayBase< LVecBase3f > const * 0 0 1826 0 0 0 0 0 0 0 0 0 0

1826 38 PointerToArrayBase< LVecBase3f > const 0 8832 38 PointerToArrayBase< LVecBase3f > const 38 PointerToArrayBase< LVecBase3f > const 0 0 1585 0 0 0 0 0 0 0 0 0 0

1827 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1586 0 0 0 0 0 0 0 0 0 0

1828 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1829 0 0 0 0 0 0 0 0 0 0

1829 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1586 0 0 0 0 0 0 0 0 0 0

1830 41 ConstPointerToArray< LVecBase3i > const * 0 8576 41 ConstPointerToArray< LVecBase3i > const * 41 ConstPointerToArray< LVecBase3i > const * 0 0 1831 0 0 0 0 0 0 0 0 0 0

1831 39 ConstPointerToArray< LVecBase3i > const 0 8832 39 ConstPointerToArray< LVecBase3i > const 39 ConstPointerToArray< LVecBase3i > const 0 0 1587 0 0 0 0 0 0 0 0 0 0

1832 35 ConstPointerToArray< LVecBase3i > * 0 8576 35 ConstPointerToArray< LVecBase3i > * 35 ConstPointerToArray< LVecBase3i > * 0 0 1587 0 0 0 0 0 0 0 0 0 0

1833 36 PointerToArray< LVecBase3i > const * 0 8576 36 PointerToArray< LVecBase3i > const * 36 PointerToArray< LVecBase3i > const * 0 0 1834 0 0 0 0 0 0 0 0 0 0

1834 34 PointerToArray< LVecBase3i > const 0 8832 34 PointerToArray< LVecBase3i > const 34 PointerToArray< LVecBase3i > const 0 0 1612 0 0 0 0 0 0 0 0 0 0

1835 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1836 0 0 0 0 0 0 0 0 0 0

1836 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1837 0 0 0 0 0 0 0 0 0 0

1837 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1838 40 PointerToArrayBase< LVecBase3i > const * 0 8576 40 PointerToArrayBase< LVecBase3i > const * 40 PointerToArrayBase< LVecBase3i > const * 0 0 1839 0 0 0 0 0 0 0 0 0 0

1839 38 PointerToArrayBase< LVecBase3i > const 0 8832 38 PointerToArrayBase< LVecBase3i > const 38 PointerToArrayBase< LVecBase3i > const 0 0 1588 0 0 0 0 0 0 0 0 0 0

1840 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 0 1589 0 0 0 0 0 0 0 0 0 0

1841 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 0 1842 0 0 0 0 0 0 0 0 0 0

1842 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 0 1589 0 0 0 0 0 0 0 0 0 0

1843 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1844 0 0 0 0 0 0 0 0 0 0

1844 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1590 0 0 0 0 0 0 0 0 0 0

1845 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1590 0 0 0 0 0 0 0 0 0 0

1846 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1847 0 0 0 0 0 0 0 0 0 0

1847 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1613 0 0 0 0 0 0 0 0 0 0

1848 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1849 0 0 0 0 0 0 0 0 0 0

1849 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1850 0 0 0 0 0 0 0 0 0 0

1850 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1851 48 PointerToArrayBase< UnalignedLMatrix4d > const * 0 8576 48 PointerToArrayBase< UnalignedLMatrix4d > const * 48 PointerToArrayBase< UnalignedLMatrix4d > const * 0 0 1852 0 0 0 0 0 0 0 0 0 0

1852 46 PointerToArrayBase< UnalignedLMatrix4d > const 0 8832 46 PointerToArrayBase< UnalignedLMatrix4d > const 46 PointerToArrayBase< UnalignedLMatrix4d > const 0 0 1591 0 0 0 0 0 0 0 0 0 0

1853 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1592 0 0 0 0 0 0 0 0 0 0

1854 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1855 0 0 0 0 0 0 0 0 0 0

1855 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1592 0 0 0 0 0 0 0 0 0 0

1856 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1857 0 0 0 0 0 0 0 0 0 0

1857 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1593 0 0 0 0 0 0 0 0 0 0

1858 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1593 0 0 0 0 0 0 0 0 0 0

1859 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1860 0 0 0 0 0 0 0 0 0 0

1860 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1614 0 0 0 0 0 0 0 0 0 0

1861 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1862 0 0 0 0 0 0 0 0 0 0

1862 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1863 0 0 0 0 0 0 0 0 0 0

1863 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1864 48 PointerToArrayBase< UnalignedLMatrix4f > const * 0 8576 48 PointerToArrayBase< UnalignedLMatrix4f > const * 48 PointerToArrayBase< UnalignedLMatrix4f > const * 0 0 1865 0 0 0 0 0 0 0 0 0 0

1865 46 PointerToArrayBase< UnalignedLMatrix4f > const 0 8832 46 PointerToArrayBase< UnalignedLMatrix4f > const 46 PointerToArrayBase< UnalignedLMatrix4f > const 0 0 1594 0 0 0 0 0 0 0 0 0 0

1866 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1867 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1868 0 0 0 0 0 0 0 0 0 0

1868 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1595 0 0 0 0 0 0 0 0 0 0

1869 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1870 0 0 0 0 0 0 0 0 0 0

1870 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1596 0 0 0 0 0 0 0 0 0 0

1871 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1596 0 0 0 0 0 0 0 0 0 0

1872 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1873 0 0 0 0 0 0 0 0 0 0

1873 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1615 0 0 0 0 0 0 0 0 0 0

1874 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1875 0 0 0 0 0 0 0 0 0 0

1875 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1876 0 0 0 0 0 0 0 0 0 0

1876 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1877 49 PointerToArrayBase< UnalignedLVecBase4d > const * 0 8576 49 PointerToArrayBase< UnalignedLVecBase4d > const * 49 PointerToArrayBase< UnalignedLVecBase4d > const * 0 0 1878 0 0 0 0 0 0 0 0 0 0

1878 47 PointerToArrayBase< UnalignedLVecBase4d > const 0 8832 47 PointerToArrayBase< UnalignedLVecBase4d > const 47 PointerToArrayBase< UnalignedLVecBase4d > const 0 0 1597 0 0 0 0 0 0 0 0 0 0

1879 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1880 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1881 0 0 0 0 0 0 0 0 0 0

1881 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1598 0 0 0 0 0 0 0 0 0 0

1882 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1883 0 0 0 0 0 0 0 0 0 0

1883 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1599 0 0 0 0 0 0 0 0 0 0

1884 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1599 0 0 0 0 0 0 0 0 0 0

1885 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1886 0 0 0 0 0 0 0 0 0 0

1886 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1616 0 0 0 0 0 0 0 0 0 0

1887 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1888 0 0 0 0 0 0 0 0 0 0

1888 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1889 0 0 0 0 0 0 0 0 0 0

1889 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1890 49 PointerToArrayBase< UnalignedLVecBase4f > const * 0 8576 49 PointerToArrayBase< UnalignedLVecBase4f > const * 49 PointerToArrayBase< UnalignedLVecBase4f > const * 0 0 1891 0 0 0 0 0 0 0 0 0 0

1891 47 PointerToArrayBase< UnalignedLVecBase4f > const 0 8832 47 PointerToArrayBase< UnalignedLVecBase4f > const 47 PointerToArrayBase< UnalignedLVecBase4f > const 0 0 1600 0 0 0 0 0 0 0 0 0 0

1892 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1601 0 0 0 0 0 0 0 0 0 0

1893 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1894 0 0 0 0 0 0 0 0 0 0

1894 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1601 0 0 0 0 0 0 0 0 0 0

1895 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4i > const * 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 0 1896 0 0 0 0 0 0 0 0 0 0

1896 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4i > const 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 0 1602 0 0 0 0 0 0 0 0 0 0

1897 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4i > * 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 0 1602 0 0 0 0 0 0 0 0 0 0

1898 45 PointerToArray< UnalignedLVecBase4i > const * 0 8576 45 PointerToArray< UnalignedLVecBase4i > const * 45 PointerToArray< UnalignedLVecBase4i > const * 0 0 1899 0 0 0 0 0 0 0 0 0 0

1899 43 PointerToArray< UnalignedLVecBase4i > const 0 8832 43 PointerToArray< UnalignedLVecBase4i > const 43 PointerToArray< UnalignedLVecBase4i > const 0 0 1617 0 0 0 0 0 0 0 0 0 0

1900 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 1901 0 0 0 0 0 0 0 0 0 0

1901 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 1902 0 0 0 0 0 0 0 0 0 0

1902 19 UnalignedLVecBase4i 0 2048 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1903 49 PointerToArrayBase< UnalignedLVecBase4i > const * 0 8576 49 PointerToArrayBase< UnalignedLVecBase4i > const * 49 PointerToArrayBase< UnalignedLVecBase4i > const * 0 0 1904 0 0 0 0 0 0 0 0 0 0

1904 47 PointerToArrayBase< UnalignedLVecBase4i > const 0 8832 47 PointerToArrayBase< UnalignedLVecBase4i > const 47 PointerToArrayBase< UnalignedLVecBase4i > const 0 0 1603 0 0 0 0 0 0 0 0 0 0

1905 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 0 1604 0 0 0 0 0 0 0 0 0 0

1906 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 0 1907 0 0 0 0 0 0 0 0 0 0

1907 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 0 1604 0 0 0 0 0 0 0 0 0 0

1908 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1605 0 0 0 0 0 0 0 0 0 0

1909 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1910 0 0 0 0 0 0 0 0 0 0

1910 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1911 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1912 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1606 0 0 0 0 0 0 0 0 0 0

1913 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1607 0 0 0 0 0 0 0 0 0 0

1914 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1608 0 0 0 0 0 0 0 0 0 0

1915 30 PointerToArray< LVecBase2i > * 0 8576 30 PointerToArray< LVecBase2i > * 30 PointerToArray< LVecBase2i > * 0 0 1609 0 0 0 0 0 0 0 0 0 0

1916 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1610 0 0 0 0 0 0 0 0 0 0

1917 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1918 30 PointerToArray< LVecBase3i > * 0 8576 30 PointerToArray< LVecBase3i > * 30 PointerToArray< LVecBase3i > * 0 0 1612 0 0 0 0 0 0 0 0 0 0

1919 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1920 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1614 0 0 0 0 0 0 0 0 0 0

1921 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1922 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1616 0 0 0 0 0 0 0 0 0 0

1923 39 PointerToArray< UnalignedLVecBase4i > * 0 8576 39 PointerToArray< UnalignedLVecBase4i > * 39 PointerToArray< UnalignedLVecBase4i > * 0 0 1617 0 0 0 0 0 0 0 0 0 0

1924 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1925 0 0 0 0 0 0 0 0 0 0

1925 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1618 0 0 0 0 0 0 0 0 0 0

1926 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1618 0 0 0 0 0 0 0 0 0 0

1927 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1622 0 0 0 0 0 0 0 0 0 0

1928 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1929 0 0 0 0 0 0 0 0 0 0

1929 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1624 0 0 0 0 0 0 0 0 0 0

1930 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1931 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1932 0 0 0 0 0 0 0 0 0 0

1932 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1933 0 0 0 0 0 0 0 0 0 0

1933 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1934 0 0 0 0 0 0 0 0 0 0

1934 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1935 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1936 0 0 0 0 0 0 0 0 0 0

1936 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1623 0 0 0 0 0 0 0 0 0 0

1937 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1628 0 0 0 0 0 0 0 0 0 0

1938 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1939 0 0 0 0 0 0 0 0 0 0

1939 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1628 0 0 0 0 0 0 0 0 0 0

1940 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1941 0 0 0 0 0 0 0 0 0 0

1941 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1934 0 0 0 0 0 0 0 0 0 0

1942 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1625 0 0 0 0 0 0 0 0 0 0

1943 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1944 0 0 0 0 0 0 0 0 0 0

1944 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1945 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1946 0 0 0 0 0 0 0 0 0 0

1946 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 365
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 *
 * Note that it is the responsibility of the caller to ensure that the datagram
 * object is not destructed while this DatagramIterator is in use.
 */

1947 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1629 0 0 0 0 0 0 0 0 0 0

1948 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1949 0 0 0 0 0 0 0 0 0 0

1949 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1629 0 0 0 0 0 0 0 0 0 0

1950 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1951 0 0 0 0 0 0 0 0 0 0

1951 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1952 0 0 0 0 0 0 0 0 0 0

1952 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1953 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1954 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1725 0 0 0 0 0 0 0 0 0 0

1955 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1956 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1957 0 0 0 0 0 0 0 0 0 0

1957 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1631 0 0 0 0 0 0 0 0 0 0

1958 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1959 0 0 0 0 0 0 0 0 0 0

1959 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1625 0 0 0 0 0 0 0 0 0 0

1960 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1961 0 0 0 0 0 0 0 0 0 0

1961 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1632 0 0 0 0 0 0 0 0 0 0

1962 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1963 0 0 0 0 0 0 0 0 0 0

1963 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1964 0 0 0 0 0 0 0 0 0 0

1964 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1965 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1934 0 0 0 0 0 0 0 0 0 0

1966 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1964 0 0 0 0 0 0 0 0 0 0

1967 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1633 0 0 0 0 0 0 0 0 0 0

1968 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1726 0 0 0 0 0 0 0 0 0 0

1969 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1724 0 0 0 0 0 0 0 0 0 0

1970 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1971 0 0 0 0 0 0 0 0 0 0

1971 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1634 0 0 0 0 0 0 0 0 0 0

1972 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1973 0 0 0 0 0 0 0 0 0 0

1973 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1974 0 0 0 0 0 0 0 0 0 0

1974 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1975 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1952 0 0 0 0 0 0 0 0 0 0

1976 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1974 0 0 0 0 0 0 0 0 0 0

1977 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1639 0 0 0 0 0 0 0 0 0 0

1978 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1733 0 0 0 0 0 0 0 0 0 0

1979 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1980 0 0 0 0 0 0 0 0 0 0

1980 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1639 0 0 0 0 0 0 0 0 0 0

1981 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1635 0 0 0 0 0 0 0 0 0 0

1982 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1640 0 0 0 0 0 0 0 0 0 0

1983 17 LFrustumf const * 0 8576 17 LFrustumf const * 17 LFrustumf const * 0 0 1984 0 0 0 0 0 0 0 0 0 0

1984 15 LFrustumf const 0 8832 15 LFrustumf const 15 LFrustumf const 0 0 1640 0 0 0 0 0 0 0 0 0 0

1985 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1641 0 0 0 0 0 0 0 0 0 0

1986 17 LFrustumd const * 0 8576 17 LFrustumd const * 17 LFrustumd const * 0 0 1987 0 0 0 0 0 0 0 0 0 0

1987 15 LFrustumd const 0 8832 15 LFrustumd const 15 LFrustumd const 0 0 1641 0 0 0 0 0 0 0 0 0 0

1988 16 LFrustum const * 0 8576 16 LFrustum const * 16 LFrustum const * 0 0 1989 0 0 0 0 0 0 0 0 0 0

1989 14 LFrustum const 0 8832 14 LFrustum const 14 LFrustum const 0 0 1642 0 0 0 0 0 0 0 0 0 0

1990 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 210
// The CS_default entry does not refer to a particular coordinate system,
// but rather to the value stored in default_coordinate_system, which in
// turn is loaded from the config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 21
// Z-Up, Right-handed
1 12 CS_yup_right 12 CS_yup_right 21
// Y-Up, Right-handed
2 11 CS_zup_left 11 CS_zup_left 20
// Z-Up, Left-handed
3 11 CS_yup_left 11 CS_yup_left 20
// Y-Up, Left-handed
4 10 CS_invalid 10 CS_invalid 156
// CS_invalid is not a coordinate system at all.  It can be used in user-
// input processing code to indicate a contradictory coordinate system
// request.
5 0 0

1991 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1646 0 0 0 0 0 0 0 0 0 0

1992 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1993 0 0 0 0 0 0 0 0 0 0

1993 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1646 0 0 0 0 0 0 0 0 0 0

1994 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1647 0 0 0 0 0 0 0 0 0 0

1995 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1996 0 0 0 0 0 0 0 0 0 0

1996 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1647 0 0 0 0 0 0 0 0 0 0

1997 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1998 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 1649 0 0 0 0 0 0 0 0 0 0

1999 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 2000 0 0 0 0 0 0 0 0 0 0

2000 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1648 0 0 0 0 0 0 0 0 0 0

2001 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1650 0 0 0 0 0 0 0 0 0 0

2002 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 2003 0 0 0 0 0 0 0 0 0 0

2003 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1650 0 0 0 0 0 0 0 0 0 0

2004 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1651 0 0 0 0 0 0 0 0 0 0

2005 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 2006 0 0 0 0 0 0 0 0 0 0

2006 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1651 0 0 0 0 0 0 0 0 0 0

2007 16 Mersenne const * 0 8576 16 Mersenne const * 16 Mersenne const * 0 0 2008 0 0 0 0 0 0 0 0 0 0

2008 14 Mersenne const 0 8832 14 Mersenne const 14 Mersenne const 0 0 1654 0 0 0 0 0 0 0 0 0 0

2009 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1654 0 0 0 0 0 0 0 0 0 0

2010 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1656 0 0 0 0 0 0 0 0 0 0

2011 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1657 0 0 0 0 0 0 0 0 0 0

2012 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 2013 0 0 0 0 0 0 0 0 0 0

2013 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1657 0 0 0 0 0 0 0 0 0 0

2014 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 2015 0 0 0 0 0 0 0 0 0 0

2015 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1658 0 0 0 0 0 0 0 0 0 0

2016 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1658 0 0 0 0 0 0 0 0 0 0

2017 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1659 0 0 0 0 0 0 0 0 0 0

2018 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1660 0 0 0 0 0 0 0 0 0 0

2019 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 2020 0 0 0 0 0 0 0 0 0 0

2020 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1660 0 0 0 0 0 0 0 0 0 0

2021 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1661 0 0 0 0 0 0 0 0 0 0

2022 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 2023 0 0 0 0 0 0 0 0 0 0

2023 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1661 0 0 0 0 0 0 0 0 0 0

2024 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1718 0 0 0 0 0 0 0 0 0 0

2025 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 2026 0 0 0 0 0 0 0 0 0 0

2026 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1718 0 0 0 0 0 0 0 0 0 0

2027 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1719 0 0 0 0 0 0 0 0 0 0

2028 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 2029 0 0 0 0 0 0 0 0 0 0

2029 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1719 0 0 0 0 0 0 0 0 0 0

2030 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1720 0 0 0 0 0 0 0 0 0 0

2031 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 2032 0 0 0 0 0 0 0 0 0 0

2032 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1720 0 0 0 0 0 0 0 0 0 0

2033 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1721 0 0 0 0 0 0 0 0 0 0

2034 15 Triangulator3 * 0 8576 15 Triangulator3 * 15 Triangulator3 * 0 0 1723 0 0 0 0 0 0 0 0 0 0

2035 21 Triangulator3 const * 0 8576 21 Triangulator3 const * 21 Triangulator3 const * 0 0 2036 0 0 0 0 0 0 0 0 0 0

2036 19 Triangulator3 const 0 8832 19 Triangulator3 const 19 Triangulator3 const 0 0 1723 0 0 0 0 0 0 0 0 0 0

2037 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1736 0 0 0 0 0 0 0 0 0 0

2038 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1759 0 0 0 0 0 0 0 0 0 0

2039 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 2040 0 0 0 0 0 0 0 0 0 0

2040 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

2041 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 2042 0 0 0 0 0 0 0 0 0 0

2042 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

0
15
2043 3 min 0 2 1624 1343 0 0 0 0 0 0 0 25 FiniteBoundingVolume::min 0

2044 3 max 0 2 1624 1344 0 0 0 0 0 0 0 25 FiniteBoundingVolume::max 0

2045 6 volume 0 2 1626 1345 0 0 0 0 0 0 0 28 FiniteBoundingVolume::volume 0

2046 6 points 0 66 1624 1421 0 0 0 0 1420 0 0 19 BoundingBox::points 0

2047 6 planes 0 66 1635 1423 0 0 0 0 1422 0 0 19 BoundingBox::planes 0

2048 6 points 0 66 1624 1445 0 0 0 0 1444 0 0 26 BoundingHexahedron::points 0

2049 6 planes 0 66 1635 1447 0 0 0 0 1446 0 0 26 BoundingHexahedron::planes 0

2050 5 plane 0 2 1649 1462 0 0 0 0 0 0 0 20 BoundingPlane::plane 0

2051 6 center 0 6 1624 1469 1471 0 0 0 0 0 0 22 BoundingSphere::center 0

2052 6 radius 0 6 1626 1470 1472 0 0 0 0 0 0 22 BoundingSphere::radius 0

2053 10 components 0 66 1652 1480 0 0 0 0 1479 0 0 38 IntersectionBoundingVolume::components 0

2054 10 components 0 66 1652 1498 0 0 0 0 1497 0 0 31 UnionBoundingVolume::components 0

2055 8 vertices 0 66 1721 1545 0 0 0 0 1544 0 0 22 Triangulator::vertices 0

2056 8 vertices 0 66 1724 1561 0 0 0 0 1560 0 0 23 Triangulator3::vertices 0

2057 5 plane 0 2 1726 1563 0 0 0 0 0 0 0 20 Triangulator3::plane 0

8
2058 10 get_points 0 1420 1421 23 BoundingBox::get_points 0

2059 10 get_planes 0 1422 1423 23 BoundingBox::get_planes 0

2060 10 get_points 0 1444 1445 30 BoundingHexahedron::get_points 0

2061 10 get_planes 0 1446 1447 30 BoundingHexahedron::get_planes 0

2062 14 get_components 0 1479 1480 42 IntersectionBoundingVolume::get_components 0

2063 14 get_components 0 1497 1498 35 UnionBoundingVolume::get_components 0

2064 12 get_vertices 0 1544 1545 26 Triangulator::get_vertices 0

2065 12 get_vertices 0 1560 1561 27 Triangulator3::get_vertices 0

